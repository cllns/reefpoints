<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DockYard - Reefpoints</title>
  <id>http://reefpoints.dockyard.com</id>
  <link href="http://reefpoints.dockyard.com"/>
  <link href="http://reefpoints.dockyard.com/atom.xml" rel="self"/>
  <updated>2014-06-24T00:00:00Z</updated>
  <author>
    <name>DockYard</name>
  </author>
  <entry>
    <title>Introducing Ember CLI Addons</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/06/24/introducing_ember_cli_addons.html"/>
    <id>http://reefpoints.dockyard.com/2014/06/24/introducing_ember_cli_addons.html</id>
    <published>2014-06-24T00:00:00Z</published>
    <updated>2014-06-24T21:55:10-04:00</updated>
    <author>
      <name>Robert Jackson</name>
    </author>
    <summary/>
    <content type="html">&lt;p&gt;Distribution of reusable Ember.js libraries has been a pain point for quite a while. During application development we have frequently wished for a silver bullet for the sharing of concepts/code from one project to another.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/stefanpenner/ember-cli"&gt;Ember CLI&lt;/a&gt; has given us the opportunity to set the conventions for sharing that we have been searching for.&lt;/p&gt;

&lt;p&gt;Over the last few weeks we have been focusing our efforts on the Ember CLI Addon story, and current support the following scenarios out of the box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Performing operations on the &lt;code&gt;EmberApp&lt;/code&gt; created in the consuming applications &lt;code&gt;Brocfile.js&lt;/code&gt;. The most common things this would be used to call &lt;code&gt;app.import&lt;/code&gt; (see &lt;a href="iamstef.net/ember-cli/#managing-dependencies"&gt;Ember CLI - Managing Dependencies&lt;/a&gt; for more details) or process the various options provided by the consuming application. Examples: &lt;a href="https://github.com/rjackson/ember-cli-pretender"&gt;ember-cli-pretender&lt;/a&gt;, &lt;a href="https://github.com/firebase/emberFire"&gt;emberFire&lt;/a&gt;, and &lt;a href="https://github.com/rjackson/ember-cli-ic-ajax"&gt;ember-cli-ic-ajax&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adding preprocessors to the default registry. This allows us to use a custom preprocessor to handle our templates, JavaScript, and/or styles. Example: &lt;a href="https://github.com/rjackson/ember-cli-esnext"&gt;ember-cli-esnext&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Providing a custom application tree to be merged with the consuming application. This allows you to distribute anything that might need to be imported in the consuming application; including components, templates, routes, mixins, helpers, etc. Example: &lt;a href="https://github.com/rondale-sc/ember-cli-super-number"&gt;ember-cli-super-number&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Providing custom express middlewares. This allows for an addon to completely customize the development servers behaviors, making things like automated mock Ember Data API&amp;#39;s actually possible. This is currently only available on master (will be available in  0.0.37 and higher).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the design goals that the current crop of example addons follow is that they can all be installed and used simply via:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install --save-dev &amp;lt;package name&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Details&lt;/h2&gt;

&lt;h3&gt;Discovery&lt;/h3&gt;

&lt;p&gt;Ember CLI detects the presence of an addon by inspecting each of your applications dependencies and searching their &lt;code&gt;package.json&lt;/code&gt; files for the presence of &lt;code&gt;ember-addon&lt;/code&gt; in the keywords section. &lt;/p&gt;

&lt;h3&gt;Creation&lt;/h3&gt;

&lt;p&gt;Once the available addons are detected, Ember CLI will require the addon.  By default it will use standard Node.js require rules (see &lt;a href="http://nodejs.org/api/modules.html#modules_all_together"&gt;here&lt;/a&gt; for a breakdown), but you can provide a custom entry point by specifying a &lt;code&gt;ember-addon-main&lt;/code&gt; property in your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Either way you go, during the various commands that cause a new build to be done (&lt;code&gt;ember server&lt;/code&gt;, &lt;code&gt;ember test&lt;/code&gt;, &lt;code&gt;ember build&lt;/code&gt;, etc) Ember CLI will create a new instance of the class that your addon returns passing it the &lt;code&gt;Project&lt;/code&gt; instance for the current project. The &lt;code&gt;Project&lt;/code&gt; model has a few functions that might be useful to your addon. You can see a full list by inspecting the &lt;a href="https://github.com/stefanpenner/ember-cli/blob/master/lib/models/project.js"&gt;source&lt;/a&gt;, but to name a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;require&lt;/code&gt; -- Lets you require files or packages from the consuming application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config&lt;/code&gt; -- Returns the configuration for the provided environment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resolve&lt;/code&gt; -- Looks up a file from the root of the project using standard Node require semantics, but with the projects root as the base directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Build Process Inclusion&lt;/h3&gt;

&lt;p&gt;When the consuming application&amp;#39;s &lt;code&gt;Brocfile.js&lt;/code&gt; is processed by Ember CLI to build/serve/etc the addon&amp;#39;s &lt;code&gt;included&lt;/code&gt; function is called passing the &lt;code&gt;EmberApp&lt;/code&gt; instance. You can use this to access the options provided (for configuration of your addon for example).&lt;/p&gt;

&lt;h3&gt;Intra Build Hooks&lt;/h3&gt;

&lt;p&gt;There are a few other points in the build process that your addon can hook into via the &lt;code&gt;treeFor&lt;/code&gt; function. &lt;code&gt;treeFor&lt;/code&gt; is called to setup the final build output for a few specific points in the build process. The addons &lt;code&gt;treeFor&lt;/code&gt; function will be called with an argument that signifies which tree is being asked for.&lt;/p&gt;

&lt;p&gt;Currently, the following trees can be customized by the addon:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app&lt;/code&gt; -- The tree returned by your addon for the &lt;code&gt;app&lt;/code&gt; tree will be merged with that of the application. This is an excellent place to add custom initializers for your addon, add routes/controllers/views/components/templates/etc (anything that goes in &lt;code&gt;app/&lt;/code&gt; really). For additional information read through the &lt;a href="http://hashrocket.com/blog/posts/building-ember-addons"&gt;blog post&lt;/a&gt; describing how &lt;code&gt;ember-cli-super-number&lt;/code&gt; was turned into an addon.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;styles&lt;/code&gt; -- The tree returned by your addon for the &lt;code&gt;styles&lt;/code&gt; tree will be merged with your applications styles (generally &lt;code&gt;app/styles/&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vendor&lt;/code&gt; -- The tree returned by your addon for the &lt;code&gt;vendor&lt;/code&gt; tree will be merged with your applications vendor tree (generally &lt;code&gt;vendor/&lt;/code&gt;). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the trees returned by addons are merged into the corresponding tree in the application. The application&amp;#39;s direct trees are always last so they will always override any files from an addon. This actually makes a wonderful place for application specific customization: your addon could provide a good default template, and the application can override by simple placing their own template in lat same path.&lt;/p&gt;

&lt;h2&gt;Future&lt;/h2&gt;

&lt;p&gt;Many things are still planned for the &amp;quot;Addon Story&amp;quot; in Ember CLI. A few of them below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow addons to specify preferred ordering (before or after another addon). Similar in concept (and stolen from) the Ember initializer ordering. This is implemented on master and will be included in 0.0.37.&lt;/li&gt;
&lt;li&gt;Allow addons to provide a &lt;code&gt;blueprintPaths&lt;/code&gt; function that will return addition paths for blueprints to be looked up. This will allow an addon to override internal blueprints or add their own.&lt;/li&gt;
&lt;li&gt;Allow more than one preprocessor to be used at once. Currently, it is only possible to have a single preprocessor, but this is a limitation if you want both SCSS and plain CSS (for example).&lt;/li&gt;
&lt;li&gt;Expose post-processed stages. This will allow for better customization of the final output which things like &lt;a href="https://github.com/ai/autoprefixer"&gt;autoprefixer&lt;/a&gt; would be able to take advantage of.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Call To Arms&lt;/h2&gt;

&lt;p&gt;This API is still very fluid and not set in stone. We need as much feedback as possible to truly solidify things.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>KAPOW! Writing prototypes with Framer</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/06/23/kapow-using-framer.html"/>
    <id>http://reefpoints.dockyard.com/2014/06/23/kapow-using-framer.html</id>
    <published>2014-06-23T00:00:00Z</published>
    <updated>2014-06-23T14:49:44-04:00</updated>
    <author>
      <name>Steven Trevathan</name>
    </author>
    <summary>A look at Framer.js, a powerful prototyping tool.</summary>
    <content type="html">&lt;p&gt;I&amp;#39;ve finally used &lt;a href="http://framerjs.com/"&gt;Framer&lt;/a&gt; on a client project and couldn&amp;#39;t be happier with the result. I normally use &lt;a href="http://www.invisionapp.com/"&gt;InVision&lt;/a&gt; and highly recommend it, but Framer is the obvious choice when we need the experience to feel significantly more real.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.cooper.com/journal/2013/07/designers-toolkit-proto-testing-for-prototypes"&gt;Every tool has its pros and cons&lt;/a&gt;, however, so it won&amp;#39;t &lt;em&gt;always&lt;/em&gt; be the best choice for you.&lt;/p&gt;

&lt;p&gt;Let me start with Framer&amp;#39;s big con: you must write JavaScript to knit a prototype together. The code itself is very easy to learn, but understanding how the Framer script interacts with your PSD&amp;#39;s groups and layer organization is like flying blind. With practice you can get past this and work gets much, much faster.&lt;/p&gt;

&lt;p&gt;The one other con is that their documentation is made more for developers than designers. So if you&amp;#39;re not used to digging into developer docs you will likely be overwhelmed and unsure what you&amp;#39;re looking for. Looking elsewhere won&amp;#39;t help you either, there doesn&amp;#39;t seem to be much community around this (yet).&lt;/p&gt;

&lt;p&gt;Someone with less coding experience will find Framer difficult and more intimidating than it has to be. I&amp;#39;d recommend dealing with the learning curve by practicing on a few side projects before you put anything important on the line (not that side projects aren&amp;#39;t important).&lt;/p&gt;

&lt;p&gt;Where Framer really shines bright: you won&amp;#39;t have to verbalize (or make embarrassing gestures) for how your app should feel, because you define that with enormous control. Oddly enough, the biggest con is your ally here, as writing custom JavaScript is what makes this control possible.&lt;/p&gt;

&lt;p&gt;Framer supports clicks and taps just the same, supports many animation options, is highly configurable, and runs very, very smoothly on all (of my) devices. I&amp;#39;ve tested it on iPhone, iPad, and a Mac. Because of this control and variability of use, your prototypes will feel much more real to the user in a testing scenario. This is especially good when your interactions help communicate state and position.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;ve used Framer before, let me know how you like it. There&amp;#39;s only so much time in the world to play with prototyping tools, but my next experiment will be with &lt;a href="http://facebook.github.io/origami/"&gt;Origami&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Bonus!&lt;/h2&gt;

&lt;p&gt;While doing user testing sessions, you may want the testee to work on the actual device. To do so you can use &lt;a href="http://anvilformac.com/"&gt;Anvil&lt;/a&gt; to create a local web address using &lt;a href="http://pow.cx/"&gt;Pow&lt;/a&gt;. This will give you an address (something like &lt;code&gt;http://yourappname.youripaddress.xip.io/&lt;/code&gt;) that you may access on your device.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Goodbye Heroku</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/06/23/goodbye-heroku.html"/>
    <id>http://reefpoints.dockyard.com/2014/06/23/goodbye-heroku.html</id>
    <published>2014-06-23T00:00:00Z</published>
    <updated>2014-06-23T21:14:04-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Done with them</summary>
    <content type="html">&lt;p&gt;I&amp;#39;ve been a Heroku user since the beginning. And I understand they have
had their ups and downs but over the past 2 years the service has been
degrading and today was the last straw for me. Allow me to elaborate.&lt;/p&gt;

&lt;h2&gt;Downtime&lt;/h2&gt;

&lt;p&gt;Today Heroku had a &amp;quot;Scheduled Maintenance at 2pm EST&amp;quot;. First of all,
this is just stupid. Don&amp;#39;t schedule a maintenance period at 2pm EST for
&lt;strong&gt;anything&lt;/strong&gt;. That period of time has to be one of the most heavily
trafficked timeslots on the web. Its an hour after everyone on the East
Coast has come back from lunch. It is an hour before lunch on the West
Coast. This, to me, demonstrates a lack of judgement on Heroku&amp;#39;s part. I
know the counter-argument is going to be &amp;quot;we&amp;#39;ve done plenty of other
scheduled maintenances at 2pm EST without incident&amp;quot;. My reply is that
this counter-argument is &lt;em&gt;bullshit&lt;/em&gt;. Just because you got away without
problems previously doesn&amp;#39;t mean they won&amp;#39;t happen in the future. Things
go wrong, people screw up. When Heroku has control over when those
screwups occur and they choose to push that risk at 2pm EST that is a
problem.&lt;/p&gt;

&lt;h2&gt;Reporting of Downtime&lt;/h2&gt;

&lt;p&gt;I am convinced their Status team just sits on Twitter all day and waits
for enough people to bitch and complain that Heroku is down before they
update the status page. I don&amp;#39;t care what data they provide to the
contrary. Why is the updated status page important? When our customers
email us during our vacation pissed off that we are not around and we
have &lt;em&gt;nothing&lt;/em&gt; to show to them to prove that this is Heroku&amp;#39;s fault and
not ours, to me that status page being updated immediately &lt;strong&gt;before&lt;/strong&gt;
our customers discover on their own is very important.&lt;/p&gt;

&lt;h2&gt;Price&lt;/h2&gt;

&lt;p&gt;It has been heavily reported that AWS has cut their pricing quite a bit
over the past few years. Yet, how many times has Heroku reduced its
price? (Heroku resells AWS) To my knowledge &lt;strong&gt;zero&lt;/strong&gt;. So everytime Amazon
reduces EC2 pricing Heroku just pockets the difference and gives a &amp;quot;fuck
you very much!&amp;quot; to all of its customers.&lt;/p&gt;

&lt;h2&gt;Fixes for All&lt;/h2&gt;

&lt;p&gt;The major downside to hosted devops is that when something goes wrong
that affects everyone you usually have to wait until they make the fix
for &lt;strong&gt;everyone&lt;/strong&gt; before your app comes back up. What should probably be
a 5 minute downtime &lt;em&gt;at most&lt;/em&gt; turns into a 30 minute downtime &lt;strong&gt;at least&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Buildpacks&lt;/h2&gt;

&lt;p&gt;Buildpacks are just terrible.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I get that I&amp;#39;m ranting and I&amp;#39;m pretty pissed off. But mistakes like
today&amp;#39;s are completely avoidable yet Heroku chose to expose everyone to
this increased risk for no good reason that I can see.&lt;/p&gt;

&lt;p&gt;We will no longer be starting any new customers on Heroku. And we will
recommend to our current customers to move off of Heroku. We&amp;#39;re big fans
of Digital Ocean so we&amp;#39;re likely to land there as our preferred hosting
service.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Making the DIY conference badges</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/06/21/making-the-diy-badges.html"/>
    <id>http://reefpoints.dockyard.com/2014/06/21/making-the-diy-badges.html</id>
    <published>2014-06-21T00:00:00Z</published>
    <updated>2014-06-21T15:38:49-04:00</updated>
    <author>
      <name>Maria Matveeva</name>
    </author>
    <summary>What are badges for, anyway?</summary>
    <content type="html">&lt;p&gt;What are badges for, anyway? At any professional event with more than fifteen people, we wear some sort of name tag.&lt;/p&gt;

&lt;h2&gt;The current situation with badges:&lt;/h2&gt;

&lt;p&gt;If it&amp;#39;s a smaller or low budget event, you get a shipping label and write your name with a sharpie, then stick to your shirt and hope it holds. (I always stick mine to a pant leg just because.) &lt;/p&gt;

&lt;p&gt;A step up would be vinyl stickers or shipping labels with something like the conference name printed on them, but again attendees must write their name. &lt;/p&gt;

&lt;p&gt;At the highest level of badge, you arrive an event and receive a fully branded badge on a colorful lanyard with your name and photo printed on both sides, to prevent you from lending your $800 conference pass to a friend.&lt;/p&gt;

&lt;h2&gt;Three things badges do best:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Prove that you&amp;#39;ve paid for your ticket&lt;/li&gt;
&lt;li&gt;Help brand the event&lt;/li&gt;
&lt;li&gt;Help you meet people&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our focus for the badges was mostly to help people meet and talk, and if we get to show off the Wicked Good Conferences brand - that&amp;#39;s cool too. We did not rely on the badges for ticketing because the event is relatively small, and held in a single location. There were no repeated check-ins at the door or strangers walking in off the relatively low traffic street.&lt;/p&gt;

&lt;p&gt;This allowed me the freedom to experiment with the badges. The only restriction was the budget; we wanted to make about 200 customizable name badges with a budget range of $20–$50. This is not a realistic budget for high quality &amp;quot;professionally&amp;quot; printed badges (decent custom lanyards alone are at least $1 each).&lt;/p&gt;

&lt;h2&gt;No printed names&lt;/h2&gt;

&lt;p&gt;We decided to skip printing people&amp;#39;s names altogether, and ask them to write names instead. This also allowed people to put a twitter handle and other useful information on the badges, and be funny with them. I am an introvert, so I appreciate any excuse to start a conversation. Stickers, twitter handles and stick figures on badges helped make interaction easier.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/post-assets/maria/DIY-badges-01.jpg" alt=""&gt;&lt;/p&gt;

&lt;h2&gt;No printed lanyards&lt;/h2&gt;

&lt;p&gt;Custom printed lanyards, in the quality we wanted, were way above our budget. Instead, we tried a few DIY ideas: string, ribbon, rope and strips of jersey fabric. The fabric turned out to be the most comfortable to wear. Knit jersey (&amp;quot;tee-shirt&amp;quot;) fabric will roll into a soft string if you cut 1&amp;quot; wide strips and stretch them out. We used about 2.5 yards of 52&amp;quot; wide fabric to make the 200 strips. We could make the strips a half to a third of the width of the fabric, depending on how long we wanted the strips to be.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/post-assets/maria/DIY-badges-02.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;An added benefit of using fabric is a much better selection of colors compared to lanyards. We managed to get a near-perfect match to our attendee shirts!&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/post-assets/maria/DIY-badges-03.jpg" alt=""&gt;&lt;/p&gt;

&lt;h2&gt;Actually, no printed anything&lt;/h2&gt;

&lt;p&gt;To make a color impression at a low cost we used a rubber stamp with a purple ink pad. We did not commit to placing any sponsor logos on the badges, so I had complete freedom with this design. We ordered a rubber stamp of the Wicked Good Conferences logo by itself so we can reuse it for the next conferences. To make the badge itself, we stamped and punched a hole in standard 3×5&amp;quot; index cards.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/post-assets/maria/DIY-badges-04.jpg" alt=""&gt;
&lt;img src="/images/post-assets/maria/DIY-badges-05.jpg" alt=""&gt;&lt;/p&gt;

&lt;h2&gt;Budget breakdown&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1×2&amp;quot; Custom rubber stamp&amp;quot;: $12 + shipping&lt;/li&gt;
&lt;li&gt;Purple ink pad: $3.50&lt;/li&gt;
&lt;li&gt;Index cards, 2 packs of 100: ~$7&lt;/li&gt;
&lt;li&gt;Single hole punch: ~$5&lt;/li&gt;
&lt;li&gt;Jersey fabric (we already had it, but if you need to buy it cost about $5/yard): free or $15&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Lessons learned&lt;/h2&gt;

&lt;p&gt;The badges felt about right for the event, not too formal, not too shabby. Some lanyards turned out a bit short, but people were creative with placement, wearing them not only around the neck but on a sleeve, on the hat, tying them to the belt loop or a shirt button, and even wearing as a soft choker.
Next time around we can also experiment with other paper types and have the paper cut to size, to allow for a sturdier badge in a wider range of colors.&lt;/p&gt;

&lt;p&gt;Were you at WGE? Let us know what you thought of the DIY badges!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Swift and JavaScript</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/06/15/swift-and-javascript.html"/>
    <id>http://reefpoints.dockyard.com/2014/06/15/swift-and-javascript.html</id>
    <published>2014-06-15T00:00:00Z</published>
    <updated>2014-06-20T21:51:48-04:00</updated>
    <author>
      <name>Alex Navasardyan</name>
    </author>
    <summary>Swift explained for JavaScript developers</summary>
    <content type="html">&lt;p&gt;You might have already heard about a new language from Apple, &lt;a href="https://developer.apple.com/swift/"&gt;Swift&lt;/a&gt;.
If you haven&amp;#39;t, make sure to check it out. This is the language that is going to replace &lt;a href="https://en.wikipedia.org/wiki/Objective-C"&gt;Objective-C&lt;/a&gt; in the future.&lt;/p&gt;

&lt;p&gt;So why should a JavaScript developer be excited about a language like Swift?
Because semicolons are optional in Swift, too.&lt;/p&gt;

&lt;h3&gt;Variables&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s declare a variable in &lt;code&gt;JavaScript&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; country = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Argentina&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s how the same declaration looks like in Swift:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;var country: String = &amp;quot;Argentina&amp;quot;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, the same statement can be rewritten as such:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;var country = &amp;quot;Argentina&amp;quot;; // inferred as String
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Swift uses type inference. It looks on the right hand side of the assignment
to figure out the type of the variable.&lt;/p&gt;

&lt;p&gt;Swift is type safe language. It performs type checks during compilation time
and informs you if there are any type mismatch errors. Unlike in JavaScript,
that means that after you defined &lt;code&gt;country&lt;/code&gt; variable and its type was
inferred to be &lt;code&gt;String&lt;/code&gt;, you can&amp;#39;t re-assign with another type:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;country = 2; // Cannot convert the expression's type to type 'String'
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Constants&lt;/h3&gt;

&lt;p&gt;JavaScript doesn&amp;#39;t have a concept of a &lt;code&gt;constant&lt;/code&gt;. All &amp;quot;constants&amp;quot; are just
variables (typically in the outer scope). You can &amp;quot;freeze&amp;quot; the object using
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"&gt;Object.freeze()&lt;/a&gt;
to prevent new properties to be added and existing properties to be removed.&lt;/p&gt;

&lt;p&gt;The next version of JavaScript is going to introduce &lt;a href="https://people.mozilla.org/%7Ejorendorff/es6-draft.html#sec-13.2.1"&gt;const&lt;/a&gt;
keyword and will support constants:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;const y = &lt;span class="integer"&gt;10&lt;/span&gt;; &lt;span class="comment"&gt;// Note that you need to specift the value of the constant&lt;/span&gt;
y = &lt;span class="integer"&gt;20&lt;/span&gt;;       &lt;span class="comment"&gt;// SyntaxError: Assignment to constant variable&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you want to define a constant in Swift, you will use &lt;code&gt;let&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;let bestCity = &amp;quot;Boston&amp;quot;;
bestCity = &amp;quot;Cape Town&amp;quot;; // Cannot assign to 'let' value 'bestCity'

// Swift allows you to use underscore as a delimiter
// to improve readability of your code
let oneMillion = 1_000_000;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Tuples&lt;/h3&gt;

&lt;p&gt;So what is a &lt;a href="http://en.wikipedia.org/wiki/Tuple"&gt;tuple&lt;/a&gt;? TL;DR it&amp;#39;s an ordered list of things.&lt;/p&gt;

&lt;p&gt;You can think of a tuple as if it&amp;#39;s an object:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; villain = {
  &lt;span class="key"&gt;name&lt;/span&gt;:     &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Magneto&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;realName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Max Eisenhardt&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;powers&lt;/span&gt;:   [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Magnetic flight&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Magnetic force fields&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;]
};

villain.name; &lt;span class="comment"&gt;// =&amp;gt; 'Magneto'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In Swift, the declaration of a tuple will look like this:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;let villain = (
  name:     &amp;quot;Magneto&amp;quot;,
  realName: &amp;quot;Max Eisenhardt&amp;quot;,
  powers:   [&amp;quot;Magnetic flight&amp;quot;, &amp;quot;Magnetic force fields&amp;quot;]
);

villain.name; // =&amp;gt; &amp;quot;Magneto&amp;quot;
villain.1;    // =&amp;gt; &amp;quot;Max Eisenhardt&amp;quot;
villain.2;    // =&amp;gt; [...]
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Tuples are useful when you want to return multiple values from a function as a single compound value (that is
exactly what we do so often in JavaScript).&lt;/p&gt;

&lt;h3&gt;Arrays and Dictionaries&lt;/h3&gt;

&lt;p&gt;Definining an array or a dictionary looks very similar.&lt;/p&gt;

&lt;p&gt;In JavaScript:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; names = [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Alex&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Rob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Dan&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;];
&lt;span class="keyword"&gt;var&lt;/span&gt; ages  = { &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Alex&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;13&lt;/span&gt;, &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Rob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt;, &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Dan&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;4&lt;/span&gt; };

names[&lt;span class="integer"&gt;0&lt;/span&gt;];     &lt;span class="comment"&gt;// =&amp;gt; 'Alex'&lt;/span&gt;
ages[&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Alex&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;]; &lt;span class="comment"&gt;// =&amp;gt; 13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In Swift:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;var names = [&amp;quot;Alex&amp;quot;, &amp;quot;Rob&amp;quot;, &amp;quot;Dan&amp;quot;];
var ages  = [&amp;quot;Alex&amp;quot;: 13, &amp;quot;Rob&amp;quot;: 5, &amp;quot;Dan&amp;quot;: 4];

names[0];     // =&amp;gt; &amp;quot;Alex&amp;quot;
ages[&amp;quot;Alex&amp;quot;]; // 13
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Generics&lt;/h3&gt;

&lt;p&gt;In a very generic, hand wavy terms &lt;code&gt;Generics&lt;/code&gt; introduce type safety and reusability of the code. They&amp;#39;re frequently used
in classes and methods that operate on them.&lt;/p&gt;

&lt;p&gt;To illustrate what &lt;code&gt;Generics&lt;/code&gt; are, let&amp;#39;s implement a &lt;a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;Queue&lt;/span&gt;() {
  &lt;span class="local-variable"&gt;this&lt;/span&gt;._queue = [];
}

Queue.prototype.&lt;span class="function"&gt;enqueue&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;(item) {
  &lt;span class="local-variable"&gt;this&lt;/span&gt;._queue.push(item);
}

Queue.prototype.&lt;span class="function"&gt;dequeue&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;() {
 &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;._queue.shift();
}

&lt;span class="keyword"&gt;var&lt;/span&gt; queue = &lt;span class="keyword"&gt;new&lt;/span&gt; Queue();

queue.enqueue(&lt;span class="integer"&gt;2&lt;/span&gt;);
queue.enqueue(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
queue.enqueue(&lt;span class="float"&gt;0.5&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now wasn&amp;#39;t that easy, eh?&lt;/p&gt;

&lt;p&gt;Note, that you don&amp;#39;t have to care about types in JavaScript that much. You just &lt;code&gt;enqueue&lt;/code&gt; a value of any type
and you&amp;#39;re all set.&lt;/p&gt;

&lt;p&gt;Swift is different. You can&amp;#39;t push objects of different types onto the array.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a &lt;code&gt;Queue&lt;/code&gt; class for &lt;code&gt;Integer&lt;/code&gt; values:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;class Queue {
  var _queue = Int[]();

  func enqueue(item: Int) {
    _queue.append(item);
  }

  func dequeue() -&amp;gt; Int {
    return _queue.removeAtIndex(0);
  }
}

var queue = Queue();

queue.enqueue(2);
queue.enqueue(3);
queue.enqueue(4);
queue.enqueue(&amp;quot;4&amp;quot;); // Cannot convert the expression's type to type 'Int'
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What if you want to create a &lt;code&gt;Queue&lt;/code&gt; class for &lt;code&gt;String&lt;/code&gt; values? You&amp;#39;re going to have copy implementation of &lt;code&gt;Queue&amp;lt;Int&amp;gt;&lt;/code&gt; class
and replace &lt;code&gt;Int&lt;/code&gt; with &lt;code&gt;String&lt;/code&gt;. A lot of code duplication. Here&amp;#39;s where &lt;code&gt;Generics&lt;/code&gt; shine.&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;class Queue&amp;lt;T&amp;gt; {
  var _queue = T[]();

  func enqueue(item: T) {
    _queue.append(item);
  }

  func dequeue() -&amp;gt; T {
    return _queue.removeAtIndex(0);
  }
}

var intQueue    = Queue&amp;lt;Int&amp;gt;();
var stringQueue = Queue&amp;lt;String&amp;gt;();

intQueue.enqueue(2);
intQueue.enqueue(3);
intQueue.enqueue(4);

stringQueue.enqueue(&amp;quot;2&amp;quot;);
stringQueue.enqueue(&amp;quot;3&amp;quot;);
stringQueue.enqueue(&amp;quot;4&amp;quot;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now you can create &lt;code&gt;Queue&lt;/code&gt; of the different types with just one &lt;code&gt;Queue&lt;/code&gt; implementation.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Swift is a step in the right direction in my opinion. They lowered the &amp;quot;language ramp up&amp;quot; time by simplifying Objective-C syntax
quite a bit without damaging the power of the language. I feel like it looks really compelling to JavaScript developers.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Process Paradox</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/06/06/process-paradox.html"/>
    <id>http://reefpoints.dockyard.com/2014/06/06/process-paradox.html</id>
    <published>2014-06-06T00:00:00Z</published>
    <updated>2014-06-06T14:49:14-04:00</updated>
    <author>
      <name>Jon Lacks</name>
    </author>
    <summary/>
    <content type="html">&lt;p&gt;If it feels like process, it is not working… It should feel like a logical means to achieve an end.&lt;/p&gt;

&lt;p&gt;For much of my career as a Project Manager I have been inundated with software development process, theories, techniques, methodologies and related tools - which by association has trickled into the teams I have worked with.  Over time I have observed team members feeling the frustration that “Process” can bring to a project when it is applied in a theoretical way vs. a practical way.  Have you ever facilitated a planning meeting while team members glaze over and bury their heads into their laptops? To all my Project Management brethren - if this is something you are observing in your teams, don’t accept this reality; realize that your process &amp;quot;is not working&amp;quot;.&lt;/p&gt;

&lt;p&gt;The art of project management is not dictating process but finding practices that align with the team’s needs and context.   For purposes of this blog post these are the “logical means” I refer to in my opening statement above.  A little Scrum here, a little Waterfall there, and a sprinkle of Kanban might be the right recipe for a particular project - whereas it could be totally wrong for another.   &lt;/p&gt;

&lt;p&gt;In many ways this context is driven by the pyramid of constraints - cost/scope/time, which is project management 101.  However, other contexts might be size of team, remote/co-located, green-field development, team member experience, criticality of deliverables to human life, number of stakeholders, thick/thin management hierarchy, complexity of business rules/logic, and many others which are industry specific.  &lt;/p&gt;

&lt;p&gt;One of my biggest gripes with the “Agile” movement is that companies/teams are adopting variations of the methodology as a prescription to execute projects. I am pretty damn sure the pioneering thinkers who wrote the Agile Manifesto wanted teams to become more principled in thinking about the practices they chose to use vs. following the playbook blindly and not making sure it aligns with the project context.&lt;/p&gt;

&lt;p&gt;It has been very affirming to know that engineers and designers in large and small companies loath process – I’d say this is pretty universal. However, I have found that these same people are incredibly logical people who are willing to do something non-engineering/design related if  they feel deep down it is a “logical means to achieve an end.” I believe it is the project manager’s responsibility as a servant leader to make sure teams don’t feel like process is holding them back but that it is helping them move forward.&lt;/p&gt;

&lt;p&gt;What I love about being a Project Manager at DockYard is the diversity of the project contexts that come through our door. For me it is and has been a great way to experiment, mix, and match processes to find the right practices for a team/project context.  I believe that DockYard’s acknowledgment of this reality allows us to better serve our clients’ unique contexts.  Not by accident - it is a very deliberate way to approach projects and one size never fits all.   &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building an Ember App with Rails Part 4</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/05/31/building-an-ember-app-with-rails-part-4.html"/>
    <id>http://reefpoints.dockyard.com/2014/05/31/building-an-ember-app-with-rails-part-4.html</id>
    <published>2014-05-31T00:00:00Z</published>
    <updated>2014-06-20T21:51:48-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary/>
    <content type="html">&lt;p&gt;Before we get underway we need to update ember-data in our project to at
least &lt;code&gt;beta.8&lt;/code&gt;. Open &lt;code&gt;ember/bower.json&lt;/code&gt; and if you have any version
less than 8 you&amp;#39;ll need to update to at least 8. If you are already on 8
or higher you won&amp;#39;t need to do anything.&lt;/p&gt;

&lt;p&gt;Once you&amp;#39;ve made the change save the file and run &lt;code&gt;bower install&lt;/code&gt; from
the &lt;code&gt;ember/&lt;/code&gt; directory. If you are asked to choose between different
versions of ember-data make sure you choose the correct one.&lt;/p&gt;

&lt;p&gt;In this part we&amp;#39;ll add Presentations to each of the Speaker pages. This
means we&amp;#39;ll have to add a relationship between two models.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ember/tests/integration/speakers-page-test.js&lt;/code&gt; modify the test
&amp;quot;Should list all speakers and number of presentations&amp;quot;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/tests/integration/speaker-page-test.js&lt;/span&gt;

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Should list all speakers and number of presentations&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  visit(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/speakers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a:contains(&amp;quot;Bugs Bunny (2)&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).length, &lt;span class="integer"&gt;1&lt;/span&gt;);
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a:contains(&amp;quot;Wile E. Coyote (1)&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).length, &lt;span class="integer"&gt;1&lt;/span&gt;);
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a:contains(&amp;quot;Yosemite Sam (3)&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).length, &lt;span class="integer"&gt;1&lt;/span&gt;);
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The number in the parentheses will represent the number of presentations that this speaker 
has given.&lt;/p&gt;

&lt;p&gt;Next we need to modify our &lt;code&gt;setup&lt;/code&gt; function&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/tests/integration/speaker-page-test.js&lt;/span&gt;

&lt;span class="keyword"&gt;var&lt;/span&gt; speakers = [
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Bugs Bunny&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;presentation_ids&lt;/span&gt;: [&lt;span class="integer"&gt;1&lt;/span&gt;,&lt;span class="integer"&gt;2&lt;/span&gt;] },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Wile E. Coyote&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;presentation_ids&lt;/span&gt;: [&lt;span class="integer"&gt;3&lt;/span&gt;] },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Yosemite Sam&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;presentation_ids&lt;/span&gt;: [&lt;span class="integer"&gt;4&lt;/span&gt;,&lt;span class="integer"&gt;5&lt;/span&gt;,&lt;span class="integer"&gt;6&lt;/span&gt;] }
];

&lt;span class="keyword"&gt;var&lt;/span&gt; presentations = [
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;What's up with Docs?&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;speaker_id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt; },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Of course, you know, this means war.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;speaker_id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt; },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt;, &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Getting the most from the Acme categlog.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;speaker_id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt; },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;4&lt;/span&gt;, &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Shaaaad up!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;speaker_id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt; },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt;, &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Ah hates rabbits.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;speaker_id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt; },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;6&lt;/span&gt;, &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;The Great horni-todes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;speaker_id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt; }
];

server = &lt;span class="keyword"&gt;new&lt;/span&gt; Pretender(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/api/speakers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(request) {
    &lt;span class="keyword"&gt;return&lt;/span&gt; [&lt;span class="integer"&gt;200&lt;/span&gt;, {&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Content-Type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;application/json&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}, JSON.stringify({&lt;span class="key"&gt;speakers&lt;/span&gt;: speakers, &lt;span class="key"&gt;presentations&lt;/span&gt;: presentations})];
  });

  &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/api/speakers/:id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(request) {
    &lt;span class="keyword"&gt;var&lt;/span&gt; speaker = speakers.find(&lt;span class="keyword"&gt;function&lt;/span&gt;(speaker) {
      &lt;span class="keyword"&gt;if&lt;/span&gt; (speaker.id === parseInt(request.params.id, &lt;span class="integer"&gt;10&lt;/span&gt;)) {
        &lt;span class="keyword"&gt;return&lt;/span&gt; speaker;
      }
    });

    &lt;span class="keyword"&gt;return&lt;/span&gt; [&lt;span class="integer"&gt;200&lt;/span&gt;, {&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Content-Type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;application/json&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}, JSON.stringify({&lt;span class="key"&gt;speaker&lt;/span&gt;: speaker, &lt;span class="key"&gt;presentations&lt;/span&gt;: presentations})];
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Completely replace the &lt;code&gt;speakers&lt;/code&gt; variable that was previously there. The only change to the API stub is that
&lt;code&gt;presentations&lt;/code&gt; is being added to the payload. The JSON here is the
style of JSON that ember-data expects to be emitted. We are returning a
payload that includes all speakers and presentations. The speaker
records include ids referencing the presentations associated.&lt;/p&gt;

&lt;p&gt;We can now add the Presentation model to our Ember app:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/app/models/presentation.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;title&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;speaker&lt;/span&gt;: DS.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;speaker&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
}); 
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We&amp;#39;ve told ember-data to expect the Presentation model to belong to the
Speaker model. Let&amp;#39;s set the inverse relationship&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/app/models/speaker.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;name&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;presentations&lt;/span&gt;: DS.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;presentation&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Modifying our existing Speaker model to add to relationship to its many
Presentation models.&lt;/p&gt;

&lt;p&gt;Finally to make this tests green we need to change our template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;// ember/app/templates/speakers/index.hbs

&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
 &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="error"&gt;~&lt;/span&gt;&lt;span class="error"&gt;#&lt;/span&gt;&lt;span class="attribute-name"&gt;link-to&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;speakers.show&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="attribute-name"&gt;this&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
   &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; (&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;presentations.length&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;)
 &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="error"&gt;~&lt;/span&gt;&lt;span class="error"&gt;/&lt;/span&gt;&lt;span class="attribute-name"&gt;link-to&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice that we we can call regular JavaScript properties like &lt;code&gt;length&lt;/code&gt; on the association.
There is also a slight change that I&amp;#39;ve made to the &lt;code&gt;link-to&lt;/code&gt;. Adding
&lt;code&gt;~&lt;/code&gt; will &lt;a href="http://handlebarsjs.com/block_helpers.html#whitespace-control"&gt;tell Handlebars how to control
whitespace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point our new test should be green. Lets add another.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/tests/integration/speaker-page-test.js&lt;/span&gt;

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Should list all presentations for a speaker&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  visit(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/speakers/1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;li:contains(&amp;quot;What&lt;/span&gt;&lt;span class="char"&gt;\'&lt;/span&gt;&lt;span class="content"&gt;s up with Docs?&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).length, &lt;span class="integer"&gt;1&lt;/span&gt;);
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;li:contains(&amp;quot;Of course, you know, this means war.&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).length, &lt;span class="integer"&gt;1&lt;/span&gt;);
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This new test is asserting that when we visit a given speaker&amp;#39;s page all
of those speaker&amp;#39;s presentations will be listed. We first need to add
presentation data to the API stub for visiting a speaker page.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/api/speakers/:id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(request) {
  &lt;span class="keyword"&gt;var&lt;/span&gt; speaker = speakers.find(&lt;span class="keyword"&gt;function&lt;/span&gt;(speaker) {
    &lt;span class="keyword"&gt;if&lt;/span&gt; (speaker.id === parseInt(request.params.id, &lt;span class="integer"&gt;10&lt;/span&gt;)) {
      &lt;span class="keyword"&gt;return&lt;/span&gt; speaker;
    }
  });

  &lt;span class="keyword"&gt;var&lt;/span&gt; speakerPresentations = presentations.filter(&lt;span class="keyword"&gt;function&lt;/span&gt;(presentation) {
    &lt;span class="keyword"&gt;if&lt;/span&gt; (presentation.speaker_id === speaker.id) {
      &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;;
    }
  });

  &lt;span class="keyword"&gt;return&lt;/span&gt; [&lt;span class="integer"&gt;200&lt;/span&gt;, {&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Content-Type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;application/json&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}, JSON.stringify({&lt;span class="key"&gt;speaker&lt;/span&gt;: speaker, &lt;span class="key"&gt;presentations&lt;/span&gt;: speakerPresentations})];
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This modification of the previously existing stub will build a new payload object that
includes the speaker matching the id requested and all of the
presentations specific to that speaker.&lt;/p&gt;

&lt;p&gt;Tying up this test is easy now, we just modify the Speaker&amp;#39;s &lt;code&gt;show&lt;/code&gt;
template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;

&lt;span class="tag"&gt;&amp;lt;h5&amp;gt;&lt;/span&gt;Presentations&lt;span class="tag"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;presentations&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;title&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now that we have a green test suite with our mocked out API let&amp;#39;s the
real Rails endpoint. We&amp;#39;ll start by generating a new Presentation model.
Change to the &lt;code&gt;rails/&lt;/code&gt; directory in your project and run &lt;code&gt;rails generate
model presentation title:string speaker_id:integer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next we&amp;#39;ll generate the serializer: &lt;code&gt;rails generate serializer
presentation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s expand upon the &lt;code&gt;rails/db/seeds.rb&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# rails/db/seeds.rb&lt;/span&gt;

bugs = &lt;span class="constant"&gt;Speaker&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Bug Bunny&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
wile = &lt;span class="constant"&gt;Speaker&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Wile E. Coyote&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
sam  = &lt;span class="constant"&gt;Speaker&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Yosemite Sam&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)

bugs.presentations.create(&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;What's up with Docs?&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
bugs.presentations.create(&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Of course, you know, this means war.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

wile.presentations.create(&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Getting the most from the Acme categlog.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

sam.presentations.create(&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Shaaaad up!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
sam.presentations.create(&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Ah hates rabbits.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
sam.presentations.create(&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;The Great horni-todes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Tell our &lt;code&gt;Speaker&lt;/code&gt; model that there is a relationship to &lt;code&gt;Presentation&lt;/code&gt;
models:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# rails/app/models/speaker.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Speaker&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  has_many &lt;span class="symbol"&gt;:presentations&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally we need to modify the serializers.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# rails/app/serializers/presentation.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;PresentationSerializer&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveModel&lt;/span&gt;::&lt;span class="constant"&gt;Serializer&lt;/span&gt;
  attributes &lt;span class="symbol"&gt;:id&lt;/span&gt;, &lt;span class="symbol"&gt;:title&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# rails/app/serializers/speaker.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;SpeakerSerializer&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveModel&lt;/span&gt;::&lt;span class="constant"&gt;Serializer&lt;/span&gt;
  embed &lt;span class="symbol"&gt;:ids&lt;/span&gt;, &lt;span class="key"&gt;include&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;

  attributes &lt;span class="symbol"&gt;:id&lt;/span&gt;, &lt;span class="symbol"&gt;:name&lt;/span&gt;
  has_many &lt;span class="symbol"&gt;:presentations&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the &lt;code&gt;SpeakerSerializer&lt;/code&gt; we have instructed the serializer to include
the associated &lt;code&gt;Presentation&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s reset the database and re-seed &lt;code&gt;rake db:drop db:create db:migrate db:seed&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure you are running your Ember server with the proxy enabled:
&lt;code&gt;ember server --proxy http://localhost:3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you can hit your application and you should have a all of the
necessary data. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/jmHGxgS.png" alt="image1"&gt;
&lt;img src="http://i.imgur.com/plrKLvg.png" alt="image2"&gt;&lt;/p&gt;

&lt;p&gt;Next time we&amp;#39;ll deploy our small app to Heroku.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bostonember/website/commit/10f838ff1bfb0aa1307d4de6587889489697c8da"&gt;Check out the actual code for this
part&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Avoid Rails When Generating JSON responses with PostgreSQL</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/05/27/avoid-rails-when-generating-json-responses-with-postgresql.html"/>
    <id>http://reefpoints.dockyard.com/2014/05/27/avoid-rails-when-generating-json-responses-with-postgresql.html</id>
    <published>2014-05-27T00:00:00Z</published>
    <updated>2014-05-31T11:43:00-04:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>Let's use PostgreSQL instead of Ruby to generate JSON responses</summary>
    <content type="html">&lt;p&gt;What if I told you that you could generate the following JSON response
in PostgreSQL?&lt;/p&gt;
&lt;div class="highlight json "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:[
    {&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="integer"&gt;1&lt;/span&gt;,&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Tag #0&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="integer"&gt;1&lt;/span&gt;},
    {&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="integer"&gt;1001&lt;/span&gt;,&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Tag #1000&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="integer"&gt;1&lt;/span&gt;},
    {&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="integer"&gt;2001&lt;/span&gt;,&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Tag #2000&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="integer"&gt;1&lt;/span&gt;},
    &lt;span class="error"&gt;.&lt;/span&gt;&lt;span class="error"&gt;.&lt;/span&gt;&lt;span class="error"&gt;.&lt;/span&gt;
  ],
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:[
    {
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="integer"&gt;1&lt;/span&gt;,
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Note #0&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;content&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Lorem ipsum...&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tag_ids&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:[&lt;span class="integer"&gt;9001&lt;/span&gt;,&lt;span class="integer"&gt;8001&lt;/span&gt;,&lt;span class="integer"&gt;7001&lt;/span&gt;,&lt;span class="integer"&gt;6001&lt;/span&gt;,&lt;span class="integer"&gt;5001&lt;/span&gt;,&lt;span class="integer"&gt;4001&lt;/span&gt;,&lt;span class="integer"&gt;3001&lt;/span&gt;,&lt;span class="integer"&gt;2001&lt;/span&gt;,&lt;span class="integer"&gt;1001&lt;/span&gt;,&lt;span class="integer"&gt;1&lt;/span&gt;]
    },
    {
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="integer"&gt;2&lt;/span&gt;,
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Note #1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;content&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Lorem ipsum...&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tag_ids&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:[&lt;span class="integer"&gt;9002&lt;/span&gt;,&lt;span class="integer"&gt;8002&lt;/span&gt;,&lt;span class="integer"&gt;7002&lt;/span&gt;,&lt;span class="integer"&gt;6002&lt;/span&gt;,&lt;span class="integer"&gt;5002&lt;/span&gt;,&lt;span class="integer"&gt;4002&lt;/span&gt;,&lt;span class="integer"&gt;3002&lt;/span&gt;,&lt;span class="integer"&gt;2002&lt;/span&gt;,&lt;span class="integer"&gt;1002&lt;/span&gt;,&lt;span class="integer"&gt;2&lt;/span&gt;]
    }
  ]
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What if I told you that it is over 10X faster than plain &lt;a href="https://github.com/rails-api/active_model_serializers/"&gt;ActiveModel::Serializers&lt;/a&gt;
for small data sets, and 160X faster for larger data sets?&lt;/p&gt;

&lt;p&gt;Typically when you have an API serving up JSON responses, your web
framework serializes your data after retrieving it with its ORM. We&amp;#39;ll
talk about Rails specifically in this article, but this will generally
apply to most frameworks. So the typical Rails request will roughly
follow this flow (I am purposely brushing over some parts of the request
response cycle):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Rails receives the JSON request from the browser/client&lt;/li&gt;
&lt;li&gt;Rails will apply some business logic and craft a query via
 ActiveRecord&lt;/li&gt;
&lt;li&gt;ActiveRecord serializes its query and sends the query to PostgreSQL&lt;/li&gt;
&lt;li&gt;PostgreSQL will compile the result set and serializes the records
 in its protocol format&lt;/li&gt;
&lt;li&gt;ActiveRecord deserializes the records into a set of rows object&lt;/li&gt;
&lt;li&gt;ActiveRecord will convert the set of rows into a set of model
 object instances&lt;/li&gt;
&lt;li&gt;Rails will convert the set of models objects into a JSON string&lt;/li&gt;
&lt;li&gt;Rails will send the JSON string down to the browser&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most of the time in this response cycle is spent in steps 6 and 7. Rails
has to deserialize one format, then store that deserialized content in
memory just to serialize it in a different format. Since &lt;a href="http://www.postgresql.org/docs/current/static/datatype-json.html"&gt;PostgreSQL
supports JSON responses&lt;/a&gt;,
we can use its &lt;a href="http://www.postgresql.org/docs/current/static/functions-json.html"&gt;JSON functions&lt;/a&gt; to
serialized our result set. That JSON response will still be serialized
in PostgreSQL&amp;#39;s protocol format, but ActiveRecord can deserialize it as
a single string object, instead of a set of objects which it then
converts and reserializes. We end up having this response cycle instead:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Rails receives the JSON request from the browser/client&lt;/li&gt;
&lt;li&gt;Rails will apply some business logic and craft a query via
 ActiveRecord&lt;/li&gt;
&lt;li&gt;ActiveRecord serializes its query and sends the query to PostgreSQL&lt;/li&gt;
&lt;li&gt;PostgreSQL will compile the result set, serializes it as JSON then 
 serializes the JSON in its protocol format&lt;/li&gt;
&lt;li&gt;ActiveRecord deserializes the protocal format into a single JSON
 string&lt;/li&gt;
&lt;li&gt;Rails will send the JSON string down to the browser&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are only removing 2 steps, but it is the bulk of the time spent
generating the response. We are also limiting the number of ruby objects
created, so this reduces memory usage and time spent garbage collecting
short lived Ruby objects used only for JSONification.&lt;/p&gt;

&lt;h1&gt;What Do We Gain by Generating Massive Queries for PostgreSQL&lt;/h1&gt;

&lt;p&gt;It takes a lot of work to tell PostgreSQL to generate a specific
JSON object; what exactly does that buy us?
By doing all this in PostgreSQL, we avoid using CPU cycles
and memory on our web server. I&amp;#39;ve done some very naive and basic
testing with a new, unoptimized Rails project, and a database of 1000
notes, each have 10 unique tags, totalling 10000 tags. When retrieving
all 11000 records with Rails and &lt;a href="https://github.com/rails-api/active_model_serializers"&gt;ActiveModel::Serializers&lt;/a&gt;, it took
roughly 9 seconds to generate the request. Most of the time was spent
in the View generating the JSON object in memory, with 657 milliseconds
in ActiveRecord, which (I think until someone tells me otherwise)
includes creating all the model instances.&lt;/p&gt;

&lt;p&gt;When we apply the PostgreSQL technique outlined later in this article to the
same result set, the response only takes 72 milliseconds for the first
request. If we rerun this same request, PostgreSQL caching kicks in and
the response time is 54 milliseconds. That is a &lt;strong&gt;~160X&lt;/strong&gt; throughput
increase when we use PostgreSQL to generate JSON payloads.&lt;/p&gt;

&lt;p&gt;The above numbers are a bit skewed by the size of this test payload.
11000 objects would be completely crazy to present to an end user. If we
pare back our result set 10 notes and 100 tags, the first and second
response times for Ruby side JSONification  are 187 and 118 milliseconds.
When using PostgreSQL to generate our JSON payload, the response times
are 92 and 12 milliseconds. That is a &lt;strong&gt;2X/10X&lt;/strong&gt; increase. By utilizing
PostgreSQL, we can increase our applications&amp;#39; response times and
throughput.&lt;/p&gt;

&lt;h1&gt;Announce PostgresExt-Serializers&lt;/h1&gt;

&lt;p&gt;To utilize PostgreSQL, we have to generate a fairly complex query
manually. That is, until you include the &lt;a href="https://github.com/dockyard/postgres_ext-serializers"&gt;PostgresExt-Serializers&lt;/a&gt;
gem into the project. PostgresExt-Serializers (PES) monkey
patches ActiveModel::Serializers (AMS),
and anywhere an ActiveRecord::Relation is serialized by AMS, PES will
take over and push the work to PostgreSQL. I wanted to use the awesome
work of AMS&amp;#39;s DSL for generating JSON schemas without having to duplicate
that work. I am finding some pain points in terms of extracting the
information I need to generate the SQL query from AMS, but right now the
code for PES is very immature, hence the 0.0.1 release.&lt;/p&gt;

&lt;h1&gt;Nitty-Gritty Details About How it All Works: Massive PostgreSQL Queries&lt;/h1&gt;

&lt;p&gt;Let&amp;#39;s say we have an Ember application that we are generating the JSON
request for. The Ember app wants the list of notes, along with the tags
associated with the notes, and we will side load the tags. Side loading
allows you to specify the ids of the tags on the note, and then include
a list of tags, which will be used to instantiate the tags on the note.
The benefit of side loading is that it allows you to save bandwidth by
use tag ids and an array of de-duplicated tags, instead of embedding the
duplicate tags objects under the notes, where you would have to duplicate
the tag objects. We only want notes with &lt;code&gt;id &amp;lt; 40&lt;/code&gt;, which is arbitrary
in this example, but, as we will see, has implications on the query we
need to execute.&lt;/p&gt;

&lt;p&gt;Here is the whole query we need to generate the JSON required, which is
also the example JSON at the beginning of this article:&lt;/p&gt;
&lt;div class="highlight sql "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;-- Note Ids&lt;/span&gt;
WITH notes_ids &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; id
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;WHERE&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &amp;lt; &lt;span class="integer"&gt;40&lt;/span&gt;
),
&lt;span class="comment"&gt;-- Tag Ids grouped by note id&lt;/span&gt;
tag_ids_by_notes &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, array_agg(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;AS&lt;/span&gt; tag_ids
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;GROUP&lt;/span&gt; &lt;span class="keyword"&gt;BY&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;HAVING&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;IN&lt;/span&gt; (
    &lt;span class="class"&gt;SELECT&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_ids&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_ids&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  )
),
&lt;span class="comment"&gt;-- Tag records&lt;/span&gt;
tags_attributes_filter &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;WHERE&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;IN&lt;/span&gt; (
    &lt;span class="class"&gt;SELECT&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_ids&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_ids&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  )
),
&lt;span class="comment"&gt;-- Tag records as a JSON array&lt;/span&gt;
tags_as_json_array &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; array_to_json(array_agg(row_to_json(tags_attributes_filter)))
&lt;span class="keyword"&gt;AS&lt;/span&gt; tags, &lt;span class="integer"&gt;1&lt;/span&gt; &lt;span class="keyword"&gt;AS&lt;/span&gt; match
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags_attributes_filter&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
),
&lt;span class="comment"&gt;-- Note records&lt;/span&gt;
notes_attributes_filter &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;content&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
coalesce(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tag_ids_by_notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tag_ids&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;{}&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;::&lt;span class="predefined-type"&gt;int&lt;/span&gt;[]) &lt;span class="keyword"&gt;AS&lt;/span&gt; tag_ids
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;LEFT&lt;/span&gt; &lt;span class="keyword"&gt;OUTER&lt;/span&gt; &lt;span class="keyword"&gt;JOIN&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tag_ids_by_notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;ON&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tag_ids_by_notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;WHERE&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &amp;lt; &lt;span class="integer"&gt;40&lt;/span&gt;
),
&lt;span class="comment"&gt;-- Note records as a JSON array&lt;/span&gt;
notes_as_json_array &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; array_to_json(array_agg(row_to_json(notes_attributes_filter)))
&lt;span class="keyword"&gt;AS&lt;/span&gt; notes, &lt;span class="integer"&gt;1&lt;/span&gt; &lt;span class="keyword"&gt;AS&lt;/span&gt; match
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_attributes_filter&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
),
&lt;span class="comment"&gt;-- Notes and tags together as one JSON object&lt;/span&gt;
jsons &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags_as_json_array&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_as_json_array&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags_as_json_array&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;INNER&lt;/span&gt; &lt;span class="keyword"&gt;JOIN&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_as_json_array&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;ON&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags_as_json_array&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;match&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_as_json_array&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;match&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
)
&lt;span class="class"&gt;SELECT&lt;/span&gt; row_to_json(jsons) &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;jsons&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s break it down. You&amp;#39;ll notice that I am making use of &lt;a href="http://www.postgresql.org/docs/9.3/static/queries-with.html"&gt;Common Table
Expressions (CTEs)&lt;/a&gt;. CTEs allow you to use temporary table definitions
in queries instead of embedding the subqueries directly in your query.&lt;/p&gt;

&lt;h2&gt;Gathering our Note Ids&lt;/h2&gt;

&lt;p&gt;The first important step is getting the note ids of our final result
set, which we do with:&lt;/p&gt;
&lt;div class="highlight sql "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;WITH notes_ids &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; id
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;WHERE&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &amp;lt; &lt;span class="integer"&gt;40&lt;/span&gt;
),
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We are creating a CTE that represents the ids for our notes, we&amp;#39;ll be
using this extensively to generate our tag related records.&lt;/p&gt;

&lt;h2&gt;Getting Tag Ids Grouped by Note Ids&lt;/h2&gt;

&lt;p&gt;From our &lt;code&gt;note_ids&lt;/code&gt;, we can assemble a list of tag ids grouped by notes.
This will be used to create the &lt;code&gt;tag_ids&lt;/code&gt; attribute on the notes later
on.&lt;/p&gt;
&lt;div class="highlight sql "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;tag_ids_by_notes &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, array_agg(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;AS&lt;/span&gt; tag_ids
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;GROUP&lt;/span&gt; &lt;span class="keyword"&gt;BY&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;HAVING&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;IN&lt;/span&gt; (
    &lt;span class="class"&gt;SELECT&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_ids&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_ids&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  )
),
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Our projection is the &lt;code&gt;note_id&lt;/code&gt;, plus an &lt;a href="http://www.postgresql.org/docs/9.3/static/functions-aggregate.html"&gt;&lt;code&gt;array_agg&lt;/code&gt;&lt;/a&gt; of the id of the
tags in our grouping. &lt;code&gt;array_agg&lt;/code&gt; aggregates the group into an array.
This projection will return the following:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;note_id | tag_ids
=================
      1 | [1,2]
      2 | [1,3]
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, the tags &lt;code&gt;belong_to&lt;/code&gt; a note, so we are retrieving this
data from the &lt;code&gt;tags&lt;/code&gt; table. If this was a many-to-many relation, this
query would execute against the join table (i.e. &lt;code&gt;notes_tags&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We group our tags by the &lt;code&gt;note_id&lt;/code&gt;, and we use the &lt;code&gt;HAVING&lt;/code&gt; clause to
only group tags which have a &lt;code&gt;note_id&lt;/code&gt; contained in the &lt;code&gt;note_ids&lt;/code&gt; CTE
that we created at the beginning.&lt;/p&gt;

&lt;h2&gt;Generating Our Note Records&lt;/h2&gt;

&lt;p&gt;Most of the time, we don&amp;#39;t want to expose all of our record data to
Ember, since whatever we send to the client will be accessible by the
user, whether we intend it to be or not. We filter down the attributes
sent to Ember by limiting the columns in our projection.&lt;/p&gt;
&lt;div class="highlight sql "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;notes_attributes_filter &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;content&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
coalesce(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tag_ids_by_notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tag_ids&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;{}&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;::&lt;span class="predefined-type"&gt;int&lt;/span&gt;[]) &lt;span class="keyword"&gt;AS&lt;/span&gt; tag_ids
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;LEFT&lt;/span&gt; &lt;span class="keyword"&gt;OUTER&lt;/span&gt; &lt;span class="keyword"&gt;JOIN&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tag_ids_by_notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;ON&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tag_ids_by_notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;WHERE&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &amp;lt; &lt;span class="integer"&gt;40&lt;/span&gt;
),
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Also note that in the projection, we are using &lt;a href="http://www.postgresql.org/docs/9.3/static/functions-conditional.html#FUNCTIONS-COALESCE-NVL-IFNULL"&gt;&lt;code&gt;coalesce&lt;/code&gt;&lt;/a&gt;
to ensure that we return an empty array if a specific note has no &lt;code&gt;tag_ids&lt;/code&gt;.
We are using a &lt;a href="http://www.postgresql.org/docs/9.3/static/queries-table-expressions.html#QUERIES-JOIN"&gt;&lt;code&gt;LEFT OUTER JOIN&lt;/code&gt;&lt;/a&gt; to combine our previously generated
tag id groupings with our notes. We use an &lt;code&gt;OUTER JOIN&lt;/code&gt; instead of an
&lt;a href="http://www.postgresql.org/docs/9.3/static/queries-table-expressions.html#QUERIES-JOIN"&gt;&lt;code&gt;INNER JOIN&lt;/code&gt;&lt;/a&gt; so that all our notes are returned, even if no tags are
associated with it. An &lt;code&gt;INNER JOIN&lt;/code&gt; would only return notes that have
tags associated with it. We also use the same &lt;code&gt;WHERE&lt;/code&gt; predicate in this
query as we did in the &lt;code&gt;note_ids&lt;/code&gt; CTE, to ensure our query only returns
the desired records.&lt;/p&gt;

&lt;h2&gt;Turning Our Note Records into a Single JSON Array&lt;/h2&gt;

&lt;p&gt;So now that we have our notes records filtered down, we need to create a
JSON array of these records to use in our final query. At this point, we
will use two of PostgreSQL&amp;#39;s &lt;a href="http://www.postgresql.org/docs/current/static/functions-json.html"&gt;JSON functions&lt;/a&gt; and the &lt;code&gt;array_agg&lt;/code&gt;
function that we used earlier. &lt;code&gt;row_to_json&lt;/code&gt; takes a PostgreSQL row and
converts it to a JSON object, where the columns of the row converted
into JSON properties.&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;foo | bar
=========
  1 |   2
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Will be converted to&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;     json
================
{ foo: 1, bar: 2 }
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So at this point, our result set is a series of rows with a single
column of JSON representing the original PostgreSQL row from our
&lt;code&gt;notes_attribute_filter&lt;/code&gt; CTE. We then use &lt;code&gt;array_agg&lt;/code&gt; to turn the
rows of JSON objects into a single row with a single PostgreSQL
Array of JSON objects.&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;     json
================
{ foo: 1, bar: 2 }
{ foo: 1, bar: 2 }
{ foo: 1, bar: 2 }
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;will be converted to&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;                    Array
=======================================================
{{ foo: 1, bar: 2 },{ foo: 1, bar: 2 },{ foo: 1, bar: 2 }}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Lastly, we use &lt;code&gt;array_to_json&lt;/code&gt; to convert the PostgreSQL array of JSON to a JSON array.&lt;/p&gt;

&lt;p&gt;After  combining these pieces, we get the following query:&lt;/p&gt;
&lt;div class="highlight sql "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;notes_as_json_array &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; array_to_json(array_agg(row_to_json(notes_attributes_filter)))
&lt;span class="keyword"&gt;AS&lt;/span&gt; notes, &lt;span class="integer"&gt;1&lt;/span&gt; &lt;span class="keyword"&gt;AS&lt;/span&gt; match
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_attributes_filter&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
),
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which yields&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;    notes    | match
====================
[{},{},{},{}]|     1
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We are using the &lt;code&gt;notes_attributes_filter&lt;/code&gt; as our source for all the
JSON functions, and adding a column &lt;code&gt;match&lt;/code&gt; with a value of &lt;code&gt;1&lt;/code&gt;, which
we will need later.&lt;/p&gt;

&lt;h2&gt;Aggregating Our Tag Records&lt;/h2&gt;

&lt;p&gt;We apply the attribute filtering and the aggregation techniques to our
&lt;code&gt;tags&lt;/code&gt; table to generate our JSON array of tags. Note that when we
filter the tags attributes, we only include tags that have a &lt;code&gt;note_id&lt;/code&gt;
of a note we are returning.&lt;/p&gt;
&lt;div class="highlight sql "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;tags_attributes_filter &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;WHERE&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;note_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;IN&lt;/span&gt; (
    &lt;span class="class"&gt;SELECT&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_ids&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_ids&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  )
),

tags_as_json_array &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; array_to_json(array_agg(row_to_json(tags_attributes_filter)))
&lt;span class="keyword"&gt;AS&lt;/span&gt; tags, &lt;span class="integer"&gt;1&lt;/span&gt; &lt;span class="keyword"&gt;AS&lt;/span&gt; match
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags_attributes_filter&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
),
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which yields&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;    tags     | match
====================
[{},{},{},{}]|     1
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Combining Our Notes and Tags&lt;/h2&gt;

&lt;p&gt;So at this point, we have 2 CTEs that represent our notes and tags. We
need to combine these two tables into a single row, so that we can convert
that row to a JSON object with a &lt;code&gt;notes&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt; property. This is
the reason we added a &lt;code&gt;match&lt;/code&gt; column onto both CTEs; we join those two
table into our final table, which we then call &lt;code&gt;row_to_json&lt;/code&gt; on to get
our final JSON object, which mirrors the example at the beginning of
this article.&lt;/p&gt;
&lt;div class="highlight sql "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;jsons &lt;span class="keyword"&gt;AS&lt;/span&gt; (
  &lt;span class="class"&gt;SELECT&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags_as_json_array&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_as_json_array&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags_as_json_array&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;INNER&lt;/span&gt; &lt;span class="keyword"&gt;JOIN&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_as_json_array&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;ON&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;tags_as_json_array&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;match&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;notes_as_json_array&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;.&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;match&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
)
&lt;span class="class"&gt;SELECT&lt;/span&gt; row_to_json(jsons) &lt;span class="keyword"&gt;FROM&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;jsons&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So there you have it, you could generate this giant query by hand every
time you need to create an API endpoint, or you could use ActiveModel::Serializers
and utilize the PostgresExt-Seriliazers optimizations to avoid Ruby and
Rails when generating API responses.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building an Ember App with Rails Part 3</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/05/09/building-an-ember-app-with-rails-part-3.html"/>
    <id>http://reefpoints.dockyard.com/2014/05/09/building-an-ember-app-with-rails-part-3.html</id>
    <published>2014-05-09T00:00:00Z</published>
    <updated>2014-06-20T21:51:48-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary/>
    <content type="html">&lt;p&gt;Let&amp;#39;s implement some navigation in the Boston Ember app.&lt;/p&gt;

&lt;p&gt;Here is a list of sections in the Boston Ember website I&amp;#39;d like to add:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;About&lt;/li&gt;
&lt;li&gt;Speakers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this part we will work with faked out data. In a future part we will
provide the Rails backend.&lt;/p&gt;

&lt;p&gt;Our first navigation test will be an easy one, create
&lt;code&gt;ember/tests/integration/about-page-test.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; startApp from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bostonember/tests/helpers/start-app&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; App;

module(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Integration - About Page&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    App = startApp();
  },
  &lt;span class="function"&gt;teardown&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    Ember.run(App, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;destroy&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Should navigate to the About page&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  visit(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    click(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;a:contains('About')&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
      equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;h3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).text(), &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;About&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    });
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After writing this test we can confirm that our test is red in our browser. To make this green we need to add an &lt;code&gt;About&lt;/code&gt; route, 
a link from the landing page to the &lt;code&gt;About&lt;/code&gt; route, and a template for the
&lt;code&gt;About&lt;/code&gt; route.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/app/router.js&lt;/span&gt;
Router.map(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="local-variable"&gt;this&lt;/span&gt;.route(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;about&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/app/templates/application.hbs&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Welcome to Boston Ember&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

{{link-to &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;About&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;about&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;}}

{{outlet}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/app/templates/about.hbs&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;About&lt;span class="tag"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

&lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Boston Ember is the monthly meetup where awesome people get together
to do awesome Ember related things!&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Your test should now be green. If you navigate to the root path in your
browser you should be able to click through the app. What about getting
back to root? We can add a test to for this navigation as well.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/tests/integration/landing-page-test.js&lt;/span&gt;
test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Should allow navigating back to root from another page&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  visit(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/about&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    click(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a:contains(&amp;quot;Home&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
      notEqual(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;h3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).text(), &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;About&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    });
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/templates/application.hbs&lt;/span&gt;
{{link-to &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Home&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;application&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;}}
{{link-to &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;About&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;about&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Great! A very simple navigation is setup and fully tested. How about something more complex. Let&amp;#39;s allow our visitors
to see the people that have spoken at Boston Ember. Before we do that we
need to add new dependencies to our app for mocking out remote
requests.&lt;/p&gt;

&lt;p&gt;We will be using
&lt;a href="https://github.com/trek/pretender/tree/0.0.5"&gt;Pretender&lt;/a&gt; by Ember Core
member Trek Glowacki. Pretender is a nice DSL for faking out remote
responses.&lt;/p&gt;

&lt;p&gt;We first add Pretender to the &lt;code&gt;bower.json&lt;/code&gt; in our project root:&lt;/p&gt;
&lt;div class="highlight json "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;ember-load-initializers&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;stefanpenner/ember-load-initializers#0.0.1&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;pretender&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;trek/pretender#0.0.5&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  }
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;then run &lt;code&gt;bower install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next we will need to tell Broccoli to compile these new dependencies. Add the following lines to &lt;code&gt;Brocfile.js&lt;/code&gt; in our project root:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;app.&lt;span class="reserved"&gt;import&lt;/span&gt;({&lt;span class="key"&gt;development&lt;/span&gt;:&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;vendor/route-recognizer/dist/route-recognizer.js&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;});
app.&lt;span class="reserved"&gt;import&lt;/span&gt;({&lt;span class="key"&gt;development&lt;/span&gt;:&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;vendor/FakeXMLHttpRequest/fake_xml_http_request.js&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;});
app.&lt;span class="reserved"&gt;import&lt;/span&gt;({&lt;span class="key"&gt;development&lt;/span&gt;:&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;vendor/pretender/pretender.js&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We are telling Broccoli to &lt;strong&gt;only&lt;/strong&gt; compile for the &lt;em&gt;development&lt;/em&gt;
environment. This differs from Rails in that there is no specific &lt;em&gt;test&lt;/em&gt;
environment. (at least not yet anyway)&lt;/p&gt;

&lt;p&gt;Tell &lt;code&gt;JSHint&lt;/code&gt; to ignore the &lt;code&gt;Pretender&lt;/code&gt; constant.
Open up &lt;code&gt;ember/tests/.jshintrc&lt;/code&gt; and add &lt;code&gt;&amp;quot;Pretender&amp;quot;&lt;/code&gt; to the end of the
&lt;code&gt;&amp;quot;predef&amp;quot;&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Finally we need ember-data to make requests namespaced under &lt;code&gt;api&lt;/code&gt; to
our server:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/app/adapters/application.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.ActiveModelAdapter.extend({
  &lt;span class="key"&gt;namespace&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;api&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We should be in a good place to write our tests.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
56
57
58
59
&lt;strong&gt;60&lt;/strong&gt;
61
62
63
64
65
66
67
68
69
&lt;strong&gt;70&lt;/strong&gt;
71
72
73
74
75
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/tests/integration/speakers-page-test.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; startApp from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bostonember/tests/helpers/start-app&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; App, server;

module(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Integration - Speaker Page&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    App = startApp();
    &lt;span class="keyword"&gt;var&lt;/span&gt; speakers = [
      {
        &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;,
        &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Bugs Bunny&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
      },
      {
        &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;,
        &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Wile E. Coyote&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
      },
      {
        &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt;,
        &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Yosemite Sam&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
      }
    ];

    server = &lt;span class="keyword"&gt;new&lt;/span&gt; Pretender(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
      &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/api/speakers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(request) {
        &lt;span class="keyword"&gt;return&lt;/span&gt; [&lt;span class="integer"&gt;200&lt;/span&gt;, {&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Content-Type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;application/json&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}, JSON.stringify({&lt;span class="key"&gt;speakers&lt;/span&gt;: speakers})];
      });

      &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/api/speakers/:id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(request) {
        &lt;span class="keyword"&gt;var&lt;/span&gt; speaker = speakers.find(&lt;span class="keyword"&gt;function&lt;/span&gt;(speaker) {
          &lt;span class="keyword"&gt;if&lt;/span&gt; (speaker.id === parseInt(request.params.id, &lt;span class="integer"&gt;10&lt;/span&gt;)) {
            &lt;span class="keyword"&gt;return&lt;/span&gt; speaker;
          }
        });

        &lt;span class="keyword"&gt;return&lt;/span&gt; [&lt;span class="integer"&gt;200&lt;/span&gt;, {&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Content-Type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;application/json&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}, JSON.stringify({&lt;span class="key"&gt;speaker&lt;/span&gt;: speaker})];
      });
    });

  },
  &lt;span class="function"&gt;teardown&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    Ember.run(App, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;destroy&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    server.shutdown();
  }
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Should allow navigation to the speakers page from the landing page&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  visit(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    click(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a:contains(&amp;quot;Speakers&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
      equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;h3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).text(), &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Speakers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    });
  });
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Should list all speakers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  visit(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/speakers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a:contains(&amp;quot;Bugs Bunny&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).length, &lt;span class="integer"&gt;1&lt;/span&gt;);
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a:contains(&amp;quot;Wile E. Coyote&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).length, &lt;span class="integer"&gt;1&lt;/span&gt;);
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a:contains(&amp;quot;Yosemite Sam&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).length, &lt;span class="integer"&gt;1&lt;/span&gt;);
  });
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Should be able to navigate to a speaker page&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  visit(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/speakers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    click(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a:contains(&amp;quot;Bugs Bunny&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
      equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;h4&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).text(), &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Bugs Bunny&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    });
  });
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Should be able visit a speaker page&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  visit(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/speakers/1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;h4&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).text(), &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Bugs Bunny&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Take a look at the &lt;code&gt;setup&lt;/code&gt; function. There is an array of objects that contains the speaker data, currently only &lt;code&gt;id&lt;/code&gt;s and &lt;code&gt;name&lt;/code&gt;s.
Below that we are setting up the request stubs. Currently this feels
like a lot of boilerplate, and that is because it is. I&amp;#39;m sure
eventually someone will write a nice abstraction to clean this up. This
code simply stubs out the expected server-side calls and returns a JSON
string in the format ember-data expects.&lt;/p&gt;

&lt;p&gt;Our four tests are very simple. The first tests the navigation, the 2nd
tests the speakers are in the list, the 3rd tests that we can navigate
to an individual speaker, and the 4th tests that we can visit the speaker page directly.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s make each pass:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/app/router.js&lt;/span&gt;
Router.map(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="local-variable"&gt;this&lt;/span&gt;.route(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;about&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;speakers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;// ember/app/templates/application.hbs
{{link-to 'About' 'about'}}
{{link-to 'Speakers' 'speakers'}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;// ember/app/templates/speakers.hbs
&amp;lt;h3&amp;gt;Speakers&amp;lt;/h3&amp;gt;

{{outlet}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The first test should now be passing.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/app/router.js&lt;/span&gt;
Router.map(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="local-variable"&gt;this&lt;/span&gt;.route(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;about&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;speakers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.route(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;show&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {&lt;span class="key"&gt;path&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;:speaker_id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;});
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/app/models/speaker.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;name&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/app/routes/speakers/index.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Route.extend({
  &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.store.find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;speaker&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;// ember/templates/speakers/index.hbs
{{#each}}
  {{link-to name 'speakers.show' this}}
{{/each}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The 2nd test should now be passing.&lt;/p&gt;
&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;// ember/templates/speakers/show.hbs
&amp;lt;h4&amp;gt;{{name}}&amp;lt;/h4&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The 3rd &amp;amp; 4th tests should now be passing.&lt;/p&gt;

&lt;p&gt;Passing tests are great and all, but let&amp;#39;s actually make the app useable by getting our Rails backend
in the game. &lt;/p&gt;

&lt;p&gt;Let&amp;#39;s generate a model from our Rails app &lt;code&gt;rails g model speaker name:string&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add some seed data&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# rails/db/seeds.rb&lt;/span&gt;
&lt;span class="constant"&gt;Speaker&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Bugs Bunny&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="constant"&gt;Speaker&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Wile E. Coyote&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="constant"&gt;Speaker&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Yosemite Sam&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Create, migrate and seed &lt;code&gt;rake db:create db:migrate db:seed&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add a &lt;code&gt;speakers&lt;/code&gt; resource under an &lt;code&gt;api&lt;/code&gt; namespace`&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# rails/config/routes.rb&lt;/span&gt;
namespace &lt;span class="symbol"&gt;:api&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  resources &lt;span class="symbol"&gt;:speakers&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now add the controller&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# rails/app/controllers/api/speakers_controller.rb&lt;/span&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Api::SpeakersController&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;index&lt;/span&gt;
    render &lt;span class="key"&gt;json&lt;/span&gt;: &lt;span class="constant"&gt;Speaker&lt;/span&gt;.all
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;show&lt;/span&gt;
    render &lt;span class="key"&gt;json&lt;/span&gt;: &lt;span class="constant"&gt;Speaker&lt;/span&gt;.find(params[&lt;span class="symbol"&gt;:id&lt;/span&gt;])
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally we need to generate a serializer &lt;code&gt;rails g serializer speaker&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;name&lt;/code&gt; to the list of attributes to serialize&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;SpeakerSerializer&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveModel&lt;/span&gt;::&lt;span class="constant"&gt;Serializer&lt;/span&gt;
  attributes &lt;span class="symbol"&gt;:id&lt;/span&gt;, &lt;span class="symbol"&gt;:name&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Start your Rails server with port &lt;code&gt;3000&lt;/code&gt; and restart your ember server with the command 
&lt;code&gt;ember server --proxy http://localhost:3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Any remote requests will be proxied to this location. Now you can point
your browser to &lt;code&gt;http://localhost:4200&lt;/code&gt;, click on &lt;code&gt;Speakers&lt;/code&gt; and you
should see:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/dcdkJDo.png" alt="Screen1"&gt;&lt;/p&gt;

&lt;p&gt;We did a lot today, next we&amp;#39;ll get into relationships.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bostonember/website/commit/a21e06a9a29b19d405e50268a6d276b8db758261"&gt;Check out the actual code for this
part&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building an Ember App with Rails Part 2</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/05/08/building-an-ember-app-with-rails-part-2.html"/>
    <id>http://reefpoints.dockyard.com/2014/05/08/building-an-ember-app-with-rails-part-2.html</id>
    <published>2014-05-08T00:00:00Z</published>
    <updated>2014-05-31T11:42:58-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Writing our first ember test</summary>
    <content type="html">&lt;p&gt;We need to start this part with a bug fix. There is a bug for the live reload. In &lt;code&gt;ember/tests/helpers/start-app.js&lt;/code&gt; 
insert the 2nd line:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Router = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bostonember/router&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)[&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;];
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now on line 16 add:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Router.reopen({
  &lt;span class="key"&gt;location&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;none&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This bug exists in &lt;code&gt;0.0.27&lt;/code&gt; of ember-cli and will hopefully be fixed in a future verision.&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://github.com/stefanpenner/ember-cli/issues/667"&gt;there is a pending PR to fix this&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Now start your server:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;cd ember
ember server
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Open your browser and go to: &lt;code&gt;http://localhost:4200/tests&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see something like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/bufKV2c.png" alt="Screen 1"&gt;&lt;/p&gt;

&lt;p&gt;This is a typical &lt;a href="http://qunitjs.com/"&gt;Qunit&lt;/a&gt; test suite with some
&lt;a href="http://www.jshint.com/"&gt;JSHint&lt;/a&gt; tests already in our app. What you&amp;#39;ll notice in the lower
right-hand corner is a blank white box. This box is where our
integration tests will execute. This is an IFRAME so we can see our
applications interacted with in real-time (albeit very fast real-time).&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s build out a landing page for our app. We will TDD this entire
application over this multi-part series. Create a new directory and file
&lt;code&gt;ember/tests/integration/landing-page-test.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All of our files will be in
&lt;a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules"&gt;ES6 module&lt;/a&gt;
format. If you are unfamiliar with ES6 modules I suggest you go and read
up.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; startApp from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bostonember/tests/helpers/start-app&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; App;

module(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Integration - Landing Page&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    App = startApp();
  },
  &lt;span class="function"&gt;teardown&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    Ember.run(App, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;destroy&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Should welcome me to Boston Ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  visit(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;h2#title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).text(), &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Welcome to Boston Ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once you save this file go back to your browser. You should not need to reload anything, ember-cli has a live reload feature on file
change. Now you should see your failing test:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/l7y146I.png" alt="Screen2"&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s make the test pass:&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ember/app/templates/application.hbs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;lt;h2 id=&amp;quot;title&amp;quot;&amp;gt;Welcome to Boston Ember&amp;lt;/h2&amp;gt;
{{outlet}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Check your test suite and it should be all green.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/242RLGf.png" alt="Screen3"&gt;&lt;/p&gt;

&lt;p&gt;Congratulations on your first ember test!&lt;/p&gt;

&lt;p&gt;Next time we&amp;#39;ll build out some pages and write tests to interact with
these pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bostonember/website/commit/b17a67b9368acec29c88f4aaa83eceb82a9f143d"&gt;Check out the actual code for this
part&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building an Ember App with Rails Part 1</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/05/07/building-an-ember-app-with-rails-part-1.html"/>
    <id>http://reefpoints.dockyard.com/2014/05/07/building-an-ember-app-with-rails-part-1.html</id>
    <published>2014-05-07T00:00:00Z</published>
    <updated>2014-05-31T11:42:58-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>ember-cli &amp; Rails</summary>
    <content type="html">&lt;p&gt;This series will take us through building and structuring an application
with an Ember front-end built with
&lt;a href="https://github.com/stefanpenner/ember-cli"&gt;ember-cli&lt;/a&gt; and a Ruby on
Rails backend. We&amp;#39;ll discuss project structure, testing, and deployment
to Heroku.&lt;/p&gt;

&lt;p&gt;During the course of this series I am going to re-build the
&lt;a href="http://bostonember.com"&gt;Boston Ember&lt;/a&gt; website. (if it looks terrible
that means I&amp;#39;m not done yet)&lt;/p&gt;

&lt;h2&gt;Getting setup with our tools&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s start by making sure all relevant dev tools are installed on our
machine. I am using the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby 2.1.1&lt;/li&gt;
&lt;li&gt;Rails 4.1.1&lt;/li&gt;
&lt;li&gt;Node 0.10.26&lt;/li&gt;
&lt;li&gt;npm 1.4.7&lt;/li&gt;
&lt;li&gt;Postgres (only necessary because we are deploying to Heroku)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Versions at or above these versions should be OK for following along. Please refer elsewhere on how to install these tools on your development
machine.&lt;/p&gt;

&lt;p&gt;Next I will install ember-cli&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install -g ember-cli
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Confirm that you have &lt;code&gt;ember-cli&lt;/code&gt; installed:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ember --version
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You should see:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;version: 0.0.27
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Or a greater version.&lt;/p&gt;

&lt;h2&gt;Setting up our project&lt;/h2&gt;

&lt;p&gt;For this project we will keep our Rails and our Ember apps in separate
directories with a top-level directory containing the two. We&amp;#39;ll have to
do some project generating and renaming. &lt;/p&gt;

&lt;p&gt;I first create a new top-level directory:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;mkdir bostonember
cd bostonember
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we&amp;#39;re going to generate our Rails project:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rails new bostonember -B -S -d postgresql
mv bostonember rails
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note how we renamed the directory the Rails project is in to &lt;code&gt;rails&lt;/code&gt;. This
does not affect anything in that directory. If you do not have Postgres
on your machine omit &lt;code&gt;-d postgresql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now the ember project:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ember new bostonember
mv bostonember ember
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now it should be obvious why we moved the Rails project. We should now have
a structure like:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;bostonember
|- ember
|- rails
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s confirm that our ember app runs:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;cd ember
ember server
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In your browser visit &lt;code&gt;http://localhost:4200&lt;/code&gt; and you should see &amp;quot;Welcome to Ember.js&amp;quot;&lt;/p&gt;

&lt;p&gt;At this point you can put everything in your top level directory under
version control:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;git init
git add .
gc -m &amp;quot;Initial commit&amp;quot;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s make some modifications to our Rails app.&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rm -rf rails/app/assets
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code&gt;rails/Gemfile&lt;/code&gt; remove the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;coffee-rails&lt;/li&gt;
&lt;li&gt;jquery-rails&lt;/li&gt;
&lt;li&gt;turbolinks&lt;/li&gt;
&lt;li&gt;jbuilder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now everything related to the Asset Pipeline is completely removed.&lt;/p&gt;

&lt;p&gt;Add the following to the &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;active_model_serializers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you don&amp;#39;t have Postgres on your machine you can set this for
Production only:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;group &lt;span class="symbol"&gt;:development&lt;/span&gt;, &lt;span class="symbol"&gt;:test&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;sqlite3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

group &lt;span class="symbol"&gt;:production&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;pg&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;code&gt;bundle install&lt;/code&gt; in your &lt;code&gt;rails&lt;/code&gt; directory. Let&amp;#39;s commit our
changes:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;git add .
gc -m &amp;quot;Removed asset pipeline and added active_model_serializers in Rails&amp;quot;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That wraps up Part 1. In Part 2 will focus on Ember and creating
some functionality in our app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bostonember/website/commit/cf2d9e18342979b1c187328c4cf29de16599e61d"&gt;Check out the actual code for this
part&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The other thing DHH mentioned</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/05/06/the-other-thing-dhh-mentioned.html"/>
    <id>http://reefpoints.dockyard.com/2014/05/06/the-other-thing-dhh-mentioned.html</id>
    <published>2014-05-06T00:00:00Z</published>
    <updated>2014-05-29T10:57:27-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>The Design Pattern Cargo Culting of the Ruby Community</summary>
    <content type="html">&lt;p&gt;By now &lt;a href="http://www.confreaks.com/videos/3315-railsconf-keynote"&gt;you&amp;#39;ve probably seen DHH&amp;#39;s Rails Conf 2014 Keynote&lt;/a&gt;. 
Love it or hate it, the one thing you can&amp;#39;t do is deny it got people&amp;#39;s attention. I wasn&amp;#39;t there, and I admit I reacted to Twitter
before actually viewing it. If you only listened on Twitter your
perception of the keynote is most likely that DHH is anti-testing. That
is very far from the truth. Go and watch the video, a lot of what he
talks about resonated with me. I still believe in &amp;quot;testing first&amp;quot; and
&amp;quot;red-green-refactor&amp;quot; but my style is not as dogmatic as some other&amp;#39;s. I
rely on integration tests quite a bit, and I don&amp;#39;t mind hitting the database
during unit tests. Slow tests that actually test how clients
use your app are much better than fast tests that actually test nothing.&lt;/p&gt;

&lt;p&gt;On a side-note, I would be interested to know what DHH thinks about BDD
as opposed to TDD, if he even thinks there is a difference. For me I
feel there is a distinct difference and I would characterize my style of
development as BDD.&lt;/p&gt;

&lt;p&gt;But I don&amp;#39;t want to talk about testing. I want to talk about the other
thing DHH came down on during his keynote: Design Patterns.&lt;/p&gt;

&lt;p&gt;Now before I get raked over the coals let me start by saying that
overall design patterns are great. It was the MVC(ish) and ActiveRecord
patterns that made Rails itself possible. When we speak in patterns it
becomes the lingua franca for programmers. I can jump from language to
language and can, with relative ease, recognize the patterns.&lt;/p&gt;

&lt;p&gt;However, in the Ruby/Rails communities we have gone overboard. Design
Patterns are the new Holy Grail of software development. A few
years ago people were very excited about TDD, as DHH said it was sold to
us as a necessary tool for &amp;quot;professional software development&amp;quot;. Now that
everybody just assumes TDD is happening the thought leaders went in
search of the next intellectually challenging concept to hold everyone
accountable for. This began to spring up maybe 2 years ago, at least
that&amp;#39;s when I started to notice it. Design pattern talks at conferences, books
dedicated to design patterns, podcasts talking about patterns, blog
posts (of which we have written a few), code schools teaching design
patterns - developers ate them up. The Ruby community was hungry for
patterns.&lt;/p&gt;

&lt;p&gt;There feels to me a loss of pragmatism in the ruby community. I think
this is due to there being no major problems to solve in Rails anymore.
Developers are always looking for problems to solve, and in this case
the hive mind has decided to hyper optimize on patterns.&lt;/p&gt;

&lt;p&gt;I get it, they are intellectually stimulating. Implementing a pattern to
&amp;quot;perfection&amp;quot; will give a developer that sense of self-satisfaction. &amp;quot;My
code is clean&amp;quot;. Until the next feature comes in and you have to blow up
what you&amp;#39;ve been perfecting.&lt;/p&gt;

&lt;p&gt;Be pragmatic. Don&amp;#39;t follow the trends just because some guys behind a
microphone say you should.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Preserve scrolling position in Ember Apps</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/05/05/preserve-scroll-position-in-ember-apps.html"/>
    <id>http://reefpoints.dockyard.com/2014/05/05/preserve-scroll-position-in-ember-apps.html</id>
    <published>2014-05-05T00:00:00Z</published>
    <updated>2014-05-29T10:57:27-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>A simple mixin for your views</summary>
    <content type="html">&lt;p&gt;If you have a long list of items on a page and a user follows a link
then goes back to that list, Ember will re-render the list and the user
loses their place. This can be annoying if there is a very long list of
items and the user is expected to be switching back and forth between
the list and the item.&lt;/p&gt;

&lt;p&gt;We can preserve the position by taking advantage of &lt;code&gt;didInsertElement&lt;/code&gt;
on the list&amp;#39;s view.&lt;/p&gt;

&lt;p&gt;&lt;a class="jsbin-embed"
href="http://emberjs.jsbin.com/nevaxipe/2/embed?output"&gt;Ember Starter
Kit&lt;/a&gt;&lt;script src="http://static.jsbin.com/js/embed.js"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: there seems to be a bug with the latest stable in Chrome where
the position is never reset if you hit the backbutton. In reality it is
but the position doesn&amp;#39;t render until you scroll. Canary seems OK as do
other browsers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the above example you can scroll down, click on an item, then head
back to the list and be in your original position. This is all done with
the following mixin:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; ScrollableMixin = Ember.Mixin.create({
  &lt;span class="key"&gt;scrollingTimeout&lt;/span&gt;: &lt;span class="integer"&gt;100&lt;/span&gt;,
  &lt;span class="function"&gt;bindScrolling&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;var&lt;/span&gt; self = &lt;span class="local-variable"&gt;this&lt;/span&gt;,
    &lt;span class="function"&gt;onScroll&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;() {
      Ember.run.debounce(self, self.runScrolled, self.scrollingTimeout);
    };

    Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(document).on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;touchmove.scrollable&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, onScroll);
    Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(window).on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;scroll.scrollable&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, onScroll);
  }.on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;didInsertElement&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="function"&gt;unbindScrolling&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(window).off(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;.scrollable&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(document).off(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;.scrollable&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;willDestroyElement&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="function"&gt;preservePos&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(window).scrollTop(&lt;span class="local-variable"&gt;this&lt;/span&gt;.getWithDefault(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller.currentPos&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="integer"&gt;0&lt;/span&gt;));
  }.on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;didInsertElement&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="function"&gt;runScrolled&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;var&lt;/span&gt; position = Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(document).height() - Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(window).scrollTop();
    &lt;span class="keyword"&gt;var&lt;/span&gt; viewportHeight = document.documentElement.clientHeight;
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller.currentPos&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(window).scrollTop());
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You then mix it into your list&amp;#39;s view:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ThingsView = Ember.View.extend(ScrollableMixin);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Stop using Ember Appkit Rails</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/05/04/stop-using-ember-appkit-rails.html"/>
    <id>http://reefpoints.dockyard.com/2014/05/04/stop-using-ember-appkit-rails.html</id>
    <published>2014-05-04T00:00:00Z</published>
    <updated>2014-05-29T10:57:27-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Just stop</summary>
    <content type="html">&lt;p&gt;A few months ago I released a gem called &lt;a href="https://github.com/dockyard/ember-appkit-rails"&gt;Ember Appkit
Rails&lt;/a&gt;. Let me start by
apologizing for its existence. For those that began projects around
eak-rails it started with good intentions and felt right at first but we
have abandoned the gem at DockYard.&lt;/p&gt;

&lt;p&gt;eak-rails was/is a merging of &lt;a href="https://github.com/stefanpenner/ember-app-kit"&gt;Ember App
Kit&lt;/a&gt; and Rails. It does
some heavy monkey patching to Rails&amp;#39; Asset Pipeline to give as much
project hierarchical power to your Ember code as your Rails code
enjoys.&lt;/p&gt;

&lt;p&gt;We used eak-rails in smaller projects, and intro to Ember courses. In
small doses eak-rails felt right. However, when the surface area of an
application increased eak-rails did not scale well. Having your Ember
and Rails files mixed into the same directories created more problems
than it solved.&lt;/p&gt;

&lt;p&gt;This week I will be focusing on how we are building Ember apps
backed with Rails at DockYard. Part of that will be in-line with what
fellow DockYarder &lt;a href="https://www.youtube.com/watch?v=ceFNLdswFxs&amp;amp;t=1h8m20s"&gt;Dan McClain presented at Boston Ember last
month&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For eak-rails users, we have not abandoned you. Anybody refusing to
migrate we&amp;#39;ll continue any &lt;strong&gt;critical&lt;/strong&gt; bug fixes but no new features.
We actually sunset the gem about 2 months ago.&lt;/p&gt;

&lt;p&gt;ember-cli is the future.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Guarding with arrays</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/05/03/guarding-with-arrays.html"/>
    <id>http://reefpoints.dockyard.com/2014/05/03/guarding-with-arrays.html</id>
    <published>2014-05-03T00:00:00Z</published>
    <updated>2014-05-03T10:08:00-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>A common pattern we use</summary>
    <content type="html">&lt;p&gt;This week I applied a pattern I&amp;#39;ve been using for years to two
separate pull requests from our devs. (I like to review almost all of the
code that DockYard devs write)&lt;/p&gt;

&lt;p&gt;In both cases I was able to help them refactor their code to use an
enumerator as code guards instead of conditional statements. Let&amp;#39;s take a
look at each example:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;users = &lt;span class="constant"&gt;User&lt;/span&gt;.where(&lt;span class="key"&gt;type&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;employee&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)

&lt;span class="keyword"&gt;if&lt;/span&gt; users.any?
  users.each &lt;span class="keyword"&gt;do&lt;/span&gt; |user|
    &lt;span class="comment"&gt;# ...&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this first example the &lt;code&gt;each&lt;/code&gt; is avoided if the &lt;code&gt;users&lt;/code&gt;
collection is empty. However, with arrays the enumerator only acts on each
member of the collection so we don&amp;#39;t need to avoid if the collection is
empty. We can refactor the above code into something like this:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;User&lt;/span&gt;.where(&lt;span class="key"&gt;type&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;employee&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).each &lt;span class="keyword"&gt;do&lt;/span&gt; |user|
   &lt;span class="comment"&gt;# ...&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Much cleaner!&lt;/p&gt;

&lt;p&gt;The next example may not be as straight forward but as we&amp;#39;ll see with
Ruby we can clean this up nicely.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; params[&lt;span class="symbol"&gt;:ids&lt;/span&gt;]
  params[&lt;span class="symbol"&gt;:ids&lt;/span&gt;].each &lt;span class="keyword"&gt;do&lt;/span&gt; |id|
    &lt;span class="comment"&gt;# ...&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here we have a situation where &lt;code&gt;params[:ids]&lt;/code&gt; could contain a collection
of data. Or it could be &lt;code&gt;nil&lt;/code&gt;. Because of this we cannot just assume we
can always iterate over that value. In Ruby we can create a new &lt;code&gt;Array&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Array([&lt;span class="integer"&gt;1&lt;/span&gt;,&lt;span class="integer"&gt;2&lt;/span&gt;,&lt;span class="integer"&gt;3&lt;/span&gt;])
&lt;span class="comment"&gt;# =&amp;gt; [1,2,3]&lt;/span&gt;

Array(&lt;span class="predefined-constant"&gt;nil&lt;/span&gt;)
&lt;span class="comment"&gt;# =&amp;gt; []&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice in the second example that when we pass &lt;code&gt;nil&lt;/code&gt; it creates an
&lt;strong&gt;empty array&lt;/strong&gt;. Knowing this we can refactor our code:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Array(params[&lt;span class="symbol"&gt;:ids&lt;/span&gt;]).each &lt;span class="keyword"&gt;do&lt;/span&gt; |id|
  &lt;span class="comment"&gt;# ...&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you find yourself putting guards around enumerators odds are you can
refactor in a similar manner as I&amp;#39;ve shown above.&lt;/p&gt;

&lt;p&gt;BTW, I&amp;#39;ve been using this pattern for years but I don&amp;#39;t know if there is
an actual name for this. If you do please share!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>What is holding up the uniqueness validator?</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/05/02/what-is-holding-up-uniqueness-validator.html"/>
    <id>http://reefpoints.dockyard.com/2014/05/02/what-is-holding-up-uniqueness-validator.html</id>
    <published>2014-05-02T00:00:00Z</published>
    <updated>2014-05-29T10:57:27-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>One of the more requested features of ember-validations</summary>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/dockyard/ember-validations"&gt;ember-validations&lt;/a&gt; has
nearly all of the &lt;a href="https://github.com/dockyard/ember-validations#validators"&gt;validator
rules&lt;/a&gt; one needs.
One glarring omission is the &lt;code&gt;Uniqueness&lt;/code&gt; validator.&lt;/p&gt;

&lt;h3&gt;Not as straight forward as one would think&lt;/h3&gt;

&lt;p&gt;Before we even talk about the complication with implementing the remote
validator, we should talk about if &lt;code&gt;uniqueness&lt;/code&gt; should be both a remote 
&lt;strong&gt;and&lt;/strong&gt; local validator.&lt;/p&gt;

&lt;p&gt;Imagine you are working with
&lt;a href="https://github.com/emberjs/data"&gt;ember-data&lt;/a&gt;, you attempt to create a
new record with an email &lt;code&gt;test@example.com&lt;/code&gt;. If you already have a
record with that value for email in ember-data&amp;#39;s store should
&lt;code&gt;uniqueness&lt;/code&gt; first defer here before we hit remote? This ends up being a
strange thing because what if you have not persisted that first record
yet. Do we only run uniqueness checks against local records that have
been persisted? And how exactly would this fit in if you are mixing your
validations into the controller instead of the model?&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;email&lt;/code&gt; example isn&amp;#39;t working for you, imagine you are adding a
bunch of line items to a parent record. None of these line items have
been persisted yet. And you don&amp;#39;t want to allow your users to add
another until the current one they are working on is &amp;quot;valid&amp;quot;. Validating
uniqueness locally is all of a sudden very valuable. But also very
complex to implement properly.&lt;/p&gt;

&lt;h3&gt;No standard yet&lt;/h3&gt;

&lt;p&gt;If the local validator is too complex of an animal to tackle perhaps the
remote validator implementation will be easier. It is, in part at least.
We can rely on &lt;code&gt;Ember.run.debounce&lt;/code&gt; to ensure the the remote validator
doesn&amp;#39;t fire too frequenly when many changes are happening to the value
of a property. (i.e. entering text into a field)&lt;/p&gt;

&lt;p&gt;But where do we send this request for uniqueness? This is where I am
currently hung up. I really don&amp;#39;t want to implement a backend api
expectation into ember-validations. I was hoping that something like
&lt;a href="http://jsonapi.org"&gt;json-api&lt;/a&gt; would define this for me then I could rely upon that as a
starting expected endpoint. But I don&amp;#39;t think this is anywhere on their
radar.&lt;/p&gt;

&lt;p&gt;This being said, there is a possible solution. One of my co-workers &lt;a href="https://twitter.com/linstula"&gt;Lin
Reid&lt;/a&gt; has put together a PR for
introducing remote uniqueness to ember-validations. It is lacking tests
(hint hint, Lin!) but I think &lt;a href="https://github.com/dockyard/ember-validations/pull/117"&gt;this is moving in the right
direction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To summarize, uniqueness is not forgotten. It is just a pain in the ass
to do properly. Personally, I would prefer not to implement an API have
people buy into it now and have to change it (or be locked into it) a
few months from now.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Alert messages in Ember Apps</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/05/01/alert-messages-in-ember-apps.html"/>
    <id>http://reefpoints.dockyard.com/2014/05/01/alert-messages-in-ember-apps.html</id>
    <published>2014-05-01T00:00:00Z</published>
    <updated>2014-05-01T12:03:34-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>The wonder of Woof!</summary>
    <content type="html">&lt;p&gt;Something that feels missing from Ember is a way to send, from anywhere
in my app, a general alert message. Something that would pop up in my
app, display for a few seconds and disappear.&lt;/p&gt;

&lt;p&gt;Clearly, this is something that should not be part of Ember itself but it
is a common enough feature that someone should build it.&lt;/p&gt;

&lt;p&gt;I call it &lt;code&gt;Woof&lt;/code&gt;.&lt;/p&gt;

&lt;iframe width="620" height="465"
src="//www.youtube.com/embed/8wfG8ngFvPk" frameborder="0"
allowfullscreen&gt;&lt;/iframe&gt; 

&lt;p&gt;It currently only exists on &lt;a href="http://jsbin.com"&gt;jsbin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class="jsbin-embed"
href="http://jsbin.com/luhoquxi/7/embed?output"&gt;WoofWoof! Notifier for
Ember&lt;/a&gt;&lt;script src="http://static.jsbin.com/js/embed.js"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;So for the time being you&amp;#39;ll need to copy/paste. We&amp;#39;ll be extracting it
into a plugin soon enough.&lt;/p&gt;

&lt;p&gt;Basically, Woof will inject itself into your routes, controllers, and
components. You will need to embed the Woof component somewhere in your
templates:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;x-woof&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Woof injects a &lt;code&gt;woof&lt;/code&gt; object similar to how &lt;code&gt;ember-data&lt;/code&gt; injects a
&lt;code&gt;store&lt;/code&gt; object. You can push a message onto Woof using some of the
pre-defined types or create your own:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="local-variable"&gt;this&lt;/span&gt;.woof.info(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;This is an info message&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="local-variable"&gt;this&lt;/span&gt;.woof.pushObject({&lt;span class="key"&gt;type&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;customType&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;message&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Woof! Woof!
Woof!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This code comes with Twitter Bootstrap types setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;danger&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;info&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;success&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;warning&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;x-woof&lt;/code&gt; component will loop through all woofs in the array and
print out a div with the type as the class for specific styling
purposes.&lt;/p&gt;

&lt;p&gt;The code in the JSBin is setup and styled for Twitter Bootstrap.
The event handling is setup for removing the woof when the
css opacity transition completes. Browser support may vary.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Understanding validation graphs</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/04/30/understanding-validation-graphs.html"/>
    <id>http://reefpoints.dockyard.com/2014/04/30/understanding-validation-graphs.html</id>
    <published>2014-04-30T00:00:00Z</published>
    <updated>2014-05-04T04:17:57-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>The power behind ember-validations</summary>
    <content type="html">&lt;p&gt;If you have heard me speak about
&lt;a href="https://github.com/dockyard/ember-validations"&gt;ember-validations&lt;/a&gt; then
you may have heard me mention the term &lt;strong&gt;validation graph&lt;/strong&gt;. What is
this? Why is it important?&lt;/p&gt;

&lt;p&gt;If you come from a Rails background then you are used to the validations
being stored in an array on the instance of the model. When you validate
your model all of those validations will be run and an errors object is
produced. If you make a change to a property you have to run the
validations again to determine the validity of the model.&lt;/p&gt;

&lt;p&gt;I would refer to the style of
validations described above as &lt;em&gt;lazy validations&lt;/em&gt;. Meaning the
validity of the model may not be truly representative of its
current state. We have to opt-into running the validations again to
determine this. Fortunately in most cases, the validations will run for us
before we save. On the server this all happens within a request/response
cycle so we don&amp;#39;t really care too much about the validations
being lazy because we care about the final result, not the state of the
model at any given point during that cycle.&lt;/p&gt;

&lt;p&gt;ember-validations has &lt;em&gt;eager validations&lt;/em&gt;. This means when the property
that is associated with any number of validations changes those
validations will run again to determine the state of the model. This is
great for client side apps that need to show the current state of the
entire model any time you make a change, say during a user sign up. I
might want to disable the Submit button if there are any failing
validations. If I make a correction I want the error message to go away
once the correction is made. I should not have to wait upon form
submission to see my errors.&lt;/p&gt;

&lt;p&gt;How does ember-validations do this? Let&amp;#39;s say you have the following
validations:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; UsersController =
Ember.ObjectController.extend(Ember.Validations.Mixin, {
  &lt;span class="key"&gt;validations&lt;/span&gt;: {
    &lt;span class="key"&gt;firstName&lt;/span&gt;: {
      &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;,
      &lt;span class="key"&gt;length&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt;
    },
    &lt;span class="key"&gt;password&lt;/span&gt;: {
      &lt;span class="key"&gt;confirmation&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There are 3 validations on 2 properties. Each validation is an
instantiated class that can observe the one or more properties. In the
case of the &lt;code&gt;firstName&lt;/code&gt; property the &lt;code&gt;Presence&lt;/code&gt; and &lt;code&gt;Length&lt;/code&gt; validators
are observing it. The &lt;code&gt;Confirmation&lt;/code&gt; validator is actually
observing &lt;code&gt;password&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;passwordConfirmation&lt;/code&gt; for changes. Each
validator has a &lt;code&gt;isValid&lt;/code&gt; flag that is set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;
depending upon the result. Each of these validators are pushed onto a
&lt;code&gt;_validators&lt;/code&gt; array and the parent object is observing
&lt;code&gt;_validators.@each.isValid&lt;/code&gt; for any changes. If any of the validators
are &lt;code&gt;false&lt;/code&gt; the parent&amp;#39;s &lt;code&gt;isValid&lt;/code&gt; state is now &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please take a moment to re-read the above paragraph because it is very
important to have a good handle on this before we move forward. &lt;strong&gt;The
validating object&amp;#39;s &lt;code&gt;isValid&lt;/code&gt; flag is the result of its validator&amp;#39;s
&lt;code&gt;isValid&lt;/code&gt; flags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because we are in quack-quack duck-typed JavaScript we don&amp;#39;t &lt;strong&gt;have&lt;/strong&gt; to
pass validator instances into the &lt;code&gt;_validators&lt;/code&gt; array. &lt;em&gt;What if we pass
another validatable object?&lt;/em&gt; Now things get interesting.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say we have a &lt;code&gt;Profile&lt;/code&gt; that belongs to a &lt;code&gt;User&lt;/code&gt;. The &lt;code&gt;Profile&lt;/code&gt;
can have its own set of validations as well as its own &lt;code&gt;isValid&lt;/code&gt; flag.
If the &lt;code&gt;Profile&lt;/code&gt; is mixed into the &lt;code&gt;Users&lt;/code&gt;&amp;#39;s validation graph then the
&lt;code&gt;User&lt;/code&gt; will be invalid when the &lt;code&gt;Profile&lt;/code&gt; is invalid. We can use this
pattern to build an incredibly deep and complex graph where the validation
state bubbles up to the root whenever a property change takes place
anywhere in the graph.&lt;/p&gt;

&lt;p&gt;We can do this simply with:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; UsersController =
Ember.ObjectController.extend(Ember.Validations.Mixin, {
  &lt;span class="key"&gt;validations&lt;/span&gt;: {
    &lt;span class="key"&gt;firstName&lt;/span&gt;: {
      &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;,
      &lt;span class="key"&gt;length&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt;
    },
    &lt;span class="key"&gt;password&lt;/span&gt;: {
      &lt;span class="key"&gt;confirmation&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    },
    &lt;span class="key"&gt;profile&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice &lt;code&gt;profile: true&lt;/code&gt; in the graph. As long as &lt;code&gt;profile&lt;/code&gt; is the path to
the object to validate against ember-validations will work its magic.&lt;/p&gt;

&lt;p&gt;However, the above only really works if the validations exist on the
&lt;code&gt;Profile&lt;/code&gt; &lt;strong&gt;model&lt;/strong&gt; and not the controller.&lt;/p&gt;

&lt;p&gt;A visualization of a complex validation graph might look like this. We
can see the &lt;code&gt;isValid&lt;/code&gt; states bubbling up to the original root node:&lt;/p&gt;

&lt;p&gt;&lt;img style="width: auto" src="http://i.imgur.com/QP2sYWT.gif"/&gt;&lt;/p&gt;

&lt;p&gt;I welcome suggestions and thoughts on this API as well as the validation graph in general.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The problem with server-rendered errors</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/04/29/the-problem-with-server-rendered-errors.html"/>
    <id>http://reefpoints.dockyard.com/2014/04/29/the-problem-with-server-rendered-errors.html</id>
    <published>2014-04-29T00:00:00Z</published>
    <updated>2014-05-04T04:17:57-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Handling validation errors returned from the server is no easy task</summary>
    <content type="html">&lt;p&gt;The 3rd most popular question with
&lt;a href="https://github.com/dockyard/ember-validations"&gt;ember-validations&lt;/a&gt; is
how can the library work with server-rendered validation errors, such as
the ones returned with &lt;a href="https://github.com/emberjs/data"&gt;ember-data&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The short answer for now: it can&amp;#39;t.&lt;/p&gt;

&lt;p&gt;(btw, 2nd most popular question is about &lt;code&gt;uniqueness&lt;/code&gt;/remote validations
and the 1st most popular question is when will I provide a &lt;code&gt;dist/&lt;/code&gt;
directory... I&amp;#39;ll cover the 2nd Q in an upcoming blog post. As far as
&lt;code&gt;dist/&lt;/code&gt; its never going to happen, ever)&lt;/p&gt;

&lt;p&gt;Here is the problem. When you are dealing with a client-side model and a
server-rendered model there won&amp;#39;t always be a 1-to-1 representation of the
model. In those cases you can rely on ember-data&amp;#39;s serializer to
transform the properties on a server-rendered error object to ones that
exist on the client data model. How about properties that don&amp;#39;t exist at
all in any form on the client? You could have a validation error on
something only meant for server-rendered purposes. How do we best handle
this?&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s imagine for a moment that we can properly map all the properties
back to their client-side equivalents. Now what? How do you resolve
these validation errors? How do you know in the UI when the validation
error has been resolved to clear the error message? Are you preventing data
submission until your client model is valid? If the errors are happening
server-side the odds are high that these are not validations that can be
known to be resolved on the client unless you do another data
submission and wait to see how the server responds.&lt;/p&gt;

&lt;p&gt;So to re-cap the two isses are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Potential lack of context on which properties errors can map back to&lt;/li&gt;
&lt;li&gt;Inability to know when server-rendered validation errors are
satisfied on the client&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To start to consider a possible solution I think we need to step back
and consider the ultimate goal of client side validations. In my mind
this is puropse: &lt;em&gt;to help the user submit valid data to the server&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Client side validations are just UI sugar. They are there to guide your
users. ember-validations only has model-layer concerns, which means you
have to provide how the validation errors are displayed on your UI. This
is why I also wrote
&lt;a href="https://github.com/dockyard/ember-easyForm"&gt;ember-easyForm&lt;/a&gt; which
handles the complexity of what I consider to be best practices of how
validation messages should be displayed and cleared. To fix this problem
would have to tackle it from both sides:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How will server-rendered errors be stored in the validation graph?
(ember-validations)&lt;/li&gt;
&lt;li&gt;How will server-rendered errors be displayed and resolved in the client?
(ember-easyForm)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Storing server-rendered errors&lt;/h3&gt;

&lt;p&gt;If you are already using ember-data then your data model is handling
this for you already. IMO you should never mix your validations into
your data model, they should be mixed into your controller:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; UserController =
Ember.ObjectController.extend(Ember.Validations.Mixin, {
  &lt;span class="key"&gt;validations&lt;/span&gt;: {
    &lt;span class="key"&gt;firstName&lt;/span&gt;: {
      &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This way the controller has its own &lt;code&gt;errors&lt;/code&gt; object which will not clash
with the &lt;code&gt;errors&lt;/code&gt; object on your data model. One possiblity of
referencing the model&amp;#39;s server-rendered errors is to have a &lt;code&gt;base&lt;/code&gt;
validator that is not part of the validation graph but who&amp;#39;s errors can
be used for presentation purposes.&lt;/p&gt;

&lt;h3&gt;Displaying server-rendered errors&lt;/h3&gt;

&lt;p&gt;So how do you properly display these error messages? Do you try to
associate them with a property? What if that property is not represented
by a form input? What if you aren&amp;#39;t even using a form? How do you know
when to clear the errors?&lt;/p&gt;

&lt;p&gt;I believe this is a complex issue. My first pass at handling this in
EasyForm will be to display all of the server-rendered errors in a
single place. An upcoming version of EasyForm will simply group all
errors in &lt;code&gt;base&lt;/code&gt; and display them. These errors will not clear out due
to any corrections made by the client. They will only clear when some
other action clears out those errors, for example when ember-data itself
clears out or changes the content of its &lt;code&gt;errors&lt;/code&gt; object.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This is far from ideal. This moves us away from the &amp;quot;best practices&amp;quot; for
&lt;a href="http://alistapart.com/article/inline-validation-in-web-forms"&gt;high conversion forms outlined by Luke
Wroblewski&lt;/a&gt;.
But it is better than not guiding your users. If the server errors for
any given reason we don&amp;#39;t want our users sitting there without any
feedback.&lt;/p&gt;

&lt;p&gt;I am very interested in other approaches and brainstorming on the best
direction for this. Please feel free to comment below.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The first two months at DockYard</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/04/28/first-few-months.html"/>
    <id>http://reefpoints.dockyard.com/2014/04/28/first-few-months.html</id>
    <published>2014-04-28T00:00:00Z</published>
    <updated>2014-04-28T13:07:33-04:00</updated>
    <author>
      <name>Maria Matveeva</name>
    </author>
    <summary>Recurring themes, and principles I learned in breaking into user experience design.</summary>
    <content type="html">&lt;h1&gt;The first two months at DockYard.&lt;/h1&gt;

&lt;p&gt;Recurring themes, and principles I learned in breaking into user experience design.&lt;/p&gt;

&lt;h2&gt;Invisible&lt;/h2&gt;

&lt;p&gt;The way I see websites has changed after a month and a half of paying attention to website UI. One thing that stands out: good design can support the message and content in a quiet, almost invisible way. This principle applies in all areas of design, but I am particularly focusing on elegant solutions in web interfaces. It is a pleasure to observe, and sometimes find myself, effective use of subtle visual changes. &lt;/p&gt;

&lt;p&gt;The principle of quiet, effective solutions comes up most often when my work-in-progress is reviewed by the whole team. In most cases, I find that I start a design with many elements in a very “loud” state, then evaluate the entire layout. Once I can prioritize things on the page, most elements can become more “quiet”.&lt;/p&gt;

&lt;h2&gt;Design for a typical case, not the worst case.&lt;/h2&gt;

&lt;p&gt;Before DockYard, my process relied heavily on finding out what the worst-case scenario could be, and designing for that. For example, I would consider a very long, but still plausible, title for an article, and then design the header to accommodate that comfortably. I’d always consider extreme cases early on, and design heavily around those. &lt;/p&gt;

&lt;p&gt;At DockYard, I learned to design for the typical use case, and then consider how an extreme case would be accommodated. Looking back, I realize that this approach is less limiting and can result in better graphical solutions.&lt;/p&gt;

&lt;h2&gt;Information density&lt;/h2&gt;

&lt;p&gt;Different use cases call for different densities of information. &lt;/p&gt;

&lt;p&gt;When you are scanning through many search results, it is sometimes appropriate to show a lot of detail at once. Search results are basically many repetitions of one type of item. Users may want to compare what they see according to different criteria, and it is useful to neatly show many details about each result. If I’ve done a good job prioritizing the detailed information, many details do not cause clutter.&lt;/p&gt;

&lt;p&gt;In other cases, it is more important to convey the atmosphere around a brand, or to highlight one or two primary actions. Showing fewer items and fewer details can work better.  In these cases, the density of information may appear low, but each element has more prominence.&lt;/p&gt;

&lt;p&gt;I can make good progress towards solving the layout of a page by deciding whether it is a detailed type of page (like search results) or a page focused on emotional impact, but not details (like some landing pages).&lt;/p&gt;

&lt;h2&gt;Does it look “real”?&lt;/h2&gt;

&lt;p&gt;Design is often about deciding what kind of animal a chunk of information will be. Through visual design, we have to clearly answer questions like “how important is this thing, relative to others?”, “what can I do with this?” and even “what kind of thing is it?”. When I show a draft in a design review, I can see how the suggested changes “snap” to something that looks more real and interactive. I believe that the ability to make things look real quickly comes from experience, and also from paying attention to how user interface elements are crafted in products I use every day.&lt;/p&gt;

&lt;p&gt;Through regular design reviews, close observation of UI design, and occasional experiments, I hope to continue improving my ability to judge my own work. This will allow for more efficient work, more refined design, and more awesomeness in the future.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Don't override init</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/04/28/dont-override-init.html"/>
    <id>http://reefpoints.dockyard.com/2014/04/28/dont-override-init.html</id>
    <published>2014-04-28T00:00:00Z</published>
    <updated>2014-04-28T13:07:33-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Use events instead</summary>
    <content type="html">&lt;p&gt;Too frequently I see the following problem. Someone creates a new
class and overrides &lt;code&gt;init&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; UsersController = Ember.ArrayController.extend({
  &lt;span class="function"&gt;init&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// some custom stuff&lt;/span&gt;
  }
})

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; UsersController;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt; is a popular function to override because it is automatically run
after the object is instantiated. It is the only lifecycle hook for
&lt;code&gt;Ember.Object&lt;/code&gt;, subclasses of &lt;code&gt;Ember.Object&lt;/code&gt; add their own hooks to the
lifecycle but the only one that is guaranteed to be there is &lt;code&gt;init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem is with the above example
the controller is broken. I forgot to make a call to &lt;code&gt;this._super()&lt;/code&gt;
which will call the original &lt;code&gt;init&lt;/code&gt; from &lt;code&gt;Ember.ArrayController&lt;/code&gt;. That
&lt;code&gt;init&lt;/code&gt; assigns the proper value to &lt;code&gt;content&lt;/code&gt;. (via &lt;code&gt;ArrayProxy&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Instead of overriding &lt;code&gt;init&lt;/code&gt; I have been writing functions that are
specific to the logic I want to kick off on object instantiation and
have that function trigger &lt;code&gt;on(&amp;#39;init&amp;#39;)&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; UsersController = Ember.ArrayController.extend({
  &lt;span class="function"&gt;doSomething&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// some custom stuff&lt;/span&gt;
  }.on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;init&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
})

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; UsersController;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now I don&amp;#39;t risk messing with the original behavior of the parent class.&lt;/p&gt;

&lt;p&gt;Calling up the &lt;code&gt;super&lt;/code&gt; chain is a powerful and important feature in
Ember but too often I was forgetting to call it. Now the only time I find
myself overriding &lt;code&gt;init&lt;/code&gt; is if I want to &lt;strong&gt;disrupt&lt;/strong&gt; the default instantiating
behavior of the object.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Artist: Ryo Takemasa</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/04/25/ryo-takemasa.html"/>
    <id>http://reefpoints.dockyard.com/2014/04/25/ryo-takemasa.html</id>
    <published>2014-04-25T00:00:00Z</published>
    <updated>2014-04-26T00:29:20-04:00</updated>
    <author>
      <name>Logan Faerber</name>
    </author>
    <summary>Highlighting an inspiring artist</summary>
    <content type="html">&lt;h1&gt;Artist: Ryo Takemasa&lt;/h1&gt;

&lt;p&gt;If you’re not using Pinterest yet to collect various reference material and inspirational artists, may I suggest doing so immediately? I typically like to keep a huge assortment of “mood boards” on various topics, ranging from product designs to comic books to grandiose natural landscape photography. It serves as an endless source of reference material, much like collecting magazine clippings and organizing them in various folders. Not only is it great for collecting all of the art you love in one place, it’s also a great platform for discovering new artists. A list of suggestions titled, “other pins like...” is displayed below the piece you’re currently viewing. This often times leads me down an endless tunnel of discovery - one that typically keeps me digging a hole into the wee hours of the morning. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://24.media.tumblr.com/tumblr_mbi1kuOUHp1rfdswao1_500.jpg" alt="“Cucumbers” by Ryo Takemasa"&gt;&lt;/p&gt;

&lt;p&gt;During one of these excavations, I discovered the artist &lt;a href="http://ryotakemasa.com/"&gt;Ryo Takemasa&lt;/a&gt;, who I at first mistook as &lt;a href="http://en.wikipedia.org/wiki/Charley_Harper"&gt;Charley Harper&lt;/a&gt;. The piece I saw was a series of stand alone fruits and vegetables, most of them cut in half to expose their cross section, which all shared a beautiful mixture of what appeared to be wood block print and cut paper. Their geometric and pattern infused forms created lovely shapes alongside color shifts that I’d typically only see in particular vintage illustrations. Accompanying this pin was a link to his site. It turns out he’s a modern Japanese illustrator who works primarily in the print world for a variety of publications. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://24.media.tumblr.com/67de982b360a312ab4d4623f544ba118/tumblr_mg1q8u60Ra1rfdswao1_500.jpg" alt="“Yellow Pepper” by Ryo Takemasa"&gt;&lt;/p&gt;

&lt;p&gt;Once I discovered this, I began to see the Japanese line work and &lt;a href="https://www.google.com/search?q=Japanese+wood+block+print&amp;amp;safe=active&amp;amp;es_sm=91&amp;amp;espv=210&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ei=o__0UuZd5anRAdv0gJgP&amp;amp;ved=0CAgQ_AUoAg&amp;amp;biw=2840&amp;amp;bih=1495&amp;amp;dpr=0.9"&gt;wood block printing&lt;/a&gt; aesthetics shine through in his work. The geometric forms and subtle color transparencies were clearly influenced by Japanese culture, but they still retained that vintage American aesthetic at times as well.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://24.media.tumblr.com/tumblr_m9xfe6iAqI1rfdswao1_500.jpg" alt="“Onion” by Ryo Takemasa"&gt;&lt;/p&gt;

&lt;p&gt;I’d be curious to learn what amount of influence Charley Harper’s art had on the world and whether it was a huge influence everywhere, such as territories in Japan. Similarly I would also like to know the amount of influence, if any, ancient Japanese wood block printing had on Charley Harper. Was it a conscious decision or had it inadvertently shown through? If there had been a direct influence, that would significantly alter my view of someone who I’ve alway seen as having emerged purely from American Modernist abstraction. Either way, it’s amazing to think that two people, so separated by distance, culture and era could have produced such distinct, yet aesthetically similar artwork. As is the beauty of influence in this world. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Object Self Troll</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/04/17/ember-object-self-troll.html"/>
    <id>http://reefpoints.dockyard.com/2014/04/17/ember-object-self-troll.html</id>
    <published>2014-04-17T00:00:00Z</published>
    <updated>2014-06-06T15:15:24-04:00</updated>
    <author>
      <name>Alex Navasardyan</name>
    </author>
    <summary>Ember.Object.create explained</summary>
    <content type="html">&lt;p&gt;Let&amp;#39;s say we have a &lt;code&gt;Month&lt;/code&gt; object. A &lt;code&gt;Month&lt;/code&gt; has &lt;code&gt;weeks&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Month = Ember.Object.extend({
  &lt;span class="key"&gt;weeks&lt;/span&gt;: Em.A()
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; a = Month.create();
&lt;span class="keyword"&gt;var&lt;/span&gt; b = Month.create();

console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;before a&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, a.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; []&lt;/span&gt;
console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;before b&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, b.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; []&lt;/span&gt;

a.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).pushObject(&lt;span class="integer"&gt;1&lt;/span&gt;);
a.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).pushObject(&lt;span class="integer"&gt;2&lt;/span&gt;);

console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;after a&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, a.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; [1, 2], as you expect&lt;/span&gt;
console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;after b&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, b.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; [1, 2], and you're like O_o&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And another one:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Month = Ember.Object.extend({
  &lt;span class="key"&gt;weeks&lt;/span&gt;: Em.A()
});

&lt;span class="keyword"&gt;var&lt;/span&gt; a = Month.create({ &lt;span class="key"&gt;weeks&lt;/span&gt;: Em.A([&lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="integer"&gt;2&lt;/span&gt;]) });
&lt;span class="keyword"&gt;var&lt;/span&gt; b = Month.create();

console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, a.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; [1, 2]&lt;/span&gt;
console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;b&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, b.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class="comment"&gt;// =&amp;gt; []&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The results of the first example are quite surprising, if you are not used
to the prototypical inheritance.&lt;/p&gt;

&lt;p&gt;So what&amp;#39;s going on there? Let&amp;#39;s take a look at the &amp;quot;very scary&amp;quot; Ember.js &lt;code&gt;create&lt;/code&gt; &lt;a href="https://github.com/emberjs/ember.js/blob/master/packages_es6/ember-metal/lib/platform.js#L39-L52"&gt;function&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="function"&gt;create&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;(obj, props) {
  K.prototype = obj;
  obj = &lt;span class="keyword"&gt;new&lt;/span&gt; K();
  &lt;span class="keyword"&gt;if&lt;/span&gt; (props) {
    K.prototype = obj;
    &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; prop &lt;span class="keyword"&gt;in&lt;/span&gt; props) {
      K.prototype[prop] = props[prop].value;
    }
    obj = &lt;span class="keyword"&gt;new&lt;/span&gt; K();
  }
  K.prototype = &lt;span class="predefined-constant"&gt;null&lt;/span&gt;;

  &lt;span class="keyword"&gt;return&lt;/span&gt; obj;
};
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When you don&amp;#39;t pass any properties to create (&lt;code&gt;props&lt;/code&gt;), all instances of
the &lt;code&gt;Object&lt;/code&gt; will share the same prototype. That&amp;#39;s pretty much the gist
of the prototypical inheritance. It means that any changes on one object will
reflect on the others. That explains the behaviour in the first example.&lt;/p&gt;

&lt;p&gt;If you pass the properties (that ones that you specified at &lt;code&gt;extend&lt;/code&gt; time) to &lt;code&gt;create&lt;/code&gt;,
they are going to be replaced on the instance&amp;#39;s prototype.&lt;/p&gt;

&lt;p&gt;There are two ways of changing the default behavior:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;turn &lt;code&gt;weeks&lt;/code&gt; into a &lt;a href="http://reefpoints.dockyard.com/2013/09/04/computed_properties_in_ember_js.html"&gt;Computed Property&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;set &lt;code&gt;weeks&lt;/code&gt; on &lt;code&gt;init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using computed property:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Month = Ember.Object.extend({
  &lt;span class="key"&gt;weeks&lt;/span&gt;: Ember.computed(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; Em.A();
  })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this case, &lt;code&gt;weeks&lt;/code&gt; is going to return a new &lt;code&gt;Ember.Array&lt;/code&gt; on &lt;code&gt;get&lt;/code&gt;.
The code will run as you expect, &lt;code&gt;weeks&lt;/code&gt; are not going to be shared.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;init&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Month = Ember.Object.extend({
  &lt;span class="key"&gt;weeks&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,

  &lt;span class="function"&gt;init&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;._super();
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, Em.A());
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is very clear and nice technique if you&amp;#39;re not familiar with computed properties.
Overriding &lt;code&gt;init&lt;/code&gt; and calling &lt;code&gt;super&lt;/code&gt; allows to run code upon the object&amp;#39;s creation.
You can set the value for &lt;code&gt;weeks&lt;/code&gt; there.&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;on(&amp;#39;init&amp;#39;)&lt;/code&gt; but it&amp;#39;s discouraged because a subclass can provide
its own implementation of &lt;code&gt;setWeeks&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; Month = Ember.Object.extend({
  &lt;span class="function"&gt;setWeeks&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;weeks&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, Em.A());
  }.on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;init&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vim: On Your Mark...</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/04/10/vim-on-your-mark.html"/>
    <id>http://reefpoints.dockyard.com/2014/04/10/vim-on-your-mark.html</id>
    <published>2014-04-10T00:00:00Z</published>
    <updated>2014-04-17T16:17:35-04:00</updated>
    <author>
      <name>Doug Yun</name>
    </author>
    <summary>An introduction to the mark motion</summary>
    <content type="html">&lt;p&gt;The strength of Vim&amp;#39;s basic &lt;strong&gt;movement&lt;/strong&gt; commands are immediately apparent.
We can jump four words over with &lt;code&gt;4w&lt;/code&gt; or move to the beginning
of a sentence with &lt;code&gt;(&lt;/code&gt;. Once these movements are engrained to muscle memory,
we can move within files with ease. However, there are certain limitations
to these basic movement commands; wouldn&amp;#39;t it be great if we could move
to different and specific spots within multiple files?&lt;/p&gt;

&lt;p&gt;Today, we&amp;#39;re going to briefly cover a poweful motion strategy:
&lt;strong&gt;mark&lt;/strong&gt; motion.&lt;/p&gt;

&lt;h2&gt;What is a Mark?&lt;/h2&gt;

&lt;p&gt;Marks are essentially &lt;em&gt;hidden&lt;/em&gt; positions that, when set, allow us to
jump back to that specific location or line. What we mean by &lt;em&gt;hidden&lt;/em&gt; is that these marks
are not visible by default; marks are simply invisible points within a file.&lt;/p&gt;

&lt;p&gt;The mark motion command starts with hitting &lt;code&gt;m&lt;/code&gt; - &lt;code&gt;m&lt;/code&gt; for mark - and then setting
a &lt;strong&gt;destination marker&lt;/strong&gt; - either a lowercase letter or uppercase letter.
We&amp;#39;ll introduce the differences among the destination markers soon.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s start by covering a simple example of setting a &lt;strong&gt;lowercase mark&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;Example: Moving With A Lowercase Mark&lt;/h4&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;# ~/example1.txt

Here is Line 3
Here is Line 4
Here is Line 5

# On Line #3, use `mn` to set a mark on the letter `n` within the word `Line`.
# Move around the file.
# Go back to the previous mark by hitting: `n
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, in &lt;code&gt;Normal&lt;/code&gt; mode, move to Line #3. Place your cursor on the letter &lt;code&gt;n&lt;/code&gt;
within the word &lt;code&gt;Line&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, set a mark by hitting &lt;code&gt;m&lt;/code&gt; and then the lowercase letter
&lt;code&gt;n&lt;/code&gt;. &lt;code&gt;n&lt;/code&gt; is our lowercase &lt;strong&gt;destination marker&lt;/strong&gt;.
Congratulations, we&amp;#39;ve just set a &lt;strong&gt;lowercase mark&lt;/strong&gt;!
We could of used any lowercase character, but by using the letter &lt;code&gt;n&lt;/code&gt;, we&amp;#39;ve
setup a nice mnemonic device.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now move to Line #5. We&amp;#39;re going to move to our mark now.
Hit &lt;code&gt;`n&lt;/code&gt; - &lt;em&gt;backtick&lt;/em&gt; and &lt;code&gt;n&lt;/code&gt;, our previous destination marker.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Notice where our cursor is (&lt;em&gt;hint&lt;/em&gt;: it should be located on the letter &lt;code&gt;n&lt;/code&gt;
within the word &lt;code&gt;Line&lt;/code&gt;).
Huzzah, we are now back to our previous position within the file!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go back to Line #5.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, hit &lt;code&gt;&amp;#39;n&lt;/code&gt; - &lt;em&gt;single quote&lt;/em&gt; and &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are now at the beginning of Line #3!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Jumps, Marks and a Few Commands&lt;/h2&gt;

&lt;p&gt;We know how to set a mark with &lt;code&gt;m&lt;/code&gt;, but let&amp;#39;s clarify the two types of mark jumps
and the different types of marks.&lt;/p&gt;

&lt;h2&gt;Two Types of Mark Jumps&lt;/h2&gt;

&lt;h3&gt;Backtick&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;`&amp;lt;mark&amp;gt;&lt;/code&gt; - The &lt;em&gt;backtick&lt;/em&gt; places our cursor directly on the mark.&lt;/p&gt;

&lt;h3&gt;Single Quote&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;#39;&amp;lt;mark&amp;gt;&lt;/code&gt; - The &lt;em&gt;single quote&lt;/em&gt; takes us to the first non-blank character of the
mark&amp;#39;s line.&lt;/p&gt;

&lt;h2&gt;Three Types of Marks&lt;/h2&gt;

&lt;h3&gt;Lowercase Marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;a - z&lt;/strong&gt; - These marks preserve locations within a &lt;em&gt;single&lt;/em&gt; file. Each individual file
possesses 26 settable lowercase marks. Lowercase marks are valid as long as the file
remains in the buffer list. Furthermore, lowercase marks can be combined with other
operators.  For example, &lt;code&gt;c`n&lt;/code&gt;, will change everything between the cursor to the
mark, &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Uppercase Marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;A - Z&lt;/strong&gt; - These marks preserve locations within &lt;em&gt;multiple&lt;/em&gt; files. Also known
as &lt;strong&gt;file marks&lt;/strong&gt;. These marks, which are shared among all files within the buffer list,
can be used to jump from file to file. File marks can only be used in combination with
operators if the mark is in the current file, i.e. when the current file opened contains
the global file mark.&lt;/p&gt;

&lt;h3&gt;Numbered Marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;0 - 9&lt;/strong&gt; - Numbered marks cannot be set directly, instead they are created
automagically and used by the &lt;strong&gt;viminfo-file&lt;/strong&gt; (&lt;code&gt;:help viminfo-file&lt;/code&gt;).
Essentially, the numbered marks store the location of your cursor after closing Vim.
For example, mark &lt;code&gt;0&lt;/code&gt; returns the position of the cursor during your last Vim session,
while mark &lt;code&gt;1&lt;/code&gt; returns the next to last Vim session, and so forth.&lt;/p&gt;

&lt;h2&gt;Some Pertinent Commands&lt;/h2&gt;

&lt;h3&gt;Viewing current marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;:marks {argument}&lt;/strong&gt; - &lt;strong&gt;:marks&lt;/strong&gt; will show you all current marks, their file location and
destination marker. We can pass in an &lt;em&gt;argument&lt;/em&gt; to view a range of marks between two marks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;:marks aC&lt;/strong&gt; - will return all marks that are between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Deleting Marks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;:delm[arks] {marks}&lt;/strong&gt; - We can use &lt;code&gt;:delm&lt;/code&gt; or &lt;code&gt;:delmarks&lt;/code&gt; and then pass in marks
that we want to delete.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;:delm aAbB&lt;/strong&gt; - will delete marks labeled &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Okay, What&amp;#39;s So Cool About Marks?&lt;/h2&gt;

&lt;p&gt;Marks can speed up our navigation workflow! Here are a few examples:&lt;/p&gt;

&lt;h4&gt;Discussion: Editing One Large File With Lowercase Marks&lt;/h4&gt;

&lt;p&gt;I&amp;#39;ve found &lt;strong&gt;lowercase marks&lt;/strong&gt; extremely useful when editing multiple portions of
a file. Instead of using &lt;code&gt;CTRL+u&lt;/code&gt;, &lt;code&gt;CTRL+d&lt;/code&gt;, &lt;code&gt;H&lt;/code&gt;, or &lt;code&gt;L&lt;/code&gt; to move up and down
the file, you can set local marks at heavily treaded locations at jump back
and forth among them. Moveover, marks give us the ability to jump to an
exact location - &lt;em&gt;backtick&lt;/em&gt; - or to the beginning of the line - &lt;em&gt;single quote&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;Example: Editing Multiple Files With Uppercase (File) Marks&lt;/h4&gt;

&lt;p&gt;When I first started using Vim (and began programming), I had multiple windows
open constantly on the monitor.  Not only does it quickly become cluttered,
remembering which file is which becomes hairy.&lt;/p&gt;

&lt;p&gt;Files marks to the rescue!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here are three files we are want to work on. Let&amp;#39;s add some &lt;strong&gt;file marks&lt;/strong&gt;.
Just like lowercase marks, the actual uppercase letter we use does not matter
as long as it is unique.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# ~/sheep.rb&lt;/span&gt;

&lt;span class="comment"&gt;# On the word `speak`, place a file mark with `mS` - `S` for &amp;quot;sheep&amp;quot;&lt;/span&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;speak&lt;/span&gt;
  puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Baah! Baah!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# ~/cat.rb&lt;/span&gt;

&lt;span class="comment"&gt;# On the word `speak`, place a file mark with `mC` - `C` for &amp;quot;cat&amp;quot;&lt;/span&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;speak&lt;/span&gt;
  puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Meow! Meow!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# ~/doge.rb&lt;/span&gt;

&lt;span class="comment"&gt;# On the word `speak`, place a file mark with `mD` - `D` for &amp;quot;doge&amp;quot;&lt;/span&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;speak&lt;/span&gt;
  puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Wow! Ahh yes method! Such quality!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;If we are in &lt;code&gt;~/sheep.rb&lt;/code&gt; and want to jump to the &lt;code&gt;speak&lt;/code&gt; method defined
within &lt;code&gt;~/cat.rb&lt;/code&gt;, we can do so with &lt;code&gt;`C&lt;/code&gt;. Now that we&amp;#39;re in &lt;code&gt;~/cat.rb&lt;/code&gt;,
let&amp;#39;s go to the &lt;code&gt;speak&lt;/code&gt; method within &lt;code&gt;~/doge.rb&lt;/code&gt; with &lt;code&gt;`D&lt;/code&gt;.
Pretty sweet, huh?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&amp;quot;X&amp;quot; Marks the Spot&lt;/h2&gt;

&lt;p&gt;Hope you enjoyed the basics of Vim &lt;strong&gt;marks&lt;/strong&gt;. We&amp;#39;ve only covered the basics here, so if
you&amp;#39;d like to learn more check the docs.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Designing Within The Browser</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/04/04/design-within-the-browser.html"/>
    <id>http://reefpoints.dockyard.com/2014/04/04/design-within-the-browser.html</id>
    <published>2014-04-04T00:00:00Z</published>
    <updated>2014-04-17T16:17:35-04:00</updated>
    <author>
      <name>Steven Trevathan</name>
    </author>
    <summary>Make room for accidental progress.</summary>
    <content type="html">&lt;p&gt;I employ a solid range of design tools and although I’m spending some of my time designing in the browser, the ideal of designing &lt;em&gt;entirely&lt;/em&gt; in that context is often unrealistic and stifling.&lt;/p&gt;

&lt;h2&gt;Save time for discovery&lt;/h2&gt;

&lt;p&gt;Sometimes an accident leads to an interesting and useful discovery. In art and design this is especially true. In a browser, unfortunately, accidents don’t pleasantly surprise you in the way &lt;em&gt;”static”&lt;/em&gt; designs may. In development an accident means broken code – plain and simple. You may stumble on a solution, but you’re not going to be surprised by a random glimpse of order and possibility in the muck of your own broken HTML. It’s broken until it’s fixed.&lt;/p&gt;

&lt;p&gt;Such a quality of the web is necessary, but I don’t find it very helpful for discovering new solutions to visual or experience problems. In the early stages you become very focused on minute details when you should be thinking in broad strokes. In later stages you find yourself seeing larger visual problems and with less power to change it. In many ways, I find designing in the browser akin to designing in the dark.&lt;/p&gt;

&lt;p&gt;There are plenty of browser based design tools attempting to free designers of heavy weights such as Photoshop and allow designers to work without learning advanced HTML and CSS. This is a positive direction, but I still haven’t seen the problem solved without losing the element of discovery. Instead of happy accidents, you may experience a gross misunderstanding between your intent, the front end code of the tool you’ve chosen, and the DOM. Maybe the tools will get better, and I’m sure they will, but I’m not optimistic they’ll be architected to facilitate discovery within the next few years.&lt;/p&gt;

&lt;p&gt;For the time being my opinion is that, in terms of process, improvements in web standards and web technology aren’t going to change anything save for ensuring work may be completed in shorter order. We create tools (or products) and advance technology in order to &lt;em&gt;increase&lt;/em&gt; efficiency and &lt;em&gt;improve&lt;/em&gt; human capability. The computer added efficiency for designers by - among many, many other things - being faster and more forgiving than pen and ink, but we still use these older technologies today in tandem with computers.&lt;/p&gt;

&lt;h2&gt;The right tool at the right time&lt;/h2&gt;

&lt;p&gt;We can still integrate designing in the browser as a component of the design process. I don’t view this as an all–or–nothing deal and our process should be malleable enough to better facilitate reaching the goals of each and every project. Imagine, as an extreme example, that you were told to integrate sketching into your design process. You would absolutely not render your designs “pixel-perfect” in a sketch book. It beats the whole point of the sketch book and the whole experience would be tremendously debilitating. Instead, you’d probably do at least a little bit of preliminary sketching before opening Photoshop, and return when you need to massage another idea out of your head.&lt;/p&gt;

&lt;p&gt;The benefit of designing in the web, or at least getting a product in the browser sooner, is that you can experience it and identify major problems before you’re past the point of no return. This is a pretty well established idea (that I believe in), but just like using the sketchbook we need to identify when it’s appropriate to pop open a text editor and start punching in markup and styles. I’ll kick this off with two cases where I think designing in the browser is appropriate: prototyping unique interactions and defining visual state changes.&lt;/p&gt;

&lt;h3&gt;Prototyping unique interactions&lt;/h3&gt;

&lt;p&gt;We should prototype and test core product interactions when they are unorthodox. Design patterns should be used where possible, but if we are knowingly going against the grain we need to test that experience in the browser and with users (as available) before making it permanent. This is sometimes after the static design has been completed, but in many cases can be done before anything static has been created.&lt;/p&gt;

&lt;h3&gt;Visual state changes&lt;/h3&gt;

&lt;p&gt;When following design patterns there are still standard things to be fleshed out in the browser: hovers, presses, clicks, fades, sliding interactions, and so on. Generally, if you don’t know how an interaction will truly feel and it involves a state change: design it in the browser. At DockYard, we often propose a solution first in Photoshop and then weigh our options again in the browser. &lt;/p&gt;

&lt;h2&gt;An example&lt;/h2&gt;

&lt;p&gt;We completed a project last year with the ambition of the design stage being completely browser based, skipping the use of Photoshop altogether. The benefits of having a usable front end in place of static mockups are great: you can use your app as it is being designed and get a sense of the failure points before they become too ingrained in the experience. User testing can begin earlier. This is awesome. From the outside, designing solely in the browser seemed perfect.&lt;/p&gt;

&lt;p&gt;You guessed it: I was wrong. It wasn&amp;#39;t right for us then, nor for that project. We were less focused on the user’s experience and more focused on the organization and creation of markup, styles, and script. We began (and ended) by worrying about and writing lines of HTML, CSS, and JavaScript. We were worried about front end patterns, but the design patterns we were aiming to support weren’t fully identified yet. We introduced somewhat of a chicken and the egg problem, making our thinking more difficult and more sporadic than it should have been.&lt;/p&gt;

&lt;p&gt;For us this meant spending hours and hours tweaking markup, all in the name of being able to feel and test the product as it was created. In some cases, for sure, this can be worth it. In our case we even had plenty of existing design assets to base our web interface off of, but that project had called for too many largely different iterations (and mixed opinions) of the same few designs.&lt;/p&gt;

&lt;p&gt;Designing in the browser does not mean your project will turn out poorly. Ultimately, and fortunately, that project turned out well in the end, but we did spend a lot more time getting a complete idea of what we were actually designing and building. Our clients got to use the product before they bought into the concept, which was great for them. For us, however, it was as if we started designing a house by laying the concrete foundation before knowing what we were building.&lt;/p&gt;

&lt;h2&gt;Weigh your options&lt;/h2&gt;

&lt;p&gt;A successful product depends on its content, design, engineering, market fit, team, tools, and infinitely more. When consulting, those elements are wildly varied from client to client, including the toolset. So we must be mindful of what is necessary, be malleable in our processes, and most important of all: make room for discovery.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Magic behind ES6 Generators</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/03/30/magic_behind_es6_generators.html"/>
    <id>http://reefpoints.dockyard.com/2014/03/30/magic_behind_es6_generators.html</id>
    <published>2014-03-30T00:00:00Z</published>
    <updated>2014-03-31T13:29:10-04:00</updated>
    <author>
      <name>Alex Navasardyan</name>
    </author>
    <summary>Overview of ES6 generators</summary>
    <content type="html">&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;The next version of JavaScript (ES6 or ES.next) is going to have a lot of
great features built in that are going to make developer&amp;#39;s life much easier.
&lt;a href="http://wiki.ecmascript.org/doku.php?id=strawman:promises"&gt;Promises&lt;/a&gt;,
&lt;a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules"&gt;Modules&lt;/a&gt;,
&lt;a href="http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps"&gt;WeakMaps&lt;/a&gt;,
&lt;a href="http://wiki.ecmascript.org/doku.php?id=harmony:generators"&gt;Generators&lt;/a&gt; to name a few. In this
post I want to talk about generators.&lt;/p&gt;

&lt;p&gt;Generators are objects that encapsulate suspended execution context. What the heck does it mean?
In other words, generators allow you to pause execution of your code and return a value.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say you need to write a &lt;code&gt;cubic&lt;/code&gt; function (for any given number, calculate a cubic number)
and then print it out.&lt;/p&gt;

&lt;p&gt;Code without generators for 10 numbers:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;out&lt;/span&gt;(n) {
  console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Cubic number:&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, n);
}

&lt;span class="keyword"&gt;function&lt;/span&gt; *cube(n) {
  n = n * &lt;span class="integer"&gt;3&lt;/span&gt;;
  out(n);
}

&lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; i = &lt;span class="integer"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="integer"&gt;10&lt;/span&gt;; i++) {
  cube(i);
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Code with ES6 generators for 10 numbers:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; *cube(n) {
  &lt;span class="keyword"&gt;var&lt;/span&gt; i = &lt;span class="integer"&gt;0&lt;/span&gt;, j = n;
  &lt;span class="keyword"&gt;while&lt;/span&gt; (i &amp;lt; n) {
    i++;
    j = j * &lt;span class="integer"&gt;3&lt;/span&gt;;
    yield j;
  }
}

&lt;span class="keyword"&gt;var&lt;/span&gt; c = cube(&lt;span class="integer"&gt;10&lt;/span&gt;);
&lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; i = &lt;span class="integer"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="integer"&gt;10&lt;/span&gt;; i++) {
  console.log(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Cubic number:&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, c.next().value);
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can you spot the difference? Generator represents a sequence of numbers and every time you call
&lt;code&gt;next()&lt;/code&gt; it gives you the next number in the sequence (it actually gives you an object back
with two properties: &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;c.next(); &lt;span class="comment"&gt;// =&amp;gt; { value: 3, done: false }&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once the limit is reached, generator will return:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;c.next(); &lt;span class="comment"&gt;// =&amp;gt; { value: undefined, done: true }&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Pretty cool, eh?&lt;/p&gt;

&lt;p&gt;Note, that generators look &lt;em&gt;just&lt;/em&gt; like functions, but with &lt;code&gt;*&lt;/code&gt;s:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// regular function&lt;/span&gt;
&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;cube&lt;/span&gt;()  {}

&lt;span class="comment"&gt;// es6 generator&lt;/span&gt;
&lt;span class="keyword"&gt;function&lt;/span&gt; *cube() {}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;re a Python developer, generators and &lt;code&gt;yield&lt;/code&gt; are not new to you. But it&amp;#39;s a big step forward
for JavaScript.&lt;/p&gt;

&lt;h2&gt;For-Of&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;for of&lt;/code&gt; loop is a new iteration construct in ES6 which supports generators. This is really for
performance purposes. Instead of returning a full array, you can just return a generator which
lazily gives values back on each iteration. That decreases memory allocation and you can express
infinite data structures (since no array allocation is needed).&lt;/p&gt;

&lt;p&gt;A really interesting use case for generators is async operations:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;spawn(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="keyword"&gt;var&lt;/span&gt; users = yield db.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; posts = yield db.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;posts&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;spawn&lt;/code&gt; is a function in &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt; that allows you to create child processes.
You can read about it &lt;a href="http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;spawn&lt;/code&gt; hands control over the function to the scheduler, which knows that the function will &lt;code&gt;yield&lt;/code&gt;
promises and will send the values back as soon as the promises are going to be resolved (fulfilled).&lt;/p&gt;

&lt;p&gt;This is really powerful.&lt;/p&gt;

&lt;h2&gt;Availability&lt;/h2&gt;

&lt;p&gt;If you really want to use this feature, you&amp;#39;re going to have to use transpilers, such as &lt;a href="https://github.com/google/traceur-compiler"&gt;Traceur&lt;/a&gt;
or &lt;a href="https://github.com/facebook/regenerator"&gt;Regenerator&lt;/a&gt;. The reason for that is two new language keywords
introduced by ES6 generators: &lt;code&gt;yield&lt;/code&gt; and &lt;code&gt;function *&lt;/code&gt;. There&amp;#39;s a really good blog post about &lt;a href="http://gu.illau.me/posts/polyfilling-generators/"&gt;polyfilling generators&lt;/a&gt;
that goes in depth about how transpilers deal with the new syntax.&lt;/p&gt;

&lt;p&gt;Native implementations of generators are available in Firefox and Chrome Canary
(you will need to enable &lt;a href="chrome://flags/#enable-javascript-harmony"&gt;harmony experimental flag&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I encourage you to play around with the generators and get familiar with the syntax because in couple of
years from now, we all will be writing code using generators (hopefully).&lt;/p&gt;

&lt;p&gt;P.S.&lt;/p&gt;

&lt;p&gt;Great article about &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.7#Generators"&gt;ES6 generators&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Conf picks up where the Rails community left off</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/03/17/emberconf-picks-ups-where-the-rails-community-left-off.html"/>
    <id>http://reefpoints.dockyard.com/2014/03/17/emberconf-picks-ups-where-the-rails-community-left-off.html</id>
    <published>2014-03-17T00:00:00Z</published>
    <updated>2014-03-27T14:33:01-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>A summary of the first Ember Conference</summary>
    <content type="html">&lt;p&gt;I&amp;#39;m writing this on my flight from Portland back to Boston. On this
plane I count at least 12 other attendees of the first &lt;a href="http://emberconf.com"&gt;Ember Conference&lt;/a&gt;.
A lot has been said about Ember in the past year but if this conference
was any indicator big things are happening and even bigger things are
going to happen.&lt;/p&gt;

&lt;p&gt;For me, the biggest take away from any conference is the people and
this conference was no exception. In fact, Ember Conf is now my gold
standard for a technology event. The only possible comparison I have is
how early Rails Confs felt. There is an energy and a scary amount of
creativity happening in the Ember community right now. Much like the
community felt around Rails back in 2006 - 2009 there is the
understanding that those doing Ember now are going to be shaping the
future of the web. Whether that is setting the bar higher for how users
will want to consume web applications in the future or being a large
influence on what the future of the web standards themselves will be, Ember
is the only web technology today that is positioned in the same place
that I feel Rails was years ago. We are the rebels. We are the
counter-culture. Ember is the future.&lt;/p&gt;

&lt;p&gt;But, we&amp;#39;re learning from the mistakes of the past. Where the Rails
community was the counter-culture of its time it suffered from a male
(and very juvenile) dominated culture. This culture was the result of
the &amp;quot;RockStar&amp;quot; mentality set forth by its leader(s). Ember, in contrast,
began its very first conference with Yehuda Katz and Tom Dale addressing
the entire crowd with their desire for Ember to be an open and diverse
community.&lt;/p&gt;

&lt;p&gt;The conference was very well organized, big shoutout to Leah Silber at Tilde. She
put on a great conference, I&amp;#39;m proud that my company had the opportunity
to help make it happen.&lt;/p&gt;

&lt;p&gt;From a technology perspective &lt;strong&gt;huge&lt;/strong&gt; things are on the horizon for
Ember. If you have been on the cusp of getting involved you will be
kicking yourself later for not doing so now. If you are already building
in Ember nearly all of the pain-points that have existed will be
addressed in the next 6 months. Testing as a first class citizen,
fastest template rendering of any JavaScript framework/tool out there,
animation support, query params, a standardized project structure and
build tool, and there was even talk of how we&amp;#39;re going to package and
distribute dependencies. Ember Conf was a continuous roll of one great
talk after another loaded with the best tech on the web. I&amp;#39;ve already
really enjoyed writing Ember apps for the past year, the next year will
be amazing.&lt;/p&gt;

&lt;p&gt;I realize at this point the article smacks of cheerleading optimism. How
can it be this good? The real secret weapon of any open source software
is its community. After this week I can tell you that I have not felt
this way about a community since the early days of Rails. There is
something very special happening here. It isn&amp;#39;t just me. &lt;a href="https://twitter.com/search?q=%23emberconf&amp;amp;src=tyah"&gt;Go search
Twitter for &lt;code&gt;#EmberConf&lt;/code&gt; and see for
yourself&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;People are crying, having
spiritual awakenings and overall life-affirming moments at &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
… Think I want whatever’s in their punch&lt;/p&gt;&amp;mdash; Rob Conery
(@robconery) &lt;a
href="https://twitter.com/robconery/statuses/449041727240695808"&gt;March
27, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;IT’S HAPPENING!! HTMLbars
eliminates &amp;lt;script&amp;gt; tags, {{bindAttr}}, and gives Ember the
fastest bound templates on the planet. &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Tom Dale (@tomdale) &lt;a
href="https://twitter.com/tomdale/statuses/448621833953083392"&gt;March 26,
2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;This scene with &lt;a
href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt; &lt;a
href="https://twitter.com/tehviking"&gt;@tehviking&lt;/a&gt; and &lt;a
href="https://twitter.com/fivetanley"&gt;@fivetanley&lt;/a&gt; sums up &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
- so much love ❤️❤️❤️ &lt;a
  href="http://t.co/AEUEeiq97i"&gt;pic.twitter.com/AEUEeiq97i&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Dan Gebhardt (@dgeb) &lt;a
href="https://twitter.com/dgeb/statuses/449088566962814976"&gt;March 27,
2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Ember makes you a badass
web developer. The productivity gains are unparalleled. Page flow is
first class. &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
&lt;a
href="http://t.co/DlKqmmdVEU"&gt;pic.twitter.com/DlKqmmdVEU&lt;/a&gt;&lt;/p&gt;&amp;mdash;
John K. Paul (@johnkpaul) &lt;a
href="https://twitter.com/johnkpaul/statuses/448510256097001472"&gt;March
25, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Notes on the morning &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
keynote by &lt;a href="https://twitter.com/wycats"&gt;@wycats&lt;/a&gt; &lt;a
href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt; &lt;a
href="http://t.co/rYKEruaxRe"&gt;pic.twitter.com/rYKEruaxRe&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Michael Chan (@chantastic) &lt;a
href="https://twitter.com/chantastic/statuses/448517744900976641"&gt;March
25, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;hug &lt;a
href="https://twitter.com/tomdale"&gt;@tomdale&lt;/a&gt; achievement unlocked &lt;a
href="https://twitter.com/search?q=%23emberconf&amp;amp;src=hash"&gt;#emberconf&lt;/a&gt;
&lt;a
href="http://t.co/nLOBPGJwKL"&gt;pic.twitter.com/nLOBPGJwKL&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Ben Rosas (@ballPtPenguin) &lt;a
href="https://twitter.com/ballPtPenguin/statuses/449000521211203586"&gt;March
27, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&lt;a
href="https://twitter.com/ebryn"&gt;@ebryn&lt;/a&gt; &lt;a
href="https://twitter.com/EmberConf"&gt;@EmberConf&lt;/a&gt; Such a wonderful
experience. One of the best conferences I&amp;#39;ve ever attended, it was
like one big family finally united.&lt;/p&gt;&amp;mdash; Kasper Tidemann
(@KasperTidemann) &lt;a
href="https://twitter.com/KasperTidemann/statuses/449044965855723520"&gt;March
27, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js"
charset="utf-8"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>Using Database Templates in Rails</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/03/03/using-database-templates.html"/>
    <id>http://reefpoints.dockyard.com/2014/03/03/using-database-templates.html</id>
    <published>2014-03-03T00:00:00Z</published>
    <updated>2014-03-15T16:02:38-04:00</updated>
    <author>
      <name>Romina Vargas</name>
    </author>
    <summary>Discover a helpful Postgres config option</summary>
    <content type="html">&lt;p&gt;Using Postgres as your application&amp;#39;s database? If so, there is a handy
configuration option that you may not be aware about. The &lt;code&gt;pg&lt;/code&gt; gem provides a &lt;code&gt;template&lt;/code&gt; option that
allows for copying already existing data into an application as
long as you have matching schema. &lt;/p&gt;

&lt;p&gt;To add this functionality, simply add the &lt;code&gt;template&lt;/code&gt; option inside &lt;code&gt;config/database.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight yaml "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="key"&gt;development&lt;/span&gt;:
  &lt;span class="key"&gt;adapter&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;postgresql&lt;/span&gt;&lt;/span&gt;
  &lt;span class="key"&gt;encoding&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;unicode&lt;/span&gt;&lt;/span&gt;
  &lt;span class="key"&gt;database&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;myapp_development&lt;/span&gt;&lt;/span&gt;
  &lt;span class="key"&gt;template&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;my_template&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s go through a quick example. Suppose we have an existing database, &lt;code&gt;food&lt;/code&gt;, and it contains an abundant amount of data with the
following schema:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;foods: name (string), category_id (integer)
categories: category (string)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To use the &lt;code&gt;food&lt;/code&gt; database for our application, we are going to
create a template by specifying our database with the following command: &lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;createdb -T food my_food_template
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We must now set up our Rails application and make sure that our schema matches
that of our new template. Our Rails models will mimick &lt;code&gt;food&lt;/code&gt;. Having done
that, we can now modify our &lt;code&gt;config/database.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight yaml "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="key"&gt;database&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;myapp_development&lt;/span&gt;&lt;/span&gt;
&lt;span class="key"&gt;template&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;my_food_template&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Run migrations and voilà! Our database has been populated and is ready to be used.&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;gt; psql myapp_development

&amp;gt; select * from foods;
  id |  name  | category_id
  --------------------------
  1   apple       1
  2   banana      1
  3   spinach     2
  4   ice cream   3

&amp;gt; select * from categories;
  id |  category
  --------------
  1   fruit
  2   vegetable
  3   other
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>A Simple Ember Data Route</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/03/03/a-simple-ember-data-route.html"/>
    <id>http://reefpoints.dockyard.com/2014/03/03/a-simple-ember-data-route.html</id>
    <published>2014-03-03T00:00:00Z</published>
    <updated>2014-03-02T23:31:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>A basic pattern for routes with Ember Data content</summary>
    <content type="html">&lt;p&gt;When working with an Ember Data model it is easy to forget to properly
handle the teardown of that model. For example, if you are creating a
new model and the user hits the backbutton that model is still in the
local &lt;code&gt;store&lt;/code&gt;. Or if a user edits a model and decides to click the
&lt;code&gt;Cancel&lt;/code&gt; button or clicks a link that transitions out of this route
without saving the model. A basic approach can be as simple as:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.DSModelRoute = Ember.Route.extend({
  &lt;span class="function"&gt;deactivate&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;var&lt;/span&gt; model = &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller.model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    model.rollback();
    &lt;span class="keyword"&gt;if&lt;/span&gt; (model.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;isNew&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)) {
      model.deleteRecord();
    }
  },
  &lt;span class="key"&gt;actions&lt;/span&gt;: {
    &lt;span class="function"&gt;willTransition&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(transition) {
      &lt;span class="keyword"&gt;var&lt;/span&gt; model = &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller.model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
      &lt;span class="keyword"&gt;if&lt;/span&gt; (model.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;isDirty&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &amp;amp;&amp;amp; !confirm(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;You have unsaved changes. They will be lost if you continue!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)) {
        transition.abort();
      }
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Routes inherited from &lt;code&gt;Ember.DSModelRoute&lt;/code&gt; will always clean up after themselves. If the user has unsaved changes and attempts to leave the current route 
the app will guard against the transition and allow the user to confirm with a notice that changes will be lost.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Native App Developers: We Can Help You</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/02/07/native-app-developers-we-can-help-you.html"/>
    <id>http://reefpoints.dockyard.com/2014/02/07/native-app-developers-we-can-help-you.html</id>
    <published>2014-02-07T00:00:00Z</published>
    <updated>2014-02-07T15:02:14-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>Have an existing application? We can help you out!</summary>
    <content type="html">&lt;p&gt;If you have an existing app, and are looking for a server component,
whether it be adding a syncing service to your app, building out a web
version to extend your user experience, or need a site to showcase your
app, we have both the design and development resources to make that
happen.&lt;/p&gt;

&lt;p&gt;You might have realized that iCloud doesn&amp;#39;t fit your needs, or you want
a web application that interacts with your app. We can build your API to
fit your exact needs, so you don&amp;#39;t need to fight iCloud to fit your
needs. You may be looking to build out a new RSS service that needs to
parse and cache RSS feeds. We have the experience and resources that
will help you bring a server heavy component to your app.&lt;/p&gt;

&lt;p&gt;You may have users looking to use your application when they aren&amp;#39;t on
their phone. We can design and build a rich web application that brings your
app to the browser without losing the spirit of your app. You might need
a marketing site with video demos and screenshots of your app. We can
design and build a site that really shows off your application.&lt;/p&gt;

&lt;p&gt;If any of these sound like you, you should &lt;a href="http://dockyard.com/hire-us"&gt;get in touch with
us&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Announcing PostgresExt-PostGIS</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/02/07/announcing-postgres_ext-postgis.html"/>
    <id>http://reefpoints.dockyard.com/2014/02/07/announcing-postgres_ext-postgis.html</id>
    <published>2014-02-07T00:00:00Z</published>
    <updated>2014-02-08T05:22:34-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>PostgresExt-PostGIS adds PostGIS support to ActiveRecord</summary>
    <content type="html">&lt;p&gt;Today I released the first version of
&lt;a href="https://github.com/dockyard/postgres_ext-postgis"&gt;postgres_ext-postgis&lt;/a&gt;, which
extends ActiveRecord to support PostGIS data types and some querying.
This is definitely a beta release, but ready to the point where people
can play around with it.&lt;/p&gt;

&lt;h2&gt;Migrations&lt;/h2&gt;

&lt;p&gt;With postgres_ext-postgis, you can easily add geometry columns:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;create_table &lt;span class="symbol"&gt;:districts&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
  t.geometry &lt;span class="symbol"&gt;:district_boundries&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;d like to include your projection or geometry type, just include
them as options to your column:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;create_table &lt;span class="symbol"&gt;:districts&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
  t.geometry &lt;span class="symbol"&gt;:district_boundries&lt;/span&gt;, &lt;span class="key"&gt;spatial_type&lt;/span&gt;: &lt;span class="symbol"&gt;:multipolygon&lt;/span&gt;, &lt;span class="key"&gt;srid&lt;/span&gt;: &lt;span class="integer"&gt;4326&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Type Casting&lt;/h2&gt;

&lt;p&gt;Your geometry columns will be typecasted into
&lt;a href="http://dazuma.github.io/rgeo/"&gt;RGeo&lt;/a&gt; objects. You can set your
attributes with RGeo objects or EWKT/EWKB strings. EWKT/EWKB strings
will be converted to RGeo objects:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;user.location = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;SRID=4623;POINT(1 1)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Querying&lt;/h2&gt;

&lt;p&gt;For now, the only added querying method for ActiveRecord is &lt;code&gt;contains&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;District&lt;/span&gt;.where.contains(&lt;span class="key"&gt;district_boundries&lt;/span&gt;: user.location)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above query will utilize PostGIS&amp;#39;s &lt;code&gt;ST_CONTAINS&lt;/code&gt; to see if the
&lt;code&gt;district_boundries&lt;/code&gt; column contains the &lt;code&gt;user.location&lt;/code&gt;. I plan to add
a convience method to convert EWKT strings to RGeo object, something
like &lt;code&gt;PostgreExt.geom(&amp;#39;SRID=4623;POINT(1 1)&amp;#39;)&lt;/code&gt;, to make generating
queries from, say, a mobile user&amp;#39;s current location a bit easier.&lt;/p&gt;

&lt;p&gt;As I get feedback and use postgres_ext-postgis, more features will get
added. Stay tuned!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Conf: Ember for Rails Devs</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/02/04/ember-conf-ember-for-rails-devs.html"/>
    <id>http://reefpoints.dockyard.com/2014/02/04/ember-conf-ember-for-rails-devs.html</id>
    <published>2014-02-04T00:00:00Z</published>
    <updated>2014-03-27T12:56:05-04:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Join our one day training session prior to Ember Conf in Portland, Oregon</summary>
    <content type="html">&lt;p&gt;&lt;a href="http://emberconf.com/"&gt;&lt;img src="http://emberconf.com/images/header.png" alt="EmberConf"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We invite you to learn from DockYard for a day before &lt;a href="http://emberconf.com"&gt;Ember Conf&lt;/a&gt; in Portland, Oregon. We will be offering a one day training session for Ruby on Rails developers interested in
learning how to build Ember Applications. Over the course of the day we
will teach you the following:&lt;/p&gt;

&lt;h4&gt;Introduction to Higher Level JavaScript Concepts&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;ES6 Modules&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Introduction to Ember Concepts&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Client side MVC&lt;/li&gt;
&lt;li&gt;Ember.Object&lt;/li&gt;
&lt;li&gt;All the stuff under the hood of Router, Routes, Models, Controllers,
Components, Templates, and the Runloop&lt;/li&gt;
&lt;li&gt;Ember Data&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Introduction to Ember Appkit Rails&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;How to build a new Ember project with Rails&lt;/li&gt;
&lt;li&gt;Generators&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Together we wil build two applications before the day is over. The first
will be a simple CRUD &amp;quot;blog&amp;quot; style application. Time permitting the second will be 
a more advanced desktop-quality style applicaiton.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberconf.com/"&gt;Seats are limited, be sure to get your ticket before they sell
out!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;About The Instructors&lt;/h2&gt;

&lt;h4&gt;Brian Cardarella&lt;/h4&gt;

&lt;p&gt;Brian is the CEO of DockYard and has been developing in Ember since late
2012. He was a &lt;a href="https://www.youtube.com/watch?v=wmQovdFoMm0"&gt;speaker at the &amp;quot;first&amp;quot; Ember conference, Ember Camp, in
      2013&lt;/a&gt;.
      Brian is the author of some popular Ember libraries such as
&lt;a href="https://github.com/dockyard/ember-validations"&gt;ember-validations&lt;/a&gt; and &lt;a href="https://github.com/dockyard/ember-easyForm"&gt;ember-easyForm&lt;/a&gt;. Recently he has been focusing most
of his open source time on building &lt;a href="https://github.com/dockyard/ember-appkit-rails"&gt;Ember Appkit
Rails&lt;/a&gt;, which is a
re-implementation of &lt;a href="https://github.com/stefanpenner/ember-app-kit"&gt;Ember App
Kit&lt;/a&gt; for the Rails Asset Pipeline.&lt;/p&gt;

&lt;h4&gt;Robert Jackson&lt;/h4&gt;

&lt;p&gt;Robert is a Sr. Developer at DockYard. He is a member of the Ember Release Management Team and a significant contributor to Ember. He spends much of his free time helping maintain a number of Ember related open-source projects including: &lt;a href="https://github.com/emberjs/data"&gt;Ember Data&lt;/a&gt;, &lt;a href="https://github.com/dockyard/ember-appkit-rails"&gt;Ember Appkit Rails&lt;/a&gt;, &lt;a href="https://github.com/stefanpenner/ember-app-kit"&gt;Ember App Kit&lt;/a&gt;, the &lt;a href="https://github.com/stefanpenner/ember-jj-abrams-resolver"&gt;EAK/EAKR resolver&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember-rails"&gt;ember-rails&lt;/a&gt;, &lt;a href="https://github.com/dockyard/ember-easyForm"&gt;ember-easyForm&lt;/a&gt;, and &lt;a href="https://github.com/dockyard/ember-validations"&gt;ember-validations&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Romina Vargas is a DockYarder!</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/01/02/romina-vargas-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/2014/01/02/romina-vargas-is-a-dockyarder.html</id>
    <published>2014-01-02T00:00:00Z</published>
    <updated>2014-02-03T20:12:13-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary/>
    <content type="html">&lt;p&gt;&lt;img src="/images/rvargas.jpg" alt="Romina Vargas"&gt;&lt;/p&gt;

&lt;p&gt;Romina was a DockYard intern that we just recently hired to full-time!
Over the past few months Romina has taken on all of the challenges we&amp;#39;ve
thrown at her and excelled. Now she&amp;#39;s TDD&amp;#39;ing, Vim&amp;#39;ing, Tmux&amp;#39;ing,
Ember&amp;#39;ing with the best of them. She&amp;#39;s also the co-author of the
exciting new Ember application that is all the buzz: &lt;a href="http://pizza-time.herokuapp.com"&gt;Pizza
Time&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rsocci"&gt;Follow Romina on GitHub&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Robert Jackson is a DockYarder</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/01/02/robert-jackson-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/2014/01/02/robert-jackson-is-a-dockyarder.html</id>
    <published>2014-01-02T00:00:00Z</published>
    <updated>2014-01-02T14:00:32-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary/>
    <content type="html">&lt;p&gt;&lt;img src="/images/rjackson.jpg" alt="Robert Jackson"&gt;
Today is Robert Jackson&amp;#39;s first day at DockYard. Robert is joining our
team as a Sr. Rails and Sr. Ember developer by way of Florida (but he&amp;#39;ll
soon be joining us in the Northeast). Robert is a member of the Ember
Release Management Team and has been saving my ass with several of our
open source Ember projects over the past few months.&lt;/p&gt;

&lt;p&gt;Follow Robert on &lt;a href="http://twitter.com/rwjblue"&gt;Twitter&lt;/a&gt; and
&lt;a href="https://github.com/rjackson"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Lin Reid is a DockYarder!</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2014/01/02/lin-reid-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/2014/01/02/lin-reid-is-a-dockyarder.html</id>
    <published>2014-01-02T00:00:00Z</published>
    <updated>2014-02-03T20:12:13-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary/>
    <content type="html">&lt;p&gt;&lt;img src="/images/lreid.jpg" alt="Lin Reid"&gt;&lt;/p&gt;

&lt;p&gt;Lin comes to us from Alaska. Normally that is all that you need to say
but Lin also brought us jerked-bear (actual Alaskan black bear) on his first day with us as an
intern. From there it was easy street. Lin&amp;#39;s published his own
&lt;a href="https://github.com/dockyard/stashable_params"&gt;gem&lt;/a&gt;,
contributed back to several of our projects, and has been expanding his
developer horizons with Ember over the past few months. He is also the
&lt;em&gt;co-founder&lt;/em&gt; of &lt;a href="http://pizza-time.herokuapp.com"&gt;Pizza Time&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow Lin on &lt;a href="https://twitter.com/linstula"&gt;Twitter&lt;/a&gt; and on &lt;a href="https://github.com/linstula"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Lessons Learned: The First Two Years of Running a Software Consultancy</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/12/22/lessons-learned-two-years-of-running-a-dockyard.html"/>
    <id>http://reefpoints.dockyard.com/2013/12/22/lessons-learned-two-years-of-running-a-dockyard.html</id>
    <published>2013-12-22T00:00:00Z</published>
    <updated>2013-12-28T20:21:24-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Brian talks about what has worked, what has not worked, and the changes that have been made at DockYard during its first two years</summary>
    <content type="html">&lt;p&gt;This is an update of &lt;a href="/opinion/2012/06/21/lessons-learned-six-month-of-running-dockyard.html"&gt;the previous post that reflected on the first six
months of DockYard&lt;/a&gt;.
A lot has changed over the past year and a half, and a lot has not. I
won&amp;#39;t do a point-by-point comparison to the previous post but I will
address some as well as some of the feedback I got at the time. But
first, let&amp;#39;s talk about revenue.&lt;/p&gt;

&lt;h2&gt;Revenue&lt;/h2&gt;

&lt;p&gt;After our first year we took in about $750,000 in revenue. DockYard
officially began in January of 2012  so we had a full calendar year to
earn. From what I&amp;#39;ve been told this is pretty good for the first year as
a consultancy. In our second year we broke $1,500,000 at the beginning
of December. I&amp;#39;m happy with that, we doubled revenue. I have set a
revenue goal of $2,500,000 for 2014. Assuming there are no major screw ups
next year we should exceed that goal.&lt;/p&gt;

&lt;p&gt;Revenue is great and all but kind of useless information without our
profit margin. We have averaged around 20% profit margin over the past
two years. This year we were averaging in the mid to high 20s before we
hit a lull at the end of November.&lt;/p&gt;

&lt;h3&gt;The Negative Stuff&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s get the negative stuff out of the way first so we can focus on positives
for the remainder of the post. We could have done better the previous year, we could have done better
this year. We lost money due to decisions that I made throughout the
past two years. Those choices include two bad clients, a mistake in the
direction of our growth, and a lack of experience of running a
conference.&lt;/p&gt;

&lt;h3&gt;Bad Clients&lt;/h3&gt;

&lt;p&gt;In the previous post I mentioned how DockYard nearly folded from the
start due to a bad client. That nightmare lasted for a year and half and
was finally settled in June of this year. It ended up being nearly a
$50,000 loss for us. I am convinced this is due entirely to poor legal
counsel; I cannot stress enough how important it is to have a competent
lawyer on your side. We didn&amp;#39;t have someone that was willing to fight
for us, it cost us big time. We have since retained the law firm of
&lt;a href="http://gesmer.com"&gt;Gesmer Updegrove&lt;/a&gt;. They&amp;#39;re pricey, but it&amp;#39;s worth it.&lt;/p&gt;

&lt;p&gt;However, before we ever engaged with our current lawyer we unfortunately
had another run with a bad client. This time to the tune of $20,000.
That hit came this year. What is really strange is that I knew walking
into this deal it was going to end badly, and I voiced my concerns
internally to my people at the time but I still OK&amp;#39;d the deal and it
unfolded just as I thought it would. It was a dumb move and we paid the
price of it.&lt;/p&gt;

&lt;p&gt;One of the plans for DockYard was to quickly grow into the political
tech space in Washington, DC. I have experience working in political
tech, I brought on a guy who I worked with at the DNC, and we hired another
guy I worked with on a political campaign. We started making
connections. It didn&amp;#39;t work out. Three reasons:&lt;/p&gt;

&lt;h4&gt;Timing&lt;/h4&gt;

&lt;p&gt;Timing is everything I guess. Especially in political tech, we set out
on this effort right when the 2012 cycle ended. It was a ghost town, and
rightly so. There is no reason for campaigns or political groups to
spend money on development efforts when the next election cycle is two
years away. While we spoke with a lot of people that were interested in
what we could do from a technical perspective there simply were very
little groups without any budget at the time.&lt;/p&gt;

&lt;h4&gt;The People&lt;/h4&gt;

&lt;p&gt;During my time at the DNC I worked with some awesome people. Nathan Woodhull,
Chris Gill, Brent Kimmel, Leo Zhadanovsky, and Nicole Aro to name a few.
I&amp;#39;ve been lucky enough to work with a few of them since. Unfortunately I
also got to work with some really shitty people too. I don&amp;#39;t think its
their fault, the political tech space is a real drag. It doesn&amp;#39;t 
attract a lot of talented people because the money to work on the inside
is very bad compared with any other job out there. The tone you get is
that it is a privilege that you should be thankful for, and perhaps
that is the case. But that leaves a vacuum that gets filled with people
that frankly don&amp;#39;t know their ass from a hole in the ground. Many of these
people are now in charge of making technology decisions in many
organizations. I have no interest in working with those types of people
again, nor do I want to subject my employees to work with them.&lt;/p&gt;

&lt;h4&gt;Politics&lt;/h4&gt;

&lt;p&gt;I&amp;#39;ve always considered myself &amp;quot;on the Blue team&amp;quot; but the past year has
really pissed me off. NSA, Healthcare.gov, drone strikes, and the
President trying everything he can muster to go to war with Syria. I
walked into our Business Developer&amp;#39;s office one day and I said enough was
enough. I could not in good conscience do work for the Democratic Party
because of these issues.&lt;/p&gt;

&lt;h3&gt;Just Dumb Wasted Money&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://wickedgoodruby.com"&gt;We ran a conference this year&lt;/a&gt; and due to my
lack of experience running an event like this (and to be honest, being
taken advantage of by the venue we held the conference at) we lost $15,000.&lt;/p&gt;

&lt;p&gt;There were also downtimes when we didn&amp;#39;t have enough money coming in,
but I will get into detail about this later in this post. (and the
changes we&amp;#39;ve made to hopefully avoid this in the future)&lt;/p&gt;

&lt;p&gt;Overall I am pretty proud with our revenue over the past two years.
We didn&amp;#39;t start with an &amp;quot;industry superstar&amp;quot; on our team or with a
significant open source project in our pocket, nor were we on the &amp;quot;inside&amp;quot; of
the Boston tech scene. We&amp;#39;ve built a very strong brand for ourselves
very quickly.&lt;/p&gt;

&lt;h3&gt;Open Source&lt;/h3&gt;

&lt;p&gt;This is still a financial loser for us. I don&amp;#39;t care what people say, that&amp;#39;s a
fact. However, &lt;a href="https://twitter.com/peteforde"&gt;Pete Forde&lt;/a&gt; commented on
my last post and what he said was absolutely true: it will help you hire
good people. DockYard has been making a name for itself in the Ruby and
Ember open source world. We have a good number of projects that people
are actively using. I encourage all of our developers to contribute back
to not just our projects but projects we use on a regular basis.&lt;/p&gt;

&lt;h3&gt;Personnel&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ve made missteps on hirings, that is also costly. I&amp;#39;ll get into this
later in the article.&lt;/p&gt;

&lt;p&gt;OK, enough with the negative stuff. Let&amp;#39;s get into what we did right.&lt;/p&gt;

&lt;h2&gt;Great Clients&lt;/h2&gt;

&lt;p&gt;We have had some awesome clients over the past year and a half. I am
pretty much happy with everyone we&amp;#39;ve had with the exception of the two
clients I mentioned above. We have kept a balance of Startups and
Enterprise, but we have been very careful about the people we work with.
This is how I have boiled it down to the clients we want to work with:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Can they afford us? If you think it is callous to put this as the
first thing we look for, then you are probably not someone we want to
work with. We are running a business and there are plenty of great ideas
out there and plenty of great people. But the sad fact is many of them
cannot afford to build the applications they dream of, at least not
through us. Financially vetting clients is very important. It makes no
sense to waste our time in contract negotiations with someone that
cannot afford our services. We try to discover this as soon as possible
so we don&amp;#39;t waste any of the client&amp;#39;s time either. We try to make the
best recommendation on the next steps they can take. We never take
equity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is this an application we want to work on? I would make this the 2nd
No. 1 if I could. While it is very important to make sure we have
clients that can pay us so we can pay our employees it is equally
important to make sure we have projects that our employees actually want
to work on. This is something that I butted heads over with our Business Developer
early on. He was not coming from a developer background and at the start
did not know what projects were good and which were shit, from an engineering
perspective. Consultancies are a feeding ground for other companies to
poach from. We try to retain our employees by paying well and by keeping
them on interesting and challenging projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is this a project that helps us grow? This is something we
have, over the past six months, started to think about when speaking
with clients. Is this a project we would be proud to put in our
portfolio? Is this a project we can write a case-study on? Is this a
project that helps us make a sales pitch to an even larger client?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we can stick to these three items when choosing clients I think we&amp;#39;ll
be fine. That is not always the case and from time to time we have had
to sacrifice up the chain. So the first to go is #3, then #2, and
finally #1 if we are desperate.&lt;/p&gt;

&lt;h2&gt;Our Tech Stack&lt;/h2&gt;

&lt;p&gt;While we started out as a Rails shop we have moved very quickly over the
past year to brand ourselves also as an &lt;a href="http://emberjs.com"&gt;Ember&lt;/a&gt; shop.&lt;/p&gt;

&lt;p&gt;I believe in Ember as a technology, it is superior to any other
JavaScript framework out there in every way except for the learning
curve. I see many developers that I have known in the Boston area hate
on Ember. Good, let them. More for us. We also chose Ember for business
reasons.&lt;/p&gt;

&lt;p&gt;Competing with all of the other Rails shops in Boston is just stupid.
Down the street we have one of the most well know Rails consultancies in
the world (thoughtbot) and within a half a mile we have about 6 others
lesser-known ones. From an ability perspective we are just as good as
any of them, but then again that&amp;#39;s the point of Rails. There is no
technological advantage that any one shop has over another nowadays. We
all pretty much do the same &amp;quot;best practices&amp;quot; and use nearly the same tech
stack. There is nothing that distinguishes one shop from another. So we
have diversified our offerings.&lt;/p&gt;

&lt;p&gt;I chose Ember as a technology direction because it was, and still is,
incredibly undervalued in the market. If I was playing a short game in
our business I would invest in Angular, it is the tech-du-jour but a
year from now I seriously doubt that will be the case. While everyone
else is wasting their time specializing in Angular we&amp;#39;re building an
incredibly strong presence in the Ember world. When the scale tips we&amp;#39;re
going to be in a great position. At least that&amp;#39;s the theory. Time will
tell, maybe the next time I write on of these I&amp;#39;ll be bitching about how
wrong I was. We&amp;#39;ll see.&lt;/p&gt;

&lt;h2&gt;Hiring&lt;/h2&gt;

&lt;p&gt;For the most part I&amp;#39;ve been very lucky with the team I&amp;#39;ve hired.
Recently we just had our holiday party and I thought on my way to the
dinner that this is the team I&amp;#39;ve always wanted. I can&amp;#39;t imagine that is
a very common thing for people to think. And that&amp;#39;s not to say we
haven&amp;#39;t had missteps.&lt;/p&gt;

&lt;h3&gt;Finding The Right People&lt;/h3&gt;

&lt;p&gt;For us I hire for cultural fit. We have a good mix of senior and junior
talent. If we hire a junior developer I only hire people that show an
ability to learn fast. I really dislike white-board interviews so the
face-to-face interview is for me to get a sense of their personality.
Then I will ask some general knowledge questions to get a sense of where
they are at skill-wise. I will then send the candidate away for a week
and give them a project to create. I try to pick criteria that puts them
outside of their comfort zone. Have they done TDD before, have they done
Ember? I will ask them to challenge themselves and I will ask for access
to the GitHub repository. One indicator I use is how soon did the
candidate start this project? If it was started right away that shows an
eagerness to complete the work. Was is started and finished the night
before? This might show a tendency to procrastinate and get things in at
the last minute. While these may be outside factors I do ask about them
if they are extreme during the follow-up interview.&lt;/p&gt;

&lt;p&gt;Recently we have been able to build enough of a name for ourselves in
the development community where we have started to attract some good
senior development talent. We are putting a pause on hiring junior
developers and will likely focus on more senior developers for the next
year.&lt;/p&gt;

&lt;h3&gt;Firing People&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ve gotten permission to talk about this from Russ. Russ was a
co-founder of DockYard and I fired him. It was around the time of the
first post but I didn&amp;#39;t want to reflect on it yet. In retrospect it was a
long-term mistake but perhaps the correct short-term decision. We were
not at the size when I was really thinking too long-term. I was not
getting from him what I needed and it was weighing me down mentally, but
this was my fault. I was not communicating to Russ properly what my
expectations were. Thankfully we&amp;#39;re still friends and grab drinks every
now and then. If the roles were reversed I don&amp;#39;t think I would be as
magnanimous.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve since fired two others. One was my fault, the other was not. It is
a strange thing to fire someone. People try to make it nice by saying
&amp;quot;let them go&amp;quot;, but in reality you&amp;#39;ve shit-canned them. When you are
employing someone, especially at a small company, you feel a sense of
responsibility for them. You are paying them money and provide them with
health care they use to take care of their family. I wish we could
magically double the salaries of all of our employees but of course we
cannot afford that. When it came time to firing someone it weighed on me
and I considered the implications. I never did it lightly, but
considering the alternative, each firing has turned out to be the correct move.
Even with Russ, he&amp;#39;s done much better without DockYard than he was doing
with DockYard. Sometimes its not a good fit, I am guilty of letting
things sit too long. I have learned to be quicker about acting upon
this.&lt;/p&gt;

&lt;h3&gt;Losing People&lt;/h3&gt;

&lt;p&gt;We have so far lost just one employee, one of our DC partners Chris
Gill. He got a job with the Department of Revenue that paid well beyond
what we could afford. I was actually pretty proud of him that he landed
it. I have left enough jobs in my career to know that I never want to be angry
at someone that has decided to leave DockYard. If it is time to go, it
is time to go. Considering the number of junior developers we have been training
up I would like to think of it as an accomplishment of ours to see
people &amp;quot;graduate&amp;quot; from DockYard and go on to do great things in the
industry. (but don&amp;#39;t leave us too quick!)&lt;/p&gt;

&lt;h2&gt;Business Development&lt;/h2&gt;

&lt;p&gt;In the summer of 2012 I was overwhelmed. I was Lead Developer, Business
Developer, Office Manager, and Everything Else* at DockYard. The most
important job I had was making sure new business was coming in. But
focusing on that was having a negative impact on the client projects I
was on as well as training any developers we had that required it. I
started a search for a Business Developer. At first I hatched a plan to
leverage the recruiters of Boston. It made sense: they already were
talking to companies but it was difficult for those companies to hire.
Why not just partner with DockYard and rent our services to those
companies? At 8% the math actually worked out in their favor, however none of
them bit. I&amp;#39;m still struggling with this one and I think it speaks to
the state of recruitment. It was a good business opportunity but they
could not think outside the box.&lt;/p&gt;

&lt;p&gt;So it was time to find someone for that position. I had never made a
non-technical hire before. I had no idea how to do that. I looked
specifically for &amp;quot;Business Developers&amp;quot; but that was a bust. I gave up
for a month or two then I realized that it was essentially a Sales
position. So I put an ad out for a someone in sales looking to take on a
larger role, a key role for the growth of a young company. I got about
50 resumes and brought in two people for interview. I liked them both
and settled on the one with the better references. It was a great
decision. Our Business Developer Dan Crowther has been huge for us. We butt
heads on a few things; he&amp;#39;s right sometimes and I&amp;#39;m right sometimes. But
the fact is we would not be where we are today without him.&lt;/p&gt;

&lt;p&gt;It took him about six months to really get comfortable with the
position, this is very common from what I&amp;#39;ve been told of those
transitioning into this position. He&amp;#39;s helped us open up business we
wouldn&amp;#39;t have known about otherwise. And most important I can focus on
other things.&lt;/p&gt;

&lt;p&gt;We sell DockYard on the quality of our work. While we started as a
technology company, design has become a large part of who DockYard is and
has gone a long way to help sell our brand.&lt;/p&gt;

&lt;h2&gt;Design&lt;/h2&gt;

&lt;p&gt;Since our first &amp;quot;real&amp;quot; contract with &lt;a href="http://openbay.com"&gt;Openbay&lt;/a&gt; we
worked with an outside designer, Steven Trevathan. He was recommended to
me by two separate people. Steve along with his partner Logan Faerber
were starting their own consultancy Dobot. Steve and I got along 
well and I brought them back for a few more contracts. We bonded over
our mutual disdain for many of the people in the &lt;a href="http://www.cambridgecoworking.com/aboutc3.html"&gt;C3 space at
CIC&lt;/a&gt; and so when we
finally got our own office last year I invited Steven and Logan to work
from there. We even brought them along to check out the office spaces
we were interested in. This past Spring it became obvious that we needed
someone full-time at DockYard to take ownership of our design. Likewise
Dobot was also looking for a lead engineer. It would be funny if it
wasn&amp;#39;t so stupid that we were literally sharing the same office, worked
together on several projects, and were still looking for one another. Steve and I
grabbed drinks and I laid it out: let&amp;#39;s do this. He agreed and we
brought Steve on as our Creative Director and a partner. Logan came on as a lead illustrator. It
is the best move we&amp;#39;ve made to date. Steve and Logan quickly took
ownership of the design direction of DockYard and have along with Amanda
and Angelo put out a &lt;a href="http://dockyard.com"&gt;website that really represents who we
are&lt;/a&gt; and have also put together some amazing
designs for our clients.&lt;/p&gt;

&lt;p&gt;While earlier I mentioned how it was very difficult to differentiate
ourselves from other Rails shops, the one place we can totally do that
is with design. Ultimately design sells much better than engineering.
The engineering part of our contracts bring in more money, so we have to
make certain that the design contracts we pick up will convert to
engineering contracts. We look at design as the best Lead Generator we
could get. It has worked, very well.&lt;/p&gt;

&lt;h2&gt;Office Manager&lt;/h2&gt;

&lt;p&gt;This is one that I was told multiple times that I should do sooner than
later. I am very bad with context switching, I have to either do all
business stuff one day or all of the engineering. I cannot do both effectively.
After hiring Crowther I knew the next non-technical hire I wanted was an
office manager. What I did might be considered overboard.&lt;/p&gt;

&lt;p&gt;I put an ad on Craigslist. We got over 200 responses. I brought the list
down to around 100 and sent out invites and asked people to schedule
themselves for an interview through
&lt;a href="https://gb.youcanbook.me/"&gt;YouCanBook.me&lt;/a&gt; I blocked out over two weeks
of time, and broke the interviews into 20 minute blocks. Over 60
interviews were scheduled. I ended up meeting with about 40 of people.
It was one of the crazier things I&amp;#39;ve done but this was a position I had
no idea how to hire and the only way I could figure to find the right
person was to see a ton of candidates and waited to see what stuck. The
person we hired was the 2nd person to walk through the door, Mariel
Ebrahimi. We got real lucky, and I think I even came out of that
interview and told everyone that we were probably going to hire her.
However, considering she was only the 2nd candidate I still went through
the next two weeks of interviews. It became obvious that she was well
beyond anybody else coming in and over the past few months she has kept
DockYard running smoothly. Being able to let go of these small things in
the office is incredibly freeing and has allowed me to focus on the
bigger picture.&lt;/p&gt;

&lt;p&gt;I have been toying with the idea of hiring a Project Manager in Boston.
We did that before in Washington, DC but we were in a very different position that
we are now and I think the position only works for us, at our size, in
Boston. I am currently running PM on most projects, at least to a
certain degree. I allocate resources, and assign roles. Developers at
DockYard look to me for what they should be doing next. It&amp;#39;s time
consuming and only gets worse as we grow. We&amp;#39;ll see what happens in the
next few months.&lt;/p&gt;

&lt;h2&gt;Building Our Own Products&lt;/h2&gt;

&lt;p&gt;We&amp;#39;ve tried it once and we failed. That simple. We failed for several
reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We could not work on the product consistently. This killed us. We
were putting in days here and there in between client work. I was
putting in hours on the weekend and this was burning me out for the rest
of the week.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It was not an idea that was very good beyond concept. We built out a
marketplace for Heroku called
&lt;a href="https://github.com/dockyard/igata"&gt;Igata&lt;/a&gt; It would allow developers to
sell pre-baked applications for deployment on Heroku. I liked the
challenge of building the initial technology. But when I began to think
about the long term implications of maintaining a marketplace
application I lost all interest.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Heroku was too much of an obstacle. I actually went out to Heroku and
met with some of their people to pitch them on the idea. They liked
it but it became clear that if we really wanted to make money we should
just make our own Heroku and not lose the money on hosting. Then it was
an easy mental jump to &amp;quot;let&amp;#39;s forget about this marketplace and just
compete with Heroku&amp;quot; which of course is a dumb idea.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So we bailed on the application and open sourced it. We are going to
attempt another product built, this time we are going to save up a
financial war chest so we can dedicate the proper amount of time to the project.
I don&amp;#39;t mind losing money on projects like this. They are fun to build
and I think we come out the other end as a better shop once we dog food
our own process.&lt;/p&gt;

&lt;h2&gt;Getting Our First Office&lt;/h2&gt;

&lt;p&gt;I was pretty annoyed with all of the entrepreneurial bullshit that was
going on in the CIC in Cambridge. It is a terrible working environment,
especially if you are a consultancy. You get bugged all the time by the
worst people. The space is &lt;strong&gt;incredibly&lt;/strong&gt; loud. If you go there to work
on the weekends it&amp;#39;s fantastic. But it became obvious very quickly that
we needed our own office. We worked with &lt;a href="https://twitter.com/jfrisch21"&gt;Jon
Frisch&lt;/a&gt; at &lt;a href="http://www.t3advisors.com/"&gt;T3
Advisors&lt;/a&gt;. We were growing and we need
space to grow &lt;em&gt;into&lt;/em&gt;. We decided upon a 2,200 square foot 2nd floor space
in Downtown Crossing. I always wanted an office there because of how
centrally located it was. Thankfully, Downtown Crossing ends up being
much cheaper real-estate than many of the other places around Boston 
(although this is already changing).&lt;/p&gt;

&lt;p&gt;We had some difficulty moving in. We were supposed to start the build-out
in July of 2012. I was getting married in late August. The owner kept
deflecting us, and deflecting. I went on my honeymoon and when I got
back I asked him what the deal was. He said, &amp;quot;OK, it&amp;#39;s no longer an
active crime scene so I can tell you what happened.&amp;quot;&lt;/p&gt;

&lt;p&gt;It turns out that our office is a floor above a jewelery store. The
floor in our office is concrete. Two guys broke down a side door to the
vacant space, brought some mini-jackhammers and drilled a man-size hole
into the store below. They then repelled down with ropes and started to
clean the place out. There were some silent alarms that were set off and
they got busted. Exactly why it took them 2 months to clear the place to
allow us to build I don&amp;#39;t know. But considering how crazy the story is I
was OK with it.&lt;/p&gt;

&lt;p&gt;Anyway, we finally got into the space in October of 2012. Thankfully no
more jewelery heists have happened. We host a lot of community events at
our office and I&amp;#39;m really happy with that. Currently we organize &lt;a href="http://www.meetup.com/Boston-Ember-js/"&gt;Boston
Ember&lt;/a&gt;, &lt;a href="http://openhack.github.io/boston/"&gt;Boston OpenHack&lt;/a&gt;, &lt;a href="http://www.meetup.com/uxboston/"&gt;UX Boston&lt;/a&gt;, run classes for &lt;a href="http://www.girldevelopit.com/chapters/boston"&gt;Girl Develop It Boston&lt;/a&gt;, and
host &lt;a href="http://www.meetup.com/Boston-PostgreSQL-Users-Group-BPUG/"&gt;Boston
Postgres&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Starting Over&lt;/h2&gt;

&lt;p&gt;If I had to start DockYard from scratch today I would do it differently.
The number one thing I would do different is not agree to a partnership
until 6 months out. I would have awarded co-founder status to those
that started, but I would have held off on awarding partnerships
until everyone settled into their roles. I think when you first get going you don&amp;#39;t really
understand what those roles are. Assigning roles on day zero
and expecting everyone to just stick to these roles is not realistic if
this is everyone&amp;#39;s first rodeo. Trial by fire is the best way to define
the roles. Once that is done then the partnership can be established.
Perhaps someone that previously thought being partner was a good idea
was not actually interested in the added responsibility? Perhaps someone
you didn&amp;#39;t think was &amp;quot;partner material&amp;quot; ends up being one of your key
people and that should be rewarded.&lt;/p&gt;

&lt;p&gt;I would also hire a little more slowly than we did at first. I have not
yet been able to pay myself what I&amp;#39;ve set my salary to. The first year I
paid myself 25% of that salary. This year I&amp;#39;ve hit my goal of paying
myself 50%. Next year I hope to hit 100% of that goal. Thankfully I&amp;#39;ve
got a wife that makes a good living and we&amp;#39;ve been able to lean on that
when I&amp;#39;ve needed to take myself off of payroll. If our situation were
different I am not confident that DockYard would be around today, at
least not in its currently form. I&amp;#39;ve been able to take risks that
others might not be able to.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Any success we have had is due in part to not just the great team we
have but honestly sometimes just luck. There have been several times in
the past two years where I have not been able to sleep due to the stress
of thinking how we were going to make the next few payrolls. Every time
we got lucky, someone came along at the right moment and bailed us out.
I would like to think we are out of those woods, we&amp;#39;ll see.&lt;/p&gt;

&lt;p&gt;One way I have changed how DockYard operates is moving away from always
new clients to retaining clients. I had lunch with &lt;a href="https://www.assembla.com/spaces/andy/wiki"&gt;Andy
Singleton&lt;/a&gt; and he stressed
and convinced me that we were throwing away money by always looking
for new clients. The really successful consultancies had several large
contracts that would span multiple years. It was obvious but I had not
seen it until it was spelled out for me. So we are going to look to
retain and provide ongoing services for our existing clients. If
someone is reading this and looking to get started that was probably
one of our biggest mistakes over the past two years; find a client that
you might even need to take a financial hit on but is always there to
help you keep the lights on. Looking back it seem crazy that we were
able to not just survive but thrive given out direction of always
looking for greenfield projects.&lt;/p&gt;

&lt;p&gt;In the next few years I don&amp;#39;t want to see the same rate of growth we&amp;#39;ve
previously had. I&amp;#39;ve said several times to my team I don&amp;#39;t want to grow
to more than 20. Any more than that and we&amp;#39;ll have to consider some
serious restructuring of the company. I also feel at that number the
small team we have starts to feel more like a &amp;quot;real company&amp;quot;. We just
recently made an offer to a new member of our team that will be joining
in January. I have not met her yet and that is strange to me, but is
also an indicator that we have grown to that point that these things
will happen.&lt;/p&gt;

&lt;p&gt;I look forward to hearing the feedback from this article. I&amp;#39;m sure there
will be people that disagree with some of the things I&amp;#39;ve said and the
decisions we&amp;#39;ve made.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Simple Property Enum Cycling in Ember</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/12/19/ember-enum-property-cycler.html"/>
    <id>http://reefpoints.dockyard.com/2013/12/19/ember-enum-property-cycler.html</id>
    <published>2013-12-19T00:00:00Z</published>
    <updated>2013-12-19T11:42:34-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>A quick demo of cycling between a set of values</summary>
    <content type="html">&lt;p&gt;This is a quick one. I needed to cycle between the values in a set.
Toggling between &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; in Ember is easy enough with the
&lt;code&gt;toggleProperty&lt;/code&gt; function but I had several properties I wanted to cycle
between. So last night I wrote a simple function poorly named:
&lt;code&gt;cycleEnumProperty&lt;/code&gt;. You pass it the property you want to act upon and
the enum set to cycle. If the property is currently empty or if the
property matches the last value in the set the property will be set to
the first value, otherwise the property will be set to the next value.
Try it out:&lt;/p&gt;

&lt;p&gt;&lt;a class="jsbin-embed"
href="http://emberjs.jsbin.com/agaKuCoL/1/embed?js,output"&gt;Ember
Starter Kit&lt;/a&gt;&lt;script
src="http://static.jsbin.com/js/embed.js"&gt;&lt;/script&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Be A Blunt Axe</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/12/18/be-a-blunt-axe.html"/>
    <id>http://reefpoints.dockyard.com/2013/12/18/be-a-blunt-axe.html</id>
    <published>2013-12-18T00:00:00Z</published>
    <updated>2013-12-19T11:36:17-05:00</updated>
    <author>
      <name>Logan Faerber</name>
    </author>
    <summary>Giving good feedback without being too aggressive.</summary>
    <content type="html">&lt;h2&gt;Be A Blunt Axe&lt;/h2&gt;

&lt;p&gt;Something that was taught to us early on in College was how to make a &amp;quot;compliment sandwich.&amp;quot; I’m sure many of you have heard this term before, but for those of you who haven’t, it&amp;#39;s a communication tool that can keep yourself humble when confronted with the daunting task of giving others critical feedback on their work. &lt;/p&gt;

&lt;p&gt;The idea is that you as the critic would point out a positive aspect about their work or concept, the top layer of bread if you will. Then you’d follow this by mentioning something they could improve upon, which is the meaty and true substance of the discussion. At the end you’d conclude by providing another positive aspect, a la the last bit of bread. The reason we had to come up with this step-by-step process when approaching a critique environment was to avoid hurting anyone’s feelings. Rather than declaring an idea as stupid or bad, which honestly helps to accomplish nothing aside from increase the size of a critic’s ego, we had now formulated a way of give important and in-depth feedback that would actually help to improve an idea by simply being kind and genuinely interested in helping. Keeping to this method, people were much more adept to make the suggested improvements rather than declare themselves a failure, giving up before they’ve even begun to start. &lt;/p&gt;

&lt;p&gt;It&amp;#39;s important to remember that your feedback can and should be honest and frequent, but kindness prevails over being an asshole (every time). By being empathetic to the person receiving the critique, you get a better sense of what&amp;#39;ll help them improve, rather than just tearing them down. With this, your critiques become genuine and no longer appear as a means to stroke an inflated ego. Without this, the whole world would be filled with broken hearts and ego-powered douche-bags. As they say, &amp;quot;an eye for an eye makes the whole world blind&amp;quot;. Let&amp;#39;s keep our eyes and hearts intact.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Introducing easydir.vim</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/12/08/introducing-easydir-vim.html"/>
    <id>http://reefpoints.dockyard.com/2013/12/08/introducing-easydir-vim.html</id>
    <published>2013-12-08T00:00:00Z</published>
    <updated>2013-12-19T11:36:17-05:00</updated>
    <author>
      <name>Doug Yun</name>
    </author>
    <summary>A Vim plugin that allows you create directories and files at the same time!</summary>
    <content type="html">&lt;p&gt;One of the things that I wish Vim had by default is the ability to create
directories and files at the same time. Last month at our local
&lt;a href="http://openhack.github.io/"&gt;OpenHack meetup&lt;/a&gt;, I had a conversation about
it with a fellow developer and we both concluded that it wouldn&amp;#39;t be too
difficult to write something up.&lt;/p&gt;

&lt;p&gt;Well, I&amp;#39;m happy to introduce &lt;a href="https://github.com/dockyard/vim-easydir"&gt;easydir.vim&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;It adds to the functionality of &lt;code&gt;:new&lt;/code&gt;, &lt;code&gt;:edit&lt;/code&gt;, &lt;code&gt;:write&lt;/code&gt;, and more.&lt;/p&gt;

&lt;p&gt;Here are some quick examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Edit a new file inside of a previously nonexistent directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:e new_directory/new_file.txt

# Write some things to &amp;quot;new_file.txt&amp;quot; and save it.

:w

# The directory &amp;quot;new_directory/&amp;quot; and the file &amp;quot;new_file.txt&amp;quot;
# are saved!
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Open the new directory and file into a split window.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:sp another_directory/another_file.txt

# Write to &amp;quot;another_file.txt&amp;quot; and save the file.

:w

# another_directory/another_file.txt is saved!
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Super nested directories&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:n thank/you/sir/may/i/have/another.txt

# Write some things to &amp;quot;another.txt&amp;quot; and save it.

:w
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The directories and files will be saved under your current project&amp;#39;s directory.&lt;/p&gt;

&lt;p&gt;Thanks for checking it out and enjoy!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Never Stop Exploring</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/12/06/always-be-exploring.html"/>
    <id>http://reefpoints.dockyard.com/2013/12/06/always-be-exploring.html</id>
    <published>2013-12-06T00:00:00Z</published>
    <updated>2013-12-19T11:36:17-05:00</updated>
    <author>
      <name>Logan Faerber</name>
    </author>
    <summary>Being true to yourself and creating passionate work.</summary>
    <content type="html">&lt;h2&gt;Never Stop Exploring&lt;/h2&gt;

&lt;p&gt;Over the years, many artists seem to have fallen into a creative rut within their chosen career path. Some may have found a comfortable day job that sufficiently pays the bills. Others simply retired early, claiming to have burnt out creatively, and chose to throw in the artistic towel for a simpler lifestyle, one far less plagued by self doubt and critical objections, I’m sure. Whatever the reason is, we as a society are more often selecting to pursue comfort over curiosity and I believe it’s hurting the progression of our personal artistic expression in both our culture and as individuals.&lt;/p&gt;

&lt;p&gt;By choosing to accept what’s handed to you by media, you’re merely absorbing other’s ideas or predefined popular interests that have become media friendly rather than participating as part of the cultural influence. This accounts for many of the current trends that appear in graphic design, illustration, web design, music, and movies these days. How else would you have ended up with Independence Day, Mars Attacks, and Men in Black hitting the top box office charts all within the same year? You couldn’t. Aliens and end of the world scenarios were accepted as hot topics at the time, but are any of them truly remembered as works of art? I would argue the answer to be, “No”. What makes something a genuine work of art is the passion with which it is made. A fresh and deeply personal idea that attempts to either break the rules of the medium or painstakingly craft them to best suit your particular need. &lt;/p&gt;

&lt;p&gt;For example, as soon as iOS7 was shown to the public, a majority of the design community’s reaction was negative. But as soon as this same operating system was made public and write-ups began appearing online from major figureheads in the industry, people’s views started to change, as did their designs. The same people who appeared to be so opposed to this recent announcement were beginning to cater their latest designs to having an extremely minimal feel, embracing extra thin typefaces and overly saturated primary colors. While I for one have definitely come to appreciate specific things about the iOS7 operating system, there are definitely things about it’s design that are not necessarily applicable to other interface scenarios. In short, just because a big company is successful with their design doesn’t mean it’s the right fit for your project. No one’s remembered for who they’ve copied. They’re remembered for what innovations they’ve made or new ideas they’ve brought to the table. &lt;/p&gt;

&lt;p&gt;Whether this trend is a culturally specific problem or something that has plagued mankind for years, I’m unsure. What I am sure of though is that I for one don’t ever want to find myself in this predetermined rut. I think everyone has great ideas, and it’s important for them to take the time to properly express them. It’s a matter of finding the motivation in yourself to make it happen and take the risk of making it public. As the great Bill Nye said, “Everyone you will ever meet knows something you don&amp;#39;t”.&lt;/p&gt;

&lt;p&gt;I for one keep a persistent list of ideas that I want to explore, both in a physical journal and on &lt;a href="https://www.wunderlist.com/en/"&gt;Wunderlist&lt;/a&gt;, just so that no matter how random the idea may seem, I can at the very least document it to be reviewed at a later date. When I do have down time between projects, I never have to search too hard for a new one to get started. For instance, my current side project is to keep an ongoing list of fictional band names that my friends and I have collected over the years and make actual merchandise out of them as if they were real bands. I treat these projects like tiny experiments and allow myself to try new things, technically and mentally. That way, when I do return to my other projects, they never feel stale. I’m once again excited to work on them and have a new set of skills or ideas to help make them even better. &lt;/p&gt;

&lt;p&gt;This is why I think it’s important that no matter what you do, whether it’s a full time design job, freelance illustration, or something far removed from the art profession you had originally pursued, to always keep your mind fresh with new ideas. Explore all possibilities and try new things whenever you can. The more you create, the more apt you are to legitimately think outside the box, rather than work within it’s constraints. And that, my friends is how you will be remembered, for being true to yourself and creating genuine, passionate work.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Buffers, Windows, Tabs... Oh My! Part 2: Vim Windows</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/11/27/vim-windows.html"/>
    <id>http://reefpoints.dockyard.com/2013/11/27/vim-windows.html</id>
    <published>2013-11-27T00:00:00Z</published>
    <updated>2013-12-19T11:36:17-05:00</updated>
    <author>
      <name>Doug Yun</name>
    </author>
    <summary>A painless tutorial on Vim windows</summary>
    <content type="html">&lt;p&gt;In the second part of this series, we&amp;#39;ll be covering Vim windows. Windows are simply
the &lt;strong&gt;viewports&lt;/strong&gt; into &lt;a href="http://reefpoints.dockyard.com/2013/10/22/vim-buffers.html"&gt;buffers&lt;/a&gt;
and I&amp;#39;m 110% sure that they are a huge part of your daily workflow.&lt;/p&gt;

&lt;p&gt;Yes, there are numerous plugins that make our lives a lot easier, but let&amp;#39;s
dive into a powerful defaults that Vim offers us.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll first cover the basics, and then learn some neat window management commands.&lt;/p&gt;

&lt;h2&gt;Starting a Vim Session&lt;/h2&gt;

&lt;h3&gt;One File&lt;/h3&gt;

&lt;p&gt;Vim windows are not complicated to use; if you want to open a file, &lt;code&gt;file_one.txt&lt;/code&gt;, simply:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;$ vim file_one.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Multiple Files&lt;/h3&gt;

&lt;p&gt;If you want to open multiple files, &lt;code&gt;file_one.txt&lt;/code&gt;, &lt;code&gt;file_two.txt&lt;/code&gt;, and &lt;code&gt;file_three.txt&lt;/code&gt;, you can
do the following:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;$ vim file_one.txt file_two.txt file_three.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This opens the first file, &lt;code&gt;file_one.txt&lt;/code&gt;, into a window.
Files &lt;code&gt;file_two.txt&lt;/code&gt; and &lt;code&gt;file_three.txt&lt;/code&gt; are opened as inactive buffers.&lt;/p&gt;

&lt;h3&gt;Multiple Horizontal Splits&lt;/h3&gt;

&lt;p&gt;Say you want to view multiple files at once. Good news! You can
open all files and place them into &lt;strong&gt;horizontal splits&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;$ vim -o file_one.txt file_two.txt file_three.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Multiple Vertical Splits&lt;/h3&gt;

&lt;p&gt;Don&amp;#39;t like horizontal splits? Better news! You can open them all as &lt;strong&gt;vertical splits&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;$ vim -O file_one.txt file_two.txt file_three.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Within a Vim Session&lt;/h2&gt;

&lt;p&gt;There are two main arrangements for splitting windows, vertical and horizontal. Let&amp;#39;s say
we&amp;#39;re editing a file and want to open up another file. We can do the following:&lt;/p&gt;

&lt;h3&gt;Horizontal Splits&lt;/h3&gt;

&lt;p&gt;This will open &lt;code&gt;another_file.txt&lt;/code&gt; as &lt;strong&gt;horizontal split&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:split another_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can use this abbreviation:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:sp another_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In addition, you can specify how large the new split will be by passing
in a numerical value. This value will represent the line numbers shown within the
split.&lt;/p&gt;

&lt;p&gt;For example, this will reveal 25 lines of &lt;code&gt;another_file.txt&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:25sp another_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Lastly, you can open a &lt;strong&gt;split&lt;/strong&gt; window with &lt;code&gt;CTRL-W s&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Vertical Splits&lt;/h3&gt;

&lt;p&gt;You can open files as &lt;strong&gt;vertical splits&lt;/strong&gt; as well.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:vsplit another_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Which is abbreviated as:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:vsp another_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Vertical splits&lt;/strong&gt; can also take in a numerical value, which corresponds to the
character width of the column.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:30vsp another_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, you can open a &lt;strong&gt;vertical split&lt;/strong&gt; with &lt;code&gt;CTRL-W v&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;New Files&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s create a new file.&lt;/p&gt;

&lt;p&gt;Use, &lt;code&gt;:new&lt;/code&gt; to create a new file inside the current window.
After you save the file, it will be created within your current directory.
You can also use the abbreviation &lt;code&gt;:n&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:n new_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If we specify the path, we can also create files inside existing directories.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:n ../existing_dir/new_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Use &lt;code&gt;:vnew&lt;/code&gt; or &lt;code&gt;:vne&lt;/code&gt; to create a new file inside a new &lt;strong&gt;vertical split&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:vne new_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Lastly, we can use &lt;code&gt;CTRL-w n&lt;/code&gt; to create a new file inside a &lt;strong&gt;horizontal split&lt;/strong&gt;.
Note that we have not specified a file name. Upon saving the file with &lt;code&gt;:w&lt;/code&gt;, we
can give the file a name. Such that:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;# CTRL-w n

:w this_is_a_new_file.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Switching Windows&lt;/h3&gt;

&lt;p&gt;Switching windows ain&amp;#39;t hard either!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL-w h&lt;/code&gt; = Switch to the window to the left&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w j&lt;/code&gt; = Switch to the window below&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w k&lt;/code&gt; = Switch to the window above&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w l&lt;/code&gt; = Switch to the window to the right&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Moving Windows&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ve realized that window placement is incredibly useful
when pairing with another person. Here&amp;#39;s are a some ways to adjust
the windows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL-w T&lt;/code&gt; = Move current window to a new tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w r&lt;/code&gt; = &lt;em&gt;Rotates&lt;/em&gt; the windows from left to right - only if the windows
are split vertically&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w R&lt;/code&gt; = &lt;em&gt;Rotates&lt;/em&gt; the windows from right to left - only if the windows
are split vertically&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w H&lt;/code&gt; = Move current window the far left and use the full height of the screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w J&lt;/code&gt; = Move current window the far bottom and use the full width of the screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w K&lt;/code&gt; = Move current window the far top and full width of the screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w L&lt;/code&gt; = Move current window the far right and full height of the screen&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Resizing Windows&lt;/h3&gt;

&lt;p&gt;Sometimes windows open up funny or are rendered incorrectly after separating from
an external monitor. Or maybe you want to make more room for an important file.&lt;/p&gt;

&lt;p&gt;We can easily solve those problems with the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL-w =&lt;/code&gt; = Resize the windows &lt;em&gt;equally&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w &amp;gt;&lt;/code&gt; = Incrementally increase the window to the right

&lt;ul&gt;
&lt;li&gt;Takes a parameter, e.g. &lt;code&gt;CTRL-w 20 &amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w &amp;lt;&lt;/code&gt; = Incrementally increase the window to the left

&lt;ul&gt;
&lt;li&gt;Takes a parameter, e.g. &lt;code&gt;CTRL-w 20 &amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w -&lt;/code&gt; = Incrementally decrease the window&amp;#39;s height

&lt;ul&gt;
&lt;li&gt;Takes a parameter, e.g. &lt;code&gt;CTRL-w 10 -&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL-w +&lt;/code&gt; = Incrementally increase the window&amp;#39;s height

&lt;ul&gt;
&lt;li&gt;Takes a parameter, e.g. &lt;code&gt;CTRL-w 10 +&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;That was a lot to cover, but I do believe incorporating these commands into
your workflow will prove pretty helpful. Thanks for reading!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Think</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/11/15/think.html"/>
    <id>http://reefpoints.dockyard.com/2013/11/15/think.html</id>
    <published>2013-11-15T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>Don't do what others tell you to do without thinking about it</summary>
    <content type="html">&lt;p&gt;Ever since &lt;a href="http://wickedgoodruby.com/2013/speakers/matt_aimonetti"&gt;Matt Aimonetti&amp;#39;s talk at
Wicked Good Ruby&lt;/a&gt;
on there being such thing as bad code, I&amp;#39;ve felt I&amp;#39;ve
needed to write a blog post about the &lt;a href="https://en.wikipedia.org/wiki/Cargo_cult"&gt;cargo
culting&lt;/a&gt; that happens in
the development world.&lt;/p&gt;

&lt;h2&gt;Sandi Metz&amp;#39;s Rules&lt;/h2&gt;

&lt;p&gt;Back in January, &lt;a href="http://rubyrogues.com/087-rr-book-clubpractical-object-oriented-design-in-ruby-with-sandi-metz/"&gt;Sandi Metz was on Ruby
Rogues&lt;/a&gt;
to discuss her book, &lt;strong&gt;&lt;a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330/"&gt;Practical Object-Oriented Design in Ruby&lt;/a&gt;&lt;/strong&gt;.
Out of this conversation came &amp;quot;&lt;a href="https://gist.github.com/henrik/4509394"&gt;Sandi Metz&amp;#39;s
rules&lt;/a&gt;&amp;quot;. Many
in the Ruby community took these rules as gospel, without knowing the
context in which these rules were created.&lt;/p&gt;

&lt;p&gt;The rules, for those unfamilar:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your class can be no longer than 100 lines of code&lt;/li&gt;
&lt;li&gt;Your methods can be no longer than five lines of code&lt;/li&gt;
&lt;li&gt;You can pass no more than four parameters and you can&amp;#39;t just make it one big hash&lt;/li&gt;
&lt;li&gt;When a call comes into your Rails controller, you can only instantiate one object to do whatever it is that needs to be done&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sandi joined Matt during his talk at Wicked Good Ruby and &lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=VO-NvnZfMA4#t=1380"&gt;gave some background to the
story of her rules&lt;/a&gt;.
To paraphase Sandi, at the time she was working with a group that had multi-thousand line controllers with
multi-hundred line methods. These controllers and methods represented
one end of a spectrum, which made code incredibly hard to read and maintain.
They were begging Sandi for guidelines with which they could try to
correct this problem. What she did was create a set of rules that
lived on the opposite side of the extreme, to force them to meet
somewhere in the middle.&lt;/p&gt;

&lt;p&gt;In reality, these rules are a different way of looking at rules many of
us strive for in the first place. An example: The 100 lines per class
rule is really forcing you to create classes with the &lt;a href="https://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;Single
Responsibility Principle&lt;/a&gt; in mind.&lt;/p&gt;

&lt;p&gt;My issue is not with these rules as they exist, but with the
community&amp;#39;s cargo culting of these rules and treating them as The Four
Commandments. I don&amp;#39;t have an issue with you following them, as long as
you understand why they exist, and you feel as though they are
principles you believe in. Don&amp;#39;t just make five line methods because
Sandi said so, and if you follow these rules, you feel like you&amp;#39;ll be a
great developer. Adhering to Sandi&amp;#39;s rules does not make one great, it&amp;#39;s
understanding where these, or any rules, should and shouldn&amp;#39;t apply.
Sometimes a method that spans more than five lines will be more readable
and maintainable than the same method spread across five or six 5-line
methods. Striking that balance is where the power lies.&lt;/p&gt;

&lt;h2&gt;REMOTE&lt;/h2&gt;

&lt;p&gt;37signals just published
&lt;a href="http://www.amazon.com/Remote-Office-Required-Jason-Fried/dp/0804137501/"&gt;REMOTE&lt;/a&gt;, a book about
the benefits of allowing remote workers. I don&amp;#39;t disagree that
working remote has many benefits. At DockYard, we work from home from time
to time. We also strive to have people in the office more often than
not, not because Brian doesn&amp;#39;t think we aren&amp;#39;t working when we aren&amp;#39;t in
the office, but because it enables greater collaboration.&lt;/p&gt;

&lt;p&gt;DockYard is a consultancy; we have client work with deadlines we have to
meet. With having our developers and designers in the office together more
often than not, it removes the latency from discussing issues. I can
walk over to Steve and we can hash out an issue in a few minutes. If we
were all remote, I&amp;#39;d have to ping him on HipChat, hope he&amp;#39;s at his desk,
try to go over the issue text-only until we realize we need to have a
Google Hangout, etc. It makes more sense for us to be in the same place.&lt;/p&gt;

&lt;p&gt;The other benefit of DockYard working from the office is that our junior
developers enjoy the same face-to-face benefits. Also, body language
makes a huge difference when teaching or learning topic. When someone pauses,
has a slightly puzzled look on their face and says &amp;quot;....Ok&amp;quot;, it easy to
realize that a bit more background on the topic will really let them
grasp the topic, but an &amp;quot;ok&amp;quot; in HipChat removes all the body language we
could leverage.&lt;/p&gt;

&lt;p&gt;Removing the latency between a junior developer having a
question and getting the answer is crucial. If a junior developer has a
question that&amp;#39;s a show stopper, they can feel helpless while they wait
for someone to be around to answer that question. That helplessness is
killer; it makes someone feel like they aren&amp;#39;t helping, and can
potentially prevent them from asking other questions. If the that delay
is interpreted as the senior developer blowing them off, they will be
less inclined to ask questions in the future, hurting both themselves
and the team.&lt;/p&gt;

&lt;p&gt;A product company that employs experts (or creators) of a framework has
a much different situation, where working remote makes a lot more sense.
The conversations they have will be at a different level. They&amp;#39;ll all
have intimate knowledge of the code base, and so a few questions back
and forth or a quick Google Hangout achieves a great deal. The
conclusion was a result of the context they exist in. Remote workers
work great for them because they have the perfect mix of experts in
their domain; are working on products, which have very different
requirements and issues of client work; and have a customer support
group, which don&amp;#39;t necessarily need to collaborate while working a
customer through issues.&lt;/p&gt;

&lt;h2&gt;Figure Out What Works for YOU&lt;/h2&gt;

&lt;p&gt;In no way am I saying you should all work in the same office and
disregard Sandi&amp;#39;s rules. What I&amp;#39;m asking of the community is a bit of
critical thought. Just because someone smart said one thing, it doesn&amp;#39;t
mean it&amp;#39;s gospel. Realize that experience has led that person to that
conclusion, weigh your experience against it, and apply it if you can.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s just not hope that the gods give us food because we made bamboo
airplanes. Let&amp;#39;s realize that moving to XYZ comes with both drawbacks and
benefits, not just the benefits that everyone is touting.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Introducing Capybara-Extensions</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/11/11/capybara-extensions.html"/>
    <id>http://reefpoints.dockyard.com/2013/11/11/capybara-extensions.html</id>
    <published>2013-11-11T00:00:00Z</published>
    <updated>2014-04-26T00:29:20-04:00</updated>
    <author>
      <name>Michael Dupuis</name>
    </author>
    <summary>Write more descriptive tests with additional finders and matchers for Capybara.</summary>
    <content type="html">&lt;p&gt;Today we&amp;#39;re happy to announce &lt;a href="https://github.com/dockyard/capybara-extensions"&gt;CapybaraExtensions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Testing with Capybara&lt;/h2&gt;

&lt;p&gt;We love &lt;a href="https://github.com/jnicklas/capybara"&gt;Capybara&lt;/a&gt; at DockYard. We use it for virtually all of our integration tests and
rely on it for writing tests that not only replicate how users flow
through an application, but also for how they interact with page
elements.&lt;/p&gt;

&lt;p&gt;Briefly, let&amp;#39;s take a look at a Rails application with and without
Capybara. Without Capybara, inheriting from &lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt; provides
some helpful &lt;code&gt;RequestHelpers&lt;/code&gt; like &lt;code&gt;get&lt;/code&gt;, which takes a path, some
parameters, and headers (via &lt;a href="http://guides.rubyonrails.org/testing.html#integration-testing-examples"&gt;RailsGuides&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test_helper&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;UserFlowsTest&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActionDispatch&lt;/span&gt;::&lt;span class="constant"&gt;IntegrationTest&lt;/span&gt;
  fixtures &lt;span class="symbol"&gt;:users&lt;/span&gt;

  test &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;login and browse site&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    &lt;span class="comment"&gt;# login via https&lt;/span&gt;
    https!
    get &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/login&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    assert_response &lt;span class="symbol"&gt;:success&lt;/span&gt;

    post_via_redirect &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/login&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;username&lt;/span&gt;: users(&lt;span class="symbol"&gt;:david&lt;/span&gt;).username, &lt;span class="key"&gt;password&lt;/span&gt;: users(&lt;span class="symbol"&gt;:david&lt;/span&gt;).password
    assert_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/welcome&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, path
    assert_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Welcome david!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, flash[&lt;span class="symbol"&gt;:notice&lt;/span&gt;]

    https!(&lt;span class="predefined-constant"&gt;false&lt;/span&gt;)
    get &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;/posts/all&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    assert_response &lt;span class="symbol"&gt;:success&lt;/span&gt;
    assert assigns(&lt;span class="symbol"&gt;:products&lt;/span&gt;)
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Capybara adds some syntactic sugar with its
&lt;code&gt;Capybara::Session#visit&lt;/code&gt; method, and produces code that reads a lot cleaner and mimics
how a user engages with the application:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test_helper&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;capybara&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;capybara_minitest_spec&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="comment"&gt;# MiniTest::Spec expectations for Capybara&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;PostsTest&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActionDispatch&lt;/span&gt;::&lt;span class="constant"&gt;IntegrationTest&lt;/span&gt;
  fixtures &lt;span class="symbol"&gt;:users&lt;/span&gt;

  test &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;login and browse site&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    visit login_path

    within find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;form#session-new&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
      fill_in &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;username&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;with&lt;/span&gt;: users(&lt;span class="symbol"&gt;:david&lt;/span&gt;).username
      fill_in &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;password&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;with&lt;/span&gt;: users(&lt;span class="symbol"&gt;:david&lt;/span&gt;).password
      click_button &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Submit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;

    current_path.must_equal welcome_path
    page.must_have_content &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Welcome david!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

    visit posts_path
    page.must_have_content &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Welcome to ReefPoints!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Jonas Nicklas, who maintains Capybara, writes how the library leads to &lt;a href="http://www.elabs.se/blog/51-simple-tricks-to-clean-up-your-capybara-tests"&gt;cleaner tests and clearer intent&lt;/a&gt;. This is exactly what we
want from our tests, which not only test our code, but also
document our application&amp;#39;s behavior. A lot more could be written about
this idea, but I&amp;#39;m going to assume I&amp;#39;m preaching to the choir here and
jump into DockYard&amp;#39;s newest gem:
&lt;a href="https://rubygems.org/gems/capybara-extensions"&gt;CapybaraExtensions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CapybaraExtensions extends Capybara&amp;#39;s finders and matchers. Our goal is
to cull many of the &lt;code&gt;find&lt;/code&gt; statements from our tests and remove the
verbose CSS and
xpath locators that come along with them.&lt;/p&gt;

&lt;h2&gt;Finders&lt;/h2&gt;

&lt;h3&gt;find_&amp;lt;element&amp;gt;&lt;/h3&gt;

&lt;p&gt;The library contains helper
methods for finding elements like &lt;code&gt;form&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt;, and lists, as well as
many HTML5 elements like &lt;code&gt;article&lt;/code&gt;, &lt;code&gt;aside&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, and &lt;code&gt;header&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So the above code in which we pass a CSS selector&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;within find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;form#session-new&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
  ...
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;becomes the following:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;within form(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Login&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
  ...
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, &amp;quot;Login&amp;quot; is text found in the form. Passing the text contained within the element we&amp;#39;re looking for better reflects what a user is thinking when she sees a form that
says &amp;quot;Login.&amp;quot;&lt;/p&gt;

&lt;p&gt;Finder methods are also aliased so that you can call &lt;code&gt;#form&lt;/code&gt;
instead of &lt;code&gt;#find_form&lt;/code&gt; (which you might expect from a finder method).
This makes for better readability with the oft-used &lt;code&gt;Capybara::Session#within&lt;/code&gt; method.&lt;/p&gt;

&lt;h3&gt;first_&amp;lt;element&amp;gt;&lt;/h3&gt;

&lt;p&gt;Each &amp;quot;find&amp;quot; method also has a corresponding &amp;quot;first&amp;quot; method. So when you
have multiple &lt;code&gt;article&lt;/code&gt; elements on a page with the text &amp;#39;Lorem ipsum,&amp;#39; you can call
&lt;code&gt;first_article(&amp;#39;Lorem ipsum&amp;#39;)&lt;/code&gt; without returning an ambiguous match in
Capybara.&lt;/p&gt;

&lt;h3&gt;&amp;lt;element&amp;gt;_number&lt;/h3&gt;

&lt;p&gt;In instances when you have lists or tables and you&amp;#39;d like to verify the
content of a specific &lt;code&gt;li&lt;/code&gt; or &lt;code&gt;tr&lt;/code&gt;, CapybaraExtensions allows
you to target the nth occurence of the element via
&lt;code&gt;#list_item_number&lt;/code&gt; and &lt;code&gt;#row_number&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So given the following HTML:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;John Doe&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Jane Doe&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Juan Doe&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can find the second &lt;code&gt;li&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;list_item_number(&lt;span class="integer"&gt;2&lt;/span&gt;) &lt;span class="comment"&gt;# =&amp;gt; 'Jane Doe'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Use these methods for testing how elements are being ordered.&lt;/p&gt;

&lt;h2&gt;Matchers&lt;/h2&gt;

&lt;p&gt;CapybaraExtensions extends Capybara&amp;#39;s matchers with methods for
verifying the presence of images, the value of input fields, and the
presence of meta tags. All of these methods return a boolean.&lt;/p&gt;

&lt;h3&gt;field_values&lt;/h3&gt;

&lt;p&gt;CapybaraExtensions comes with a &lt;code&gt;#has_field_value?&lt;/code&gt; method which checks
the value of a form field. Ensuring that your records save and update
correctly should be the domain of your unit tests, however this method
can come in handy when you&amp;#39;re not persisting data to the back-end. For
example, after performing a search, you may want to ensure that the
query persists in the search field after redirect.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;within form(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Search&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
  has_field_value?(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;search&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;capybara images&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="comment"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;images&lt;/h3&gt;

&lt;p&gt;Asserting that text appears on the page is easy with Capybara&amp;#39;s
&lt;code&gt;#must_have_content&lt;/code&gt; method; asserting
that a particular image appears has always been a little tougher.
&lt;code&gt;#must_have_image&lt;/code&gt; takes a hash with the &lt;code&gt;src&lt;/code&gt; and/or &lt;code&gt;alt&lt;/code&gt; attributes
you&amp;#39;re looking for. You can pass a string for either of these keys, and
an instance of &lt;code&gt;Regexp&lt;/code&gt; to the &lt;code&gt;src&lt;/code&gt; attribute when you want to hone in
on a portion of the &lt;code&gt;src&lt;/code&gt; attribute without worrying about the rest of
the URL.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;page.has_image?(&lt;span class="key"&gt;src&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;http://gallery.photo.net/photo/8385754-md.jpg&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
&lt;span class="key"&gt;alt&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Capybara&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="comment"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;meta_tags&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;#has_meta_tag&lt;/code&gt; checks the &lt;code&gt;head&lt;/code&gt; for meta tags. Just pass in the &lt;code&gt;name&lt;/code&gt;
and &lt;code&gt;content&lt;/code&gt; you&amp;#39;re expecting to find. We use this method quite a bit to ensure that our pages are looking good
from a search engine optimization standpoint.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;page.has_meta_tag?(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Introducing CapybaraExtensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="comment"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We hope this gem makes your tests a little more descriptive and your &lt;code&gt;test_helper.rb&lt;/code&gt; a little lighter. As always, we welcome pull requests and issues via Github. Thanks!&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install CapybaraExtensions from &lt;a href="http://rubygems.org/gems/capybara-extensions"&gt;Rubygems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow CapybaraExtensions on &lt;a href="https://github.com/dockyard/capybara-extensions"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read up on CapybaraExtensions on
&lt;a href="http://rubydoc.info/gems/capybara-extensions/frames"&gt;RubyDoc.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Design Patterns: The Command Pattern</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/11/05/design-patterns-command-pattern.html"/>
    <id>http://reefpoints.dockyard.com/2013/11/05/design-patterns-command-pattern.html</id>
    <published>2013-11-05T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Doug Yun</name>
    </author>
    <summary>Exploring design patterns and their use cases</summary>
    <content type="html">&lt;h2&gt;Let&amp;#39;s get ready for some football!&lt;/h2&gt;

&lt;p&gt;One of my favorite sports is American football; it&amp;#39;s strategic, physical,
and wild! As a fan - and once high school player - of the sport, I&amp;#39;ve gained some
valuable lessons from my experiences. For example, I&amp;#39;ve learned that &amp;quot;persistence
is key&amp;quot;, &amp;quot;giving up is for losers&amp;quot;, and that &amp;quot;water sucks, Gatorade is better.&amp;quot;&lt;/p&gt;

&lt;p&gt;While those are fine gems of wisdom, today we&amp;#39;ll be
covering one of the most overlooked teachings in football: the power
of &lt;strong&gt;Command&lt;/strong&gt; pattern.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Command&lt;/strong&gt; design pattern intends to separate and decouple an object of invocation
from the object that receives the message of invocation. We will
encapsulate all pertinent information of a method and execute the method
at a later time. Essentially, the &lt;strong&gt;Command&lt;/strong&gt; pattern gives us the ability
to queue a series of operations for a later time. Let&amp;#39;s dig in.&lt;/p&gt;

&lt;h2&gt;Put me in, Coach!&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s start by creating a &lt;code&gt;BostonNarwin&lt;/code&gt; class from which our
football players will inherit from.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# football.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;BostonNarwin&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:action&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(action)
    &lt;span class="instance-variable"&gt;@action&lt;/span&gt; = action
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;name&lt;/span&gt;
    &lt;span class="predefined-constant"&gt;self&lt;/span&gt;.class
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we&amp;#39;ll need some key players; let&amp;#39;s create &lt;code&gt;Quarterback&lt;/code&gt; and &lt;code&gt;Receiver&lt;/code&gt; classes.
For fun, we&amp;#39;re going to add a &lt;code&gt;TeamOwner&lt;/code&gt; class too.
All three of these classes are going to possess a method called &lt;code&gt;#execute&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each of these classes can be considered as instances of separate
&lt;strong&gt;commands&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# football.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Quarterback&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;BostonNarwin&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:path&lt;/span&gt;, &lt;span class="symbol"&gt;:play&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(path, play)
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hut! Hut! Red 19! Red 19! Hike!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@path&lt;/span&gt; = path
    &lt;span class="instance-variable"&gt;@play&lt;/span&gt; = play
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;execute&lt;/span&gt;
    file = &lt;span class="constant"&gt;File&lt;/span&gt;.open path, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;w&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    file.write &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;play&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="char"&gt;\n&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    file.close
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Receiver&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;BostonNarwin&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:path&lt;/span&gt;, &lt;span class="symbol"&gt;:play&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(path, play)
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Run, run, run!!!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@path&lt;/span&gt; = path
    &lt;span class="instance-variable"&gt;@play&lt;/span&gt; = play
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;execute&lt;/span&gt;
    file = &lt;span class="constant"&gt;File&lt;/span&gt;.open path, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    file.write &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;play&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="char"&gt;\n&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    file.close
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;TeamOwner&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;BostonNarwin&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:path&lt;/span&gt;, &lt;span class="symbol"&gt;:target&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(path, target)
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;We are moving the team from &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;prettify path&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; to &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;prettify target&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@path&lt;/span&gt; = path
    &lt;span class="instance-variable"&gt;@target&lt;/span&gt; = target
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;execute&lt;/span&gt;
    &lt;span class="constant"&gt;FileUtils&lt;/span&gt;.mv path, target
    file = &lt;span class="constant"&gt;File&lt;/span&gt;.open target, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    file.write &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;: We moved from &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;prettify path&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; to &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;prettify target&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    file.close
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;prettify&lt;/span&gt;(pathname)
    (pathname.chomp &lt;span class="constant"&gt;File&lt;/span&gt;.extname(pathname)).capitalize
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, let&amp;#39;s create a class that keeps track of the &lt;code&gt;Quarterback&lt;/code&gt;, &lt;code&gt;Receiver&lt;/code&gt;, and
&lt;code&gt;TeamOwner&lt;/code&gt; commands. We can use the
&lt;a href="http://reefpoints.dockyard.com/2013/10/01/design-patterns-composite-pattern.html"&gt;&lt;strong&gt;Composite&lt;/strong&gt; pattern&lt;/a&gt;
to create this new class.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# football.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;CompositeCommand&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;BostonNarwin&lt;/span&gt;
  attr_accessor &lt;span class="symbol"&gt;:commands&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@commands&lt;/span&gt; = []
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_command&lt;/span&gt;(*args)
    args.each { |arg| commands &amp;lt;&amp;lt; arg }
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;execute&lt;/span&gt;
    commands.each { |command| command.execute }
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, we can kickoff some football commands!&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;load 'football.rb'

quarterback = Quarterback.new('boston.txt', 'I'm going to throw a perfect pass!')
# =&amp;gt; #&amp;lt;Quarterback:0x007ff6f5c5c148
     @action=&amp;quot;Hut! Hut! Red 19! Red 19! Hike!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @play=&amp;quot;I'm going to throw a perfect pass!&amp;quot;&amp;gt;

receiver = Receiver.new('boston.txt', 'I'm going to catch the ball!')
# =&amp;gt; #&amp;lt;Receiver:0x007ff6f5c949f8
     @action=&amp;quot;Run, run, run!!!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @play=&amp;quot;I'm going to catch the ball!&amp;quot;&amp;gt;

team_owner = TeamOwner.new('boston.txt', 'somerville.txt')
# =&amp;gt; #&amp;lt;TeamOwner:0x007ff6f5ccd028
     @action=&amp;quot;We are moving the team from Boston to Somerville!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @target=&amp;quot;somerville.txt&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Great! Now we&amp;#39;ll create an instance of the &lt;code&gt;CompositeCommand&lt;/code&gt;, add
each sub-command with &lt;code&gt;#add_command&lt;/code&gt;, and then execute each command
with &lt;code&gt;#execute&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;command = CompositeCommand.new
# =&amp;gt; #&amp;lt;CompositeCommand:0x007ff6f5b82948 @commands=[]&amp;gt;

command.add_command quarterback, receiver, team_owner
# =&amp;gt; [#&amp;lt;Quarterback:0x007ff6f5c5c148
     @action=&amp;quot;Hut! Hut! Red 19! Red 19! Hike!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @play=&amp;quot;I'm going to throw a perfect pass!&amp;quot;&amp;gt;,
     #&amp;lt;Receiver:0x007ff6f5c949f8
     @action=&amp;quot;Run, run, run!!!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @play=&amp;quot;I'm going to catch the ball!&amp;quot;&amp;gt;,
     #&amp;lt;TeamOwner:0x007ff6f5ccd028
     @action=&amp;quot;We are moving the team from Boston to Somerville!&amp;quot;,
     @path=&amp;quot;boston.txt&amp;quot;,
     @target=&amp;quot;somerville.txt&amp;quot;&amp;gt;]

command.execute
# ...  Omitted for brevity ...

exit
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, let&amp;#39;s list out the files in our current directory and view the contents
of our recently created text file.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;$ ls
# =&amp;gt; football.rb   somerville.txt

$ less somerville.txt
# =&amp;gt; Quarterback: I'm going to throw a perfect pass!
     Receiver: I'm going to catch the ball!
     TeamOwner: We moved from Boston to Somerville!
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Wow! The &lt;strong&gt;Command&lt;/strong&gt; pattern in action!&lt;/p&gt;

&lt;h2&gt;Discussion&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Command&lt;/strong&gt; pattern suggests that we create objects that perform
specific tasks and actions. For our example, the &lt;code&gt;Quarterback&lt;/code&gt; object
created a file, the &lt;code&gt;Receiver&lt;/code&gt; appended to the file, and the &lt;code&gt;TeamOwner&lt;/code&gt;
object moved it. Each of the command objects completed their action
through &lt;code&gt;CompositeCommand#execute&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Having one object, an instance of &lt;code&gt;CompositeCommand&lt;/code&gt;, that executes all
stored commands presents us with solutions ranging from simple file
manipulation to user triggered interaction. The &lt;strong&gt;Command&lt;/strong&gt; pattern
also allows us to &amp;quot;store&amp;quot; and &amp;quot;remember&amp;quot; commands prior to and after
execution.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed our example and go Boston Narwins!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Buffers, Windows, Tabs... Oh My! Part 1: Vim Buffers</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/10/22/vim-buffers.html"/>
    <id>http://reefpoints.dockyard.com/2013/10/22/vim-buffers.html</id>
    <published>2013-10-22T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Doug Yun</name>
    </author>
    <summary>A painless tutorial on Vim buffers</summary>
    <content type="html">&lt;p&gt;First off, &lt;a href="http://boston.redsox.mlb.com"&gt;GO SOX&lt;/a&gt;!!!11&lt;/p&gt;

&lt;p&gt;Now that I&amp;#39;ve reinforced my allegiance to America&amp;#39;s favorite baseball team, let&amp;#39;s
talk about Vim. In this series of posts, we&amp;#39;ll explore buffers,
windows, and tabs.&lt;/p&gt;

&lt;p&gt;Today, our topic will be &lt;em&gt;buffers&lt;/em&gt;, editable files that are
available in-memory.&lt;/p&gt;

&lt;p&gt;When you first open a file through a Vim session, you are creating and working
in a buffer, typically through a window. For the sake of today&amp;#39;s discussion,
we will consider working with multiple buffers through only one window, our
viewport of the working buffer.&lt;/p&gt;

&lt;h3&gt;Let&amp;#39;s open a buffer&lt;/h3&gt;

&lt;p&gt;We&amp;#39;re going to setup an easy exercise for today&amp;#39;s post. If you don&amp;#39;t want to
follow along, feel free to try the exercise in your own project.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s create a dummy directory and some of text files:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;mkdir dummy &amp;amp;&amp;amp; cd dummy
echo 'The Red Sox rule!' &amp;gt; redsox.txt &amp;amp;&amp;amp; echo 'Cardinals drool!' &amp;gt; cardinals.txt
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, open up the &lt;code&gt;redsox.txt&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;vim redsox.txt      # =&amp;gt; The Red Sox rule!
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Congratulations, you&amp;#39;re already using buffers!&lt;/p&gt;

&lt;h3&gt;Buffer indicators&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s open the &lt;code&gt;cardinals.txt&lt;/code&gt; file in a &lt;em&gt;hidden&lt;/em&gt; buffer. We can accomplish
this through the current &lt;code&gt;redsox.txt&lt;/code&gt; buffer by using &lt;code&gt;:badd&lt;/code&gt; or &lt;code&gt;:bad&lt;/code&gt;. Next, we&amp;#39;ll
list out all buffers, hidden or active, with &lt;code&gt;:ls&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;# Inside the current buffer, get into Vim's command mode and use the command `:badd`.
# List all buffers with `:ls`.

:badd candinals.txt     # 'badd' =&amp;gt; 'Buffer ADD'
                        # You can also use `:bad`
:ls
  ### =&amp;gt;   1    %a   &amp;quot;redsox.txt&amp;quot;              line 1
           2         &amp;quot;cardinals.txt&amp;quot;           line 1
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;:ls&lt;/code&gt; command returns information about each buffer: the unique buffer
number, buffer indicators, file name, and the line number of your current
position within the file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Buffer number: A unique number to identify individual buffers.&lt;/li&gt;
&lt;li&gt;Buffer indicators:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;: buffer in the current window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;: alternate buffer, which can be accessed by &lt;code&gt;CTRL-6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;: active buffer, loaded and visible&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt;: hidden buffer, loaded but not visible&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;: a buffer that cannot be modified, &lt;code&gt;modifiable&lt;/code&gt; off&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;: a buffer that is readonly&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;: a buffer that has been successfully modified&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;: a buffer with read errors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;/code&gt;: if there is no buffer indicator, it signifies a buffer that has not been
loaded yet&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Buffer name: The name of the file.&lt;/li&gt;
&lt;li&gt;Buffer line number: The current line number that the cursor is on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Working with multiple buffers&lt;/h3&gt;

&lt;p&gt;As we can see, our &lt;code&gt;cardinals.txt&lt;/code&gt; has yet to be loaded. Let&amp;#39;s open it into
our window and view our current buffers.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:e cardinals.txt   # =&amp;gt; Cardinals drool!

:ls
  ### =&amp;gt;   1    #    &amp;quot;redsox.txt&amp;quot;              line 1
           2    %a   &amp;quot;cardinals.txt&amp;quot;           line 1
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Nice! We can see that our &lt;code&gt;redsox.txt&lt;/code&gt; file is our alternate buffer. Let&amp;#39;s switch
to the &lt;code&gt;redsox.txt&lt;/code&gt; by hitting &lt;code&gt;CTRL-6&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we&amp;#39;ll create a new text file, &lt;code&gt;worldseries.txt&lt;/code&gt;, write &lt;code&gt;World Series!&lt;/code&gt; inside that file,
and check out our list of buffers.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;:e worldseries.txt   # Write &amp;quot;World Series!&amp;quot; inside the file and save it.
:ls
  ### =&amp;gt;   1    #    &amp;quot;redsox.txt&amp;quot;              line 1
           2         &amp;quot;cardinals.txt&amp;quot;           line 1
           3    %a   &amp;quot;worldseries.txt&amp;quot;         line 1
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Our alternate buffer is the &lt;code&gt;redsox.txt&lt;/code&gt; file. Remember, if we want to quickly
switch to the alternate buffer, we can use &lt;code&gt;CTRL-6&lt;/code&gt;. What if we want to open the
&lt;code&gt;cardinals.txt&lt;/code&gt; into our current window?&lt;/p&gt;

&lt;p&gt;Well, we have a couple of options. From the &lt;code&gt;worldseries.txt&lt;/code&gt; file, we can use the
following vim commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:bp&lt;/code&gt; :  Switch to the previous buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:b2&lt;/code&gt; :  Switch to buffer number 2

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:b&lt;/code&gt; : Takes a buffer number as an argument&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go ahead and give it a try.&lt;/p&gt;

&lt;p&gt;Here are some other pertinent buffer commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:bn&lt;/code&gt; : Switch to the next buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:ball&lt;/code&gt; : Open all buffers into windows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:brew&lt;/code&gt; : Go back to the first buffer in the list - &amp;quot;Buffer REWind&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bd&lt;/code&gt; : Delete the buffer - also takes buffer numbers as arguments

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:bd 1 2 3&lt;/code&gt; : Will remove buffer numbers 1, 2, and 3&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;code&gt;:q&lt;/code&gt; is not the same as &lt;code&gt;:bd&lt;/code&gt;... try it and verify with &lt;code&gt;:ls&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;So what good are buffers?&lt;/h3&gt;

&lt;p&gt;To be honest, I just realized the power of buffers about a month ago.
Previously, thanks to a large monitor, I would have multtple windows
- as many as 6-8 - open during one Vim session.
Multiple windows are great, however, if I really needed to focus on a few
files, I&amp;#39;d have to close each insignificant file window.&lt;/p&gt;

&lt;p&gt;Nowadays, my workflow comprises of two or three windows, with multiple buffers in the background.
This has allowed me to rapidly move between files that I actively open and edit.&lt;/p&gt;

&lt;h3&gt;Remapping buffer commands&lt;/h3&gt;

&lt;p&gt;Here are some key remappings that speed up buffer movement:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; ~/.vimrc (or wherever else you keep your .vimrc)

&amp;quot; Move to the previous buffer with &amp;quot;gp&amp;quot;
nnoremap gp :bp&amp;lt;CR&amp;gt;

&amp;quot; Move to the next buffer with &amp;quot;gn&amp;quot;
nnoremap gn :bn&amp;lt;CR&amp;gt;

&amp;quot; List all possible buffers with &amp;quot;gl&amp;quot;
nnoremap gl :ls&amp;lt;CR&amp;gt;

&amp;quot; List all possible buffers with &amp;quot;gb&amp;quot; and accept a new buffer argument [1]
nnoremap gb :ls&amp;lt;CR&amp;gt;:b
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Remapping &lt;code&gt;gp&lt;/code&gt; will remove the Vim default functionality of &lt;code&gt;gp&lt;/code&gt;.
Use &lt;code&gt;:h gp&lt;/code&gt; to read more about it.&lt;/p&gt;

&lt;p&gt;Hope that provides some insight into the capabilities of Vim buffers!
If there is anything you&amp;#39;d like to add, please feel free and
comment in the discussion area. Thanks!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[1] Special thanks to &lt;a href="http://www.reddit.com/r/vim/comments/1p2a62/a_painless_tutorial_on_vim_buffers/ccxzq7e"&gt;romainl&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Namespaced Pages</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/10/06/namespaced-pages.html"/>
    <id>http://reefpoints.dockyard.com/2013/10/06/namespaced-pages.html</id>
    <published>2013-10-06T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>New functionality for the gem</summary>
    <content type="html">&lt;h2&gt;Simple Namespacing&lt;/h2&gt;

&lt;p&gt;We&amp;#39;ve been using our &lt;a href="https://github.com/dockyard/pages"&gt;Pages&lt;/a&gt; gem in
nearly all of our projects for over a year now. Its been great but could
only support pages on the root. I just released &lt;code&gt;0.2.0&lt;/code&gt; of the gem that
now supports namespacing:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;namespace &lt;span class="symbol"&gt;:work&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  pages &lt;span class="symbol"&gt;:client_1&lt;/span&gt;, &lt;span class="symbol"&gt;:client_2&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will give you the routes of &lt;code&gt;/work/client_1&lt;/code&gt; and &lt;code&gt;/work/client_2&lt;/code&gt;.
Your views will go into &lt;code&gt;app/views/work/pages&lt;/code&gt;. For more details see the
&lt;a href="https://github.com/dockyard/pages#namespacing"&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a future release of &lt;code&gt;Pages&lt;/code&gt; we plan on adding support automatic
pages. For example, you will no longer need to declare the pages in your
&lt;code&gt;config/routes.rb&lt;/code&gt; file. As long as the templates exist in the
&lt;code&gt;app/views/pages&lt;/code&gt; directory the route will happen automatically. In
addition we will also add support for pages nested under different
namespaces, or accessible from certain authentication state. All in the
name of serving up static page goodness!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Design Patterns: The Composite Pattern</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/10/01/design-patterns-composite-pattern.html"/>
    <id>http://reefpoints.dockyard.com/2013/10/01/design-patterns-composite-pattern.html</id>
    <published>2013-10-01T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Doug Yun</name>
    </author>
    <summary>Exploring design patterns and their use cases</summary>
    <content type="html">&lt;h2&gt;Coffee Coffee&lt;/h2&gt;

&lt;p&gt;If you&amp;#39;re anything like me, you&amp;#39;ll agree that every morning needs to start
out with a cup of coffee. And, if you&amp;#39;re anything like me, you&amp;#39;ll have
at least three different coffee making apparatuses. And, if you&amp;#39;re
anything like me... you&amp;#39;ll soon realize you may have an addiction.&lt;/p&gt;

&lt;p&gt;Joke aside, each coffee contraption requires a specific procedure
to be completed in order to brew a cup of joe; each having multiple parts,
taking differing amounts of time, requiring various numbers of steps, etc.&lt;/p&gt;

&lt;p&gt;Our coffee making process can be described by a basic example
of the &lt;em&gt;Composite&lt;/em&gt; method pattern.&lt;/p&gt;

&lt;h2&gt;The Best Part of Waking Up is a Composite Pattern in Your Cup&lt;/h2&gt;

&lt;p&gt;We can start by thinking of each coffee maker and coffee related task as a &lt;em&gt;subclass&lt;/em&gt; of
our &lt;code&gt;CoffeeRoutine&lt;/code&gt;. &lt;code&gt;CoffeeRoutine&lt;/code&gt; will be known as the &lt;em&gt;component&lt;/em&gt;, the base
class or interface that possesses the commonalities of simple and complex
objects. &lt;code&gt;CoffeeRoutine#time&lt;/code&gt; is the common trait among all
coffee related classes.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;CoffeeRoutine&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:task&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(task)
    &lt;span class="instance-variable"&gt;@task&lt;/span&gt; = task
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time&lt;/span&gt;
    &lt;span class="float"&gt;0.0&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we&amp;#39;ll create a couple of &lt;em&gt;leaf&lt;/em&gt; classes, which represent
indivisble portions of our pattern. Here are a couple of &lt;em&gt;leaf&lt;/em&gt; classes
that come to mind: &lt;code&gt;GrindCoffee&lt;/code&gt; and &lt;code&gt;BoilWater&lt;/code&gt;. These &lt;em&gt;leaf&lt;/em&gt; classes are
our most basic steps to making coffee.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;GrindCoffee&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Grinding some coffee!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time&lt;/span&gt;
    &lt;span class="float"&gt;0.5&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;BoilWater&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Boiling some water!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time&lt;/span&gt;
    &lt;span class="float"&gt;4.0&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;AddCoffee&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Adding in the coffee!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time&lt;/span&gt;
    &lt;span class="float"&gt;1.0&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;g = GrindCoffee.new

g.task    # =&amp;gt; 'Grinding some coffee!'
g.time    # =&amp;gt; 0.5
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, we can get to the namesake of the pattern: the &lt;em&gt;composite&lt;/em&gt; class. A
&lt;em&gt;composite&lt;/em&gt; class is a &lt;em&gt;component&lt;/em&gt; that also contain
&lt;em&gt;subcomponents&lt;/em&gt;. &lt;em&gt;Composite&lt;/em&gt; classes can be made up of smaller
&lt;em&gt;composite&lt;/em&gt; classes or &lt;em&gt;leaf&lt;/em&gt; classes.&lt;/p&gt;

&lt;p&gt;Our various coffee making apparatuses can be thought of as &lt;em&gt;composites&lt;/em&gt;.
Let&amp;#39;s check out the &lt;code&gt;FrenchPress&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;FrenchPress&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:task&lt;/span&gt;, &lt;span class="symbol"&gt;:steps&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(task)
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Using the French press to make coffee&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@steps&lt;/span&gt; = []
    add_step &lt;span class="constant"&gt;BoilWater&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;GrindCoffee&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;AddCoffee&lt;/span&gt;.new
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_step&lt;/span&gt;(step)
    steps &amp;lt;&amp;lt; step
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;remove_step&lt;/span&gt;(step)
    steps.delete step
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time_required&lt;/span&gt;
    total_time = &lt;span class="float"&gt;0.0&lt;/span&gt;
    steps.each { |step| total_time += step.time }
    total_time
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, we can simplify the &lt;code&gt;FrenchPress&lt;/code&gt; class by pulling out the
&lt;em&gt;composite&lt;/em&gt; functionality into its own class.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;CompositeTasks&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CoffeeRoutine&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:task&lt;/span&gt;, &lt;span class="symbol"&gt;:steps&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(task)
    &lt;span class="instance-variable"&gt;@steps&lt;/span&gt; = []
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_step&lt;/span&gt;(step)
    steps &amp;lt;&amp;lt; step
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;remove_step&lt;/span&gt;(step)
    steps.delete step
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;time_required&lt;/span&gt;
    total_time = &lt;span class="float"&gt;0.0&lt;/span&gt;
    steps.each { |step| total_time += step.time }
    total_time
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we can create &lt;em&gt;composite&lt;/em&gt; coffee makers easily... They&amp;#39;ll look
something like this:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;FrenchPress&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CompositeTasks&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Using the FrenchPress to make coffee!!!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    add_step &lt;span class="constant"&gt;GrindCoffee&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;BoilWater&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;AddCoffee&lt;/span&gt;.new
    &lt;span class="comment"&gt;# ... Omitted actual steps to make coffee from a French press ...&lt;/span&gt;
    &lt;span class="comment"&gt;# ... Imagine PressPlunger class has been defined already ...&lt;/span&gt;
    add_step &lt;span class="constant"&gt;PressPlunger&lt;/span&gt;.new
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;DripMaker&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;CompositeTasks&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Using the DripMaker to make coffee!!!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    add_step &lt;span class="constant"&gt;GrindCoffee&lt;/span&gt;.new
    add_step &lt;span class="constant"&gt;BoilWater&lt;/span&gt;
    add_step &lt;span class="constant"&gt;AddCoffee&lt;/span&gt;.new
    &lt;span class="comment"&gt;# ... Imagine PressStartButton class has been defined already ...&lt;/span&gt;
    add_step &lt;span class="constant"&gt;PressStartButton&lt;/span&gt;.new
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Swell... now we can call the &lt;code&gt;FrenchPress&lt;/code&gt; and &lt;code&gt;DripMaker&lt;/code&gt; coffee makers.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;frenchpress = FrenchPress.new

# =&amp;gt; #&amp;lt;FrenchPress:0x007f88fcf46410
       @task=&amp;quot;Using the FrenchPress to make coffee!!!&amp;quot;,
       @steps=
         [#&amp;lt;GrindCoffee:0x007f88fcf46370 @step=&amp;quot;Grinding some coffee!&amp;quot;&amp;gt;,
         #&amp;lt;BoilWater:0x007f88fcf46320 @step=&amp;quot;Boiling some water!&amp;quot;&amp;gt;]&amp;gt;
         #&amp;lt;AddCoffee:0x007f88fcf46329 @step=&amp;quot;Adding in the coffee!&amp;quot;&amp;gt;]&amp;gt;
         #&amp;lt;PressPlunger:0x007f88fcf46098 @step=&amp;quot;Pressing the plunger down!&amp;quot;&amp;gt;]&amp;gt;

dripmaker = DripMaker.new

# =&amp;gt; #&amp;lt;DripMaker:0x137t88fcf57109
       @task=&amp;quot;Using the DripMaker to make coffee!!!&amp;quot;,
       @steps=
         [#&amp;lt;GrindCoffee:0x007f88fcf46370 @step=&amp;quot;Grinding some coffee!&amp;quot;&amp;gt;,
         #&amp;lt;BoilWater:0x007f88fcf52520 @step=&amp;quot;Boiling some water!&amp;quot;&amp;gt;]&amp;gt;
         #&amp;lt;AddCoffee:0x007f88fcf46123 @step=&amp;quot;Adding in the coffee!&amp;quot;&amp;gt;]&amp;gt;
         #&amp;lt;PressStartButton:0x007f88fcf46432 @step=&amp;quot;Pushing the start button!&amp;quot;&amp;gt;]&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we can also check the time required for each coffee maker.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;frenchpress.time_required # =&amp;gt; 12.4
dripmaker.time_required   # =&amp;gt; 8.5
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;

&lt;p&gt;Implementing the &lt;em&gt;Composite&lt;/em&gt; pattern is pretty simple.&lt;/p&gt;

&lt;p&gt;We create a &lt;em&gt;component&lt;/em&gt; class that ties the numerous simple and
complex characteristics together. In our example, &lt;code&gt;CoffeeRoutine&lt;/code&gt;
defines an elementary method &lt;code&gt;#time&lt;/code&gt; and each child class implements
its own amount.&lt;/p&gt;

&lt;p&gt;Next, we create &lt;em&gt;leaf&lt;/em&gt; classes, &lt;code&gt;AddCoffee&lt;/code&gt;, &lt;code&gt;BoilWater&lt;/code&gt;, and &lt;code&gt;GrindCoffee&lt;/code&gt;,
that share the same characteristics with one another. Remember that it&amp;#39;s the nature
of &lt;em&gt;leaf&lt;/em&gt; classes to be simple. If you happen across a &lt;em&gt;leaf&lt;/em&gt; class that
could be broken up, it might potentially be a &lt;em&gt;composite&lt;/em&gt; class in disguise.
Break up those actions into individual &lt;em&gt;leaf&lt;/em&gt; classes and turn the original class
into a &lt;em&gt;composite&lt;/em&gt;. All of our &lt;em&gt;leaf&lt;/em&gt; classes had a &lt;code&gt;#time&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;composite&lt;/em&gt; class handles all the subtasks, essentially using the child classes
at its will. We can see that our two &lt;em&gt;composite&lt;/em&gt; classes and their methods, &lt;code&gt;FrenchPress#time_required&lt;/code&gt;
and &lt;code&gt;DripMaker#time_required&lt;/code&gt;. manipulate the method &lt;code&gt;#time&lt;/code&gt; from the &lt;em&gt;leaf&lt;/em&gt; classes.
Ultimately, our coffee makers are able to treat each step,
&lt;code&gt;GrindCoffee&lt;/code&gt;, &lt;code&gt;BoilWater&lt;/code&gt; and &lt;code&gt;AddCoffee&lt;/code&gt; uniformly.&lt;/p&gt;

&lt;p&gt;Hope this helps you with your morning routine!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vim: Moving Lines Ain't Hard</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/09/26/vim-moving-lines-aint-hard.html"/>
    <id>http://reefpoints.dockyard.com/2013/09/26/vim-moving-lines-aint-hard.html</id>
    <published>2013-09-26T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Doug Yun</name>
    </author>
    <summary>Quick ways to move lines</summary>
    <content type="html">&lt;p&gt;In the last post, we briefly discussed the power of the
&lt;a href="http://reefpoints.dockyard.com/2013/09/11/vim-staying-on-home-row-via-map.html"&gt;&lt;em&gt;map&lt;/em&gt; command&lt;/a&gt;.
In today&amp;#39;s post, we&amp;#39;re going to use &lt;em&gt;map&lt;/em&gt; again in order to move
lines and blocks around.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s use an example:
Our goal is to move the &lt;em&gt;first line&lt;/em&gt; to its proper location. From this:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- second line ---
--- third line ---
--- first line ---
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To this:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- first line ---
--- second line ---
--- third line ---
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Delete, Then Paste&lt;/h2&gt;

&lt;p&gt;Here is one of the most common ways, it ain&amp;#39;t pretty but it gets the job done.
We&amp;#39;ll delete the desired line and paste it to the target location.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- second line ---
--- third line ---
--- first line ---

# Delete the &amp;quot;first line&amp;quot;, move to the &amp;quot;second line&amp;quot;, and paste the registered
# &amp;quot;first line&amp;quot; above the &amp;quot;second line&amp;quot;.
#
# :3 --&amp;gt; &amp;lt;ENTER&amp;gt; --&amp;gt; dd --&amp;gt; j --&amp;gt; P
#
# or...
#
# :3d --&amp;gt; &amp;lt;ENTER&amp;gt; --&amp;gt; :2P --&amp;gt; &amp;lt;ENTER&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;I Like the Way You Move&lt;/h2&gt;

&lt;p&gt;The second way, use the &lt;em&gt;move&lt;/em&gt; command with &lt;code&gt;:m&lt;/code&gt;. I like this method a lot, as it
requires fewer keystrokes. It does require line numbers though. When using
absolute line numbers, the destination will be below the line number you specify,
so use &lt;code&gt;:m0&lt;/code&gt; to move to the top of the file.
Try using
&lt;a href="http://jeffkreeftmeijer.com/2013/vims-new-hybrid-line-number-mode/"&gt;hybrid mode&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- second line ---
--- third line ---
--- first line ---

# Move your cursor on the &amp;quot;first line&amp;quot; (the third line), use the *move* command and
# pass your desired line number as an argument. Hit enter.
#
# :3 --&amp;gt; &amp;lt;ENTER&amp;gt; --&amp;gt; :m0 --&amp;gt; &amp;lt;ENTER&amp;gt;
#
# or...
#
# :3m0 --&amp;gt; &amp;lt;ENTER&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Lazy Moving&lt;/h2&gt;

&lt;p&gt;Now getting to the &lt;em&gt;map&lt;/em&gt; command, I&amp;#39;ve found this pretty handy when
I need to move a line or block of lines a couple of lines upward or downward.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; In your ~/.vimrc
&amp;quot;
&amp;quot; Normal mode
nnoremap &amp;lt;C-j&amp;gt; :m .+1&amp;lt;CR&amp;gt;==
nnoremap &amp;lt;C-k&amp;gt; :m .-2&amp;lt;CR&amp;gt;==

&amp;quot; Insert mode
inoremap &amp;lt;C-j&amp;gt; &amp;lt;ESC&amp;gt;:m .+1&amp;lt;CR&amp;gt;==gi
inoremap &amp;lt;C-k&amp;gt; &amp;lt;ESC&amp;gt;:m .-2&amp;lt;CR&amp;gt;==gi

&amp;quot; Visual mode
vnoremap &amp;lt;C-j&amp;gt; :m '&amp;gt;+1&amp;lt;CR&amp;gt;gv=gv
vnoremap &amp;lt;C-k&amp;gt; :m '&amp;lt;-2&amp;lt;CR&amp;gt;gv=gv
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now you can move lines by holding &lt;em&gt;CTRL&lt;/em&gt; and &lt;em&gt;j&lt;/em&gt; (for up a line) or
&lt;em&gt;k&lt;/em&gt; (for down a line).&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- second line ---
--- third line ---
--- first line ---

# Move to the &amp;quot;first line&amp;quot;, hold &amp;lt;CTRL&amp;gt; and move up twice.
#
# :3 --&amp;gt; &amp;lt;ENTER&amp;gt; --&amp;gt; &amp;lt;CTRL&amp;gt; + kk
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;#39;s move a block of lines:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;--- fourth line ---
--- fifth line ---
--- first line ---
--- second line ---
--- third line ---

# Move to the &amp;quot;first line&amp;quot;.
# Select the &amp;quot;first line&amp;quot;, &amp;quot;second line&amp;quot;, and the &amp;quot;third line&amp;quot; with Visual mode.
# Hit CTRL and move upwards twice.
#
# :3 -- &amp;lt;ENTER&amp;gt; --&amp;gt; &amp;lt;SHIFT&amp;gt; + V --&amp;gt; jj --&amp;gt; &amp;lt;CTRL&amp;gt; + kk
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Other Ways&lt;/h2&gt;

&lt;p&gt;There are plenty of other tricks that move around lines in Vim. The preceding
examples were just a few that I employ everyday. If you&amp;#39;ve got something cool to
share, please let me know!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vim: Staying on Home Row via Map</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/09/11/vim-staying-on-home-row-via-map.html"/>
    <id>http://reefpoints.dockyard.com/2013/09/11/vim-staying-on-home-row-via-map.html</id>
    <published>2013-09-11T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Doug Yun</name>
    </author>
    <summary>Map commands for quick escapes and saves</summary>
    <content type="html">&lt;p&gt;Here at DockYard, the majority of us are using Vim. I don&amp;#39;t want to
write about the benefits of using this sweet editor, as that would take too long,
but instead, I&amp;#39;d like to share a couple of my favorite mappings for
escaping and saving files.&lt;/p&gt;

&lt;h2&gt;Vanilla Vim: Escaping and Saving&lt;/h2&gt;

&lt;p&gt;Escaping out to &lt;em&gt;Normal&lt;/em&gt; mode from the other modes in Vim is straightforward:
simply hit the &lt;code&gt;Esc&lt;/code&gt; key.
Saving files is accomplished by, from &lt;code&gt;Normal&lt;/code&gt; mode, pressing &lt;code&gt;:w&lt;/code&gt; and then &lt;code&gt;Enter&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;So... What&amp;#39;s the Problem?&lt;/h2&gt;

&lt;p&gt;During a session, especially when I&amp;#39;m writing large pieces of text,
I&amp;#39;d find myself in a repetitive rut:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I just typed out a couple of sentences and want to save my progress&lt;/li&gt;
&lt;li&gt;I&amp;#39;d remove my left hand from home row to hit the &lt;code&gt;Esc&lt;/code&gt; key&lt;/li&gt;
&lt;li&gt;Saving the file required me, once again to leave home row, to hit &lt;code&gt;:w&lt;/code&gt;
and then the &lt;code&gt;Enter&lt;/code&gt; or the &lt;code&gt;Return&lt;/code&gt; key&lt;/li&gt;
&lt;li&gt;To continue on, I&amp;#39;d press &lt;code&gt;i&lt;/code&gt; and type along&lt;/li&gt;
&lt;li&gt;Repeat, repeat, repeat...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See where I&amp;#39;m getting at?&lt;/p&gt;

&lt;h2&gt;Let&amp;#39;s Talk About Map&lt;/h2&gt;

&lt;p&gt;Before we review and
&lt;a href="http://www.flickr.com/search/?q=pasta"&gt;copy-pasta&lt;/a&gt;
the portion of my &lt;code&gt;.vimrc&lt;/code&gt;, let&amp;#39;s briefly go over the very basics of the
pertinent map commands.
You can find the entire &lt;a href="http://vimdoc.sourceforge.net/htmldoc/map.html"&gt;map documentation here&lt;/a&gt;
or by typing &lt;code&gt;:help map&lt;/code&gt; within a Vim session.&lt;/p&gt;

&lt;p&gt;Protip: To open help texts into a full buffer, &lt;code&gt;:h map | only&lt;/code&gt; or to open them in a separate tab &lt;code&gt;:tab h map&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Recursive Map&lt;/h3&gt;

&lt;p&gt;First, we&amp;#39;re going to talk about &lt;em&gt;recursive&lt;/em&gt; map commands. A &lt;em&gt;recursive&lt;/em&gt;
command will transform one result to another result, if there is another
binding to that key. An example can be found at the &lt;code&gt;.vimrc&lt;/code&gt; below.&lt;/p&gt;

&lt;p&gt;Here are the basic &lt;em&gt;recursive&lt;/em&gt; map commands.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;  - command to transform the operation of typed keys within &lt;em&gt;ALL&lt;/em&gt; modes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can prepend the first letter of the desired mode to &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nmap&lt;/code&gt; - transform the operation of typed keys within &lt;em&gt;Normal&lt;/em&gt;
mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imap&lt;/code&gt; - transform the operations of typed keys within
&lt;em&gt;Insert&lt;/em&gt; mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vmap&lt;/code&gt; - transform the operations of typed keys within
&lt;em&gt;Visual&lt;/em&gt; and &lt;em&gt;Select&lt;/em&gt; mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if I had this within my &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; ~/.vimrc
&amp;quot;
&amp;quot; Note: double quotes signifies comments

nmap 0 gg
imap n N

&amp;quot; Time for a little recursive map
imap d D
imap D wat
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since &lt;code&gt;0&lt;/code&gt; is mapped to &lt;code&gt;gg&lt;/code&gt; within &lt;em&gt;Normal&lt;/em&gt; mode, I&amp;#39;ll be sent to the
top of the file by pressing &lt;code&gt;0&lt;/code&gt;.
Moreover, while in &lt;em&gt;Insert&lt;/em&gt; mode, every character &lt;code&gt;n&lt;/code&gt; that I type will turn into &lt;code&gt;N&lt;/code&gt;.
Lastly, because of the recursive mapping, typing &lt;code&gt;d&lt;/code&gt; in &lt;em&gt;Insert&lt;/em&gt; mode
will return &lt;code&gt;wat&lt;/code&gt;. You can think of it as something like: &lt;code&gt;d&lt;/code&gt; =&amp;gt; &lt;code&gt;D&lt;/code&gt; =&amp;gt;
&lt;code&gt;wat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thankfully, there&amp;#39;s a &lt;em&gt;non-recursive&lt;/em&gt; map.&lt;/p&gt;

&lt;h3&gt;Non-recursive Map&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Non-recursive&lt;/em&gt; map commands are signified by adding &lt;code&gt;nore&lt;/code&gt; after the
 mode modifier.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nnoremap&lt;/code&gt; - non-recursive map for &lt;em&gt;Normal&lt;/em&gt; mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inoremap&lt;/code&gt; - non-recursive map for &lt;em&gt;Insert&lt;/em&gt; mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vnoremap&lt;/code&gt; - non-recursive map for &lt;em&gt;Visual&lt;/em&gt; and &lt;em&gt;Select&lt;/em&gt; mode&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; ~/.vimrc

inoremap c C
inoremap C nope
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, in &lt;em&gt;Insert&lt;/em&gt; mode, if we type &lt;code&gt;c&lt;/code&gt;, we will return &lt;code&gt;C&lt;/code&gt;; the transformation of
&lt;code&gt;c&lt;/code&gt; to &lt;code&gt;nope&lt;/code&gt; will not occur.&lt;/p&gt;

&lt;h2&gt;Enter the .vimrc&lt;/h2&gt;

&lt;p&gt;Now that we got the basics out of the way, here is an example of my
&lt;code&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; ~/.vimrc
&amp;quot; *** The Two Hand system ***
&amp;quot;
&amp;quot; &amp;lt;Cr&amp;gt; signifies the &amp;quot;return&amp;quot; key

inoremap ;a &amp;lt;Esc&amp;gt;
inoremap ;d &amp;lt;Esc&amp;gt;:update&amp;lt;Cr&amp;gt;
inoremap ;f &amp;lt;C-O&amp;gt;:update&amp;lt;Cr&amp;gt;
nnoremap ;f :update&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m using &lt;code&gt;:update&lt;/code&gt; here, which is &amp;quot;like &lt;code&gt;:write&lt;/code&gt;, but only write when the buffer has been
modified.&amp;quot;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s go over these mappings.&lt;/p&gt;

&lt;p&gt;The first one, &lt;code&gt;inoremap ;a &amp;lt;Esc&amp;gt;&lt;/code&gt; maps the &lt;em&gt;semi-colon&lt;/em&gt; and &lt;em&gt;a&lt;/em&gt; key
together when in &lt;em&gt;Insert&lt;/em&gt; mode. By pressing &lt;code&gt;;&lt;/code&gt; and then &lt;code&gt;a&lt;/code&gt; immediately afterwards, we mimic
the functionality of the &lt;em&gt;Escape&lt;/em&gt; key.&lt;/p&gt;

&lt;p&gt;The second map, &lt;code&gt;inoremap ;d &amp;lt;Esc&amp;gt;:update&amp;lt;Cr&amp;gt;&lt;/code&gt; maps the &lt;em&gt;semi-colon&lt;/em&gt; and the &lt;em&gt;d&lt;/em&gt; key.
Pressing &lt;code&gt;;&lt;/code&gt; and then &lt;code&gt;d&lt;/code&gt; immediately afterwards returns the sequence of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;em&gt;Insert&lt;/em&gt; mode, escape to &lt;em&gt;Normal&lt;/em&gt; mode&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;:&lt;/code&gt; to get inside the &lt;em&gt;Command&lt;/em&gt; mode, and type the &lt;code&gt;update&lt;/code&gt;
command&lt;/li&gt;
&lt;li&gt;Complete the sequence by &amp;quot;hitting&amp;quot; &lt;em&gt;Return&lt;/em&gt;, thus saving the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The third map command, &lt;code&gt;inoremap ;f &amp;lt;C-O&amp;gt;:update&amp;lt;Cr&amp;gt;&lt;/code&gt;, allows us to
type &lt;code&gt;;&lt;/code&gt; and then &lt;code&gt;f&lt;/code&gt; to return:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;em&gt;Insert&lt;/em&gt; mode, escape out to &lt;em&gt;Normal&lt;/em&gt; with &lt;code&gt;&amp;lt;C-O&amp;gt;&lt;/code&gt;, which allows
us to escape out for &lt;em&gt;ONE&lt;/em&gt; command.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;:&lt;/code&gt; to get inside &lt;em&gt;Command&lt;/em&gt; mode, and then type &lt;code&gt;udpate&lt;/code&gt;. This is
our one command for &lt;code&gt;&amp;lt;C-O&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot;Hit&amp;quot; the &lt;em&gt;Return&lt;/em&gt;, thus saving the file&lt;/li&gt;
&lt;li&gt;We&amp;#39;re back in &lt;em&gt;Insert&lt;/em&gt; mode, thanks to &lt;code&gt;&amp;lt;C-O&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, the &lt;code&gt;nnoremap ;f :update&amp;lt;CR&amp;gt;&lt;/code&gt; mapping means by typing &lt;code&gt;;&lt;/code&gt; and
then &lt;code&gt;f&lt;/code&gt; in &lt;em&gt;Normal&lt;/em&gt; mode, it will result in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since, we&amp;#39;re already in &lt;em&gt;Normal&lt;/em&gt; mode, we get into &lt;em&gt;Command&lt;/em&gt; mode by
typing &lt;code&gt;:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Type the &lt;code&gt;update&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;&amp;quot;Hit&amp;quot; the &lt;em&gt;Return&lt;/em&gt; key, and save the file&lt;/li&gt;
&lt;li&gt;We remain in &lt;em&gt;Normal&lt;/em&gt; mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The snippet below restricts these commands to your right hand.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;quot; ~/.vimrc
&amp;quot; *** The Right Hand system ***

inoremap ;l &amp;lt;Esc&amp;gt;
inoremap ;k &amp;lt;Esc&amp;gt;:update&amp;lt;Cr&amp;gt;
inoremap ;j &amp;lt;C-O&amp;gt;:update&amp;lt;Cr&amp;gt;
nnoremap ;j :update&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, I kept &lt;code&gt;;&lt;/code&gt; as a prefix to my map commands. This
conveniently keeps me at homerow. I&amp;#39;ve played with mapping everything
with my right hand, but it just didn&amp;#39;t feel &amp;quot;right&amp;quot; (apologies for the
bad pun).&lt;/p&gt;

&lt;p&gt;Overall, this snippet makes me happy and I believe this will make your
day as well. If there are some other tricks
concerning escaping and saving files, please let me know in the
comments! Thanks!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Postgres_ext adds rank and common table expressions</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/09/06/postgres_ext-adds-rank-and-common-table-expressions.html"/>
    <id>http://reefpoints.dockyard.com/2013/09/06/postgres_ext-adds-rank-and-common-table-expressions.html</id>
    <published>2013-09-06T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>In postgres_ext 2.1, complex queries get much easier</summary>
    <content type="html">&lt;p&gt;This week, I released &lt;a href="https://github.com/dockyard/postgres_ext"&gt;postgres_ext&lt;/a&gt; 2.1.0, which includes
ActiveRecord::Relation methods to simplify queries that require the use
of &lt;a href="http://www.postgresql.org/docs/current/static/queries-with.html"&gt;Common Table
Expressions&lt;/a&gt;
(CTEs) and the &lt;a href="http://www.postgresql.org/docs/9.2/static/functions-window.html"&gt;&lt;code&gt;rank()&lt;/code&gt; windowing
function&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Common Table Expressions&lt;/h2&gt;

&lt;p&gt;In a sentence, CTEs allow you to define a temporary table to be used in
a larger query. Let&amp;#39;s look at an example:&lt;/p&gt;
&lt;div class="highlight SQL "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;WITH scores_for_game &lt;span class="keyword"&gt;AS&lt;/span&gt; (
&lt;span class="class"&gt;SELECT&lt;/span&gt; *
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores
&lt;span class="keyword"&gt;WHERE&lt;/span&gt; game_id = &lt;span class="integer"&gt;1&lt;/span&gt;
)
&lt;span class="class"&gt;SELECT&lt;/span&gt; *
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores_for_game
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the above, somewhat arbitrary, example, we create a temporary table
of &lt;code&gt;scores_for_game&lt;/code&gt; which we then select from. CTEs allow you to
organize your more complex queries, and can be really helpful in certain
cases.&lt;/p&gt;

&lt;p&gt;We can make the same SQL call in ActiveRecord with postgres_ext.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Score&lt;/span&gt;.from_cte(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;scores_for_game&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="constant"&gt;Score&lt;/span&gt;.where(&lt;span class="key"&gt;game_id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;))
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can also query against the CTE expression by chaining off the
resulting ActiveRecord::Relation&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Score&lt;/span&gt;.from_cte(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;scores_for_game&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="constant"&gt;Score&lt;/span&gt;.where(&lt;span class="key"&gt;game_id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;)).where(&lt;span class="key"&gt;user_id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;would generate the following:&lt;/p&gt;
&lt;div class="highlight SQL "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;WITH scores_for_game &lt;span class="keyword"&gt;AS&lt;/span&gt; (
&lt;span class="class"&gt;SELECT&lt;/span&gt; *
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores
&lt;span class="keyword"&gt;WHERE&lt;/span&gt; game_id = &lt;span class="integer"&gt;1&lt;/span&gt;
)
&lt;span class="class"&gt;SELECT&lt;/span&gt; *
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores_for_game
&lt;span class="keyword"&gt;WHERE&lt;/span&gt; scores_for_game.user_id = &lt;span class="integer"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can also include CTEs in your normal queries to join against by
using &lt;code&gt;with&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Score&lt;/span&gt;.with(&lt;span class="key"&gt;my_games&lt;/span&gt;: &lt;span class="constant"&gt;Game&lt;/span&gt;.where(&lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;)).joins(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;JOIN my_games ON scores.game_id = my_games.id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;will generate the following SQL:&lt;/p&gt;
&lt;div class="highlight SQL "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;WITH my_games &lt;span class="keyword"&gt;AS&lt;/span&gt; (
&lt;span class="class"&gt;SELECT&lt;/span&gt; games.*
&lt;span class="keyword"&gt;FROM&lt;/span&gt; games
&lt;span class="keyword"&gt;WHERE&lt;/span&gt; games.id = &lt;span class="integer"&gt;1&lt;/span&gt;
)
&lt;span class="class"&gt;SELECT&lt;/span&gt; *
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores
&lt;span class="keyword"&gt;JOIN&lt;/span&gt; my_games
&lt;span class="keyword"&gt;ON&lt;/span&gt; scores.games_id = my_games.id
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Rank&lt;/h2&gt;

&lt;p&gt;PostgreSQL provides a &lt;code&gt;rank&lt;/code&gt; windowing function, which will take into
account ties when ranking results. You would add rank to your
projection, like the following example:&lt;/p&gt;
&lt;div class="highlight SQL "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="class"&gt;SELECT&lt;/span&gt; scores.*, rank() &lt;span class="keyword"&gt;OVER&lt;/span&gt; (&lt;span class="keyword"&gt;ORDER&lt;/span&gt; &lt;span class="keyword"&gt;BY&lt;/span&gt; scores.points &lt;span class="directive"&gt;DESC&lt;/span&gt;)
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The results set will return ordered by the rank, which is determined the
order passed into the &lt;code&gt;rank&lt;/code&gt;&amp;#39;s &lt;code&gt;OVER&lt;/code&gt;. In the above example, the scores
would be ranked by their scores descending, so highest score first. If
there was a tie at first place between two scores, they would both
ranked 1, and the next result would be ranked &lt;code&gt;3&lt;/code&gt;. We can achieve the
same in ActiveRecord with postgres_ext:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Score&lt;/span&gt;.ranked(&lt;span class="key"&gt;points&lt;/span&gt;: &lt;span class="symbol"&gt;:desc&lt;/span&gt;)
&lt;span class="comment"&gt;# or&lt;/span&gt;
&lt;span class="constant"&gt;Score&lt;/span&gt;.ranked(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;points desc&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Rank will rank independently of any sort order applied to the query, so
you could have your scores ranked by points, but then ordered by their
creation time.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Score&lt;/span&gt;.ranked(&lt;span class="key"&gt;points&lt;/span&gt;: &lt;span class="symbol"&gt;:desc&lt;/span&gt;).order(&lt;span class="symbol"&gt;:created_at&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;will generate the following query:&lt;/p&gt;
&lt;div class="highlight sql "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="class"&gt;SELECT&lt;/span&gt; scores.*, rank() &lt;span class="keyword"&gt;OVER&lt;/span&gt; (&lt;span class="keyword"&gt;ORDER&lt;/span&gt; &lt;span class="keyword"&gt;BY&lt;/span&gt; scores.points &lt;span class="directive"&gt;DESC&lt;/span&gt;)
&lt;span class="keyword"&gt;FROM&lt;/span&gt; scores
&lt;span class="keyword"&gt;ORDER&lt;/span&gt; &lt;span class="keyword"&gt;BY&lt;/span&gt; scores.created_at &lt;span class="directive"&gt;ASC&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Also, if you apply a sort order to your relation, and want to sort by
it, you do not have to tell ranked what order you&amp;#39;d like to use, as it
will reuse the order. &lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Score&lt;/span&gt;.ranked.order(&lt;span class="key"&gt;points&lt;/span&gt;: &lt;span class="symbol"&gt;:desc&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;One thing to watch out for if you use &lt;code&gt;ranked&lt;/code&gt; without an explicit
order and want to call &lt;a href="http://api.rubyonrails.org/classes/ActiveRecord/FinderMethods.html#method-i-first"&gt;&lt;code&gt;first&lt;/code&gt;&lt;/a&gt;
off your relation, if the results of the
relation have yet to be retrieved, the first will use your table&amp;#39;s
primary key for an &lt;code&gt;ORDER BY&lt;/code&gt; statement on the query. This has already
bitten us before we discovered the behavior of &lt;code&gt;first&lt;/code&gt;. To avoid this
behavior in &lt;code&gt;first&lt;/code&gt;, use
&lt;a href="http://api.rubyonrails.org/classes/ActiveRecord/FinderMethods.html#method-i-take"&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt;
which does not use any implied order.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve been using CTEs and rank on one of our client projects, and it&amp;#39;s
already cleaned up the &lt;code&gt;from_sql&lt;/code&gt; queries we were previously
using. Let us know if you hit any snags, or have any suggestions on how
else we can make complex SQL queries easier to call from ActiveRecord!
We only implement the &lt;code&gt;rank&lt;/code&gt; windowing function right now, but plan to
add the others shortly.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Computed Properties in Ember.Js</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/09/04/computed_properties_in_ember_js.html"/>
    <id>http://reefpoints.dockyard.com/2013/09/04/computed_properties_in_ember_js.html</id>
    <published>2013-09-04T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Alex Navasardyan</name>
    </author>
    <summary>Computed Properties magic explained</summary>
    <content type="html">&lt;p&gt;Note: Short version of this post is a part of &lt;a href="http://emberjs.com/guides/object-model/computed-properties/"&gt;Ember.Js
Guides&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;What Are Computed Properties?&lt;/h2&gt;

&lt;p&gt;In a nutshell, it&amp;#39;s a property whose value is computed the first time
it&amp;#39;s asked for. You can define the computed property as a function and
when someone asks for it, Ember will automatically invoke the function
and treat the return value like value of the property.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a very well-known example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="key"&gt;firstName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;lastName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="function"&gt;fullName&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

&lt;span class="keyword"&gt;var&lt;/span&gt; ironMan = Person.create({
  &lt;span class="key"&gt;firstName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Tony&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;lastName&lt;/span&gt;:  &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Stark&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
});

ironMan.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fullName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// &amp;quot;Tony Stark&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The code above defines a computed property &lt;code&gt;fullName&lt;/code&gt; by calling
&lt;code&gt;property()&lt;/code&gt; on the function with two dependencies &lt;code&gt;firstName&lt;/code&gt; and
&lt;code&gt;lastName&lt;/code&gt; and whenever it gets called, it returns &lt;code&gt;firstName&lt;/code&gt; + &lt;code&gt;lastName&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Inception&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s take a look at another example. Say we want to add a description
computed property to &lt;code&gt;App.Person&lt;/code&gt;. It will aggregate other properties like
&lt;code&gt;fullName&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;country&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="key"&gt;firstName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;lastName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;age&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;country&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="function"&gt;fullName&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="function"&gt;description&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fullName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;; Age: &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; +
           &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;age&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;; Country: &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; +
           &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;country&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fullName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;age&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;country&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

&lt;span class="keyword"&gt;var&lt;/span&gt; captainAmerica = Person.create({
  &lt;span class="key"&gt;fullName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Steve Rogers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;age&lt;/span&gt;: &lt;span class="integer"&gt;80&lt;/span&gt;,
  &lt;span class="key"&gt;country&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;USA&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});

captainAmerica.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;description&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// &amp;quot;Steve Rogers; Age: 80; Country: USA&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice that you can use an existing computed property as a dependency for a
new one.&lt;/p&gt;

&lt;h2&gt;Caching&lt;/h2&gt;

&lt;p&gt;By default, all computed properties are cached. That means that once you
requested the value of computed property (called &lt;code&gt;get&lt;/code&gt; on it), it&amp;#39;s going
to compute and cache its value:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;captainAmerica.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;description&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// computes the value and returns &amp;quot;Steve Rogers; Age: 80; Country: USA&amp;quot;&lt;/span&gt;
captainAmerica.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;description&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// returns cached &amp;quot;Steve Rogers; Age: 80; Country: USA&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A computed property gets recomputed when any of the properties it depends on change:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;captainAmerica.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;country&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;United States of America&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
captainAmerica.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;description&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;// computes the value and returns&amp;quot;Steve Rogers; Age: 80; Country: United States of America&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Read Only&lt;/h2&gt;

&lt;p&gt;This property is &lt;code&gt;false&lt;/code&gt; by default. You won&amp;#39;t be able to set the value of
the computed property if you call &lt;code&gt;readOnly&lt;/code&gt; on it:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="function"&gt;description&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// implementation&lt;/span&gt;
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fullName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;age&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;country&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).readOnly()
});

&lt;span class="keyword"&gt;var&lt;/span&gt; captainAmerica = Person.create();
captainAmerica.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;description&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;hero&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="comment"&gt;// &amp;quot;Cannot Set: description on: &amp;lt;(unknown mixin):ember133&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Alternative syntax for defining Computed Properties&lt;/h2&gt;

&lt;p&gt;This code:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="key"&gt;firstName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;lastName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;fullName&lt;/span&gt;: Ember.computed(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;does exactly the same thing as this code:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Person = Ember.Object.extend({
  &lt;span class="key"&gt;firstName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;lastName&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="function"&gt;fullName&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;with the difference that the first example works if you disable &lt;a href="http://emberjs.com/api/#property_EXTEND_PROTOTYPES"&gt;Ember&amp;#39;s
prototype extension&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;How are Computed Properties different from Observers and Bindings?&lt;/h2&gt;

&lt;p&gt;The concept of &lt;code&gt;observer&lt;/code&gt; is pretty simple. You have something that you want to track the change of. You add an observer to it, so next time it changes, a certain event is going to be fired notifying you that that something has changed.&lt;/p&gt;

&lt;p&gt;There are two types of observers: &lt;code&gt;before&lt;/code&gt; (observesBefore) and &lt;code&gt;after&lt;/code&gt; (observes). When observer event (callback) is fired, it&amp;#39;s called with two arguments: &lt;code&gt;obj&lt;/code&gt; and &lt;code&gt;keyName&lt;/code&gt;. It doesn&amp;#39;t pass the value of the property to the event (callback). The reason is because the property you&amp;#39;re watching might be lazily computed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Observers&lt;/code&gt; are used by CP internally to invalidate CP&amp;#39;s cache when its dependency keys were changed. Observers (like CPs) don&amp;#39;t use runloop magic (fired &amp;quot;right away&amp;quot;).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Observers&lt;/code&gt; are not going to fire if the value is unchanged from before (changing existing &lt;code&gt;lastName&lt;/code&gt; from &lt;code&gt;Stark&lt;/code&gt; to &lt;code&gt;Stark&lt;/code&gt; won&amp;#39;t trigger the observer callback).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Bindings&lt;/code&gt; is an internal concept that is not meant to be used. I&amp;#39;m not saying you can&amp;#39;t, it&amp;#39;s better not to. Typically, you don&amp;#39;t need to use it in your application, using CP is plenty enough.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Bindings&lt;/code&gt; are meant to keep a property of two objects in sync. Their update (sync) happens through run loop, so there might be a period of time when two objects have the same property with different values and only by the end of a &lt;code&gt;sync&lt;/code&gt; queue those values are going to be the same.&lt;/p&gt;

&lt;p&gt;For example, in Ember those two objects are controller and view (any time a controller&amp;#39;s property changes, view&amp;#39;s property changes as well).&lt;/p&gt;

&lt;h2&gt;What do I use and when?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Computed properties&lt;/strong&gt; are good for combining other properties or doing
transformations on the property.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observers&lt;/strong&gt; are good for tracking changes of a property and reacting to
them. Observers should contain behaviour that reacts to the change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bindings&lt;/strong&gt; are used to make sure that the properties from the different objects
are in sync. They are rarely used and most of the times can be replaced
with computed properties.&lt;/p&gt;

&lt;h2&gt;Futher reading&lt;/h2&gt;

&lt;p&gt;You can read more about Computed Properties and Ember&amp;#39;s Object Model
over
&lt;a href="http://emberjs.com/guides/object-model/computed-properties/"&gt;here&lt;/a&gt;.
Happy Coding!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Alex Navasardyan is a DockYarder!</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2013/09/04/alex-navasardyan-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2013/09/04/alex-navasardyan-is-a-dockyarder.html</id>
    <published>2013-09-04T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Our first fulltime Ember.js dev</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/alex-navasardyan.png" alt="Alex"&gt;&lt;/p&gt;

&lt;p&gt;Alex has been friend for a while now, I got to know him when I started
attending the &lt;a href="www.meetup.com/Boston-Ember-js/"&gt;Boston Ember meetup&lt;/a&gt;.
Alex has been a very active in the Ember.js community and helped with
the 1.0 release last week as well as
&lt;a href="http://emberjs.com/list-view/"&gt;Ember.ListView&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;re very dedicated to the future of Ember.js and with Alex on board
we&amp;#39;re well on our way to building out one of the best teams around.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/twokul"&gt;Follow Alex on Twitter&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Announcing Postgres_ext version 1.0 and 2.0</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/08/23/announcing-postgres_ext-version-1-0-and-2-0.html"/>
    <id>http://reefpoints.dockyard.com/2013/08/23/announcing-postgres_ext-version-1-0-and-2-0.html</id>
    <published>2013-08-23T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>Today, I released not 1 but 2 versions of PostgresExt</summary>
    <content type="html">&lt;p&gt;Two versions of PostgresExt have been released today.&lt;/p&gt;

&lt;h2&gt;1.0.0 (and the 1-0-stable branch)&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/dockyard/postgres_ext/tree/v1.0.0"&gt;1.0.0&lt;/a&gt;
 version is the first production release of PostgresExt. It
supports Rails 3.2.x, adding in both data type and advanced querying
support for ActiveRecord and Arel.&lt;/p&gt;

&lt;h2&gt;2.0.0&lt;/h2&gt;

&lt;p&gt;I have also released version &lt;a href="https://github.com/dockyard/postgres_ext/tree/v2.0.0"&gt;2.0.0&lt;/a&gt;,
which supports ActiveRecord and Arel 4.0.x. Most of the 1.0.0 code
is gone from 2.0.0, since Rails 4.0.0 supports all the data types
that PostgresExt added to Rails 3.2.x.&lt;/p&gt;

&lt;h2&gt;The Future&lt;/h2&gt;

&lt;p&gt;I&amp;#39;m focusing on Rails 4.0.0 for all future features of PostgresExt. I
will gladly pull in additional features for 1.0.0, but Rails 3.2.x is no
longer the primary focus of PostgresExt. Maintenance on 1.0.0 will be
minimal, since &lt;a href="http://weblog.rubyonrails.org/2013/2/24/maintenance-policy-for-ruby-on-rails/"&gt;Rails 3.2.x will no longer be receiving releases for bug
fixes&lt;/a&gt;,
but pull requests for bug fixes would be graciously accepted.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Design Patterns: The Observer Pattern</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/08/20/design-patterns-observer-pattern.html"/>
    <id>http://reefpoints.dockyard.com/2013/08/20/design-patterns-observer-pattern.html</id>
    <published>2013-08-20T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Doug Yun</name>
    </author>
    <summary>NSA Edition: Exploring design patterns and their use cases</summary>
    <content type="html">&lt;p&gt;Note: We won&amp;#39;t be going over the Ruby
module
&lt;a href="http://ruby-doc.org/stdlib-2.0/libdoc/observer/rdoc/Observable.html"&gt;&lt;em&gt;Observable&lt;/em&gt;&lt;/a&gt;.
Instead, we&amp;#39;ll building out the pattern ourselves.&lt;/p&gt;

&lt;h2&gt;Your First Day at the NSA&lt;/h2&gt;

&lt;p&gt;Welcome to the National Security Agency, &lt;a href="http://www.forodecostarica.com/attachments/201136d1337091462-los-gringos-se-burlan-de-nuestro-pais-agent-smith.jpg"&gt;Agent
Smith&lt;/a&gt;.
You have quite an impressive background, and we believe your &amp;quot;go-getter&amp;quot;
attitude will instill a new kind of vigor within the organization.&lt;/p&gt;

&lt;p&gt;Your cubicle is down to the left... here are some NDAs for
you to fill out. I&amp;#39;ll swing by your desk in the afternoon and pick them
up from you later. Oh, and before I forget, here is your first assignment.&lt;/p&gt;

&lt;p&gt;Go get &amp;#39;em, tiger!&lt;/p&gt;

&lt;h2&gt;The First Assignment&lt;/h2&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Agent Smith
Spook First Class
[REDACTED]
NSA                                                     08-20-[REDACTED]

                     Operation [REDACTED] Observers

Welcome, Agent Smith:

Bluntly, we'd like to track everyone's emails.

Attached are two documents.

The first document will show you the basic structure of a typical email,
and the second document will provide you a basic profile of a suspicious
person.

If there are any questions, please reach me at [REDACTED].

Best of luck,





Agent [REDACTED]
[REDACTED]
[REDACTED]
NSA
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# Document 1:&lt;/span&gt;
&lt;span class="comment"&gt;# Basic structure of an email&lt;/span&gt;

&lt;span class="keyword"&gt;module&lt;/span&gt; &lt;span class="class"&gt;Email&lt;/span&gt;
  extend &lt;span class="predefined-constant"&gt;self&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;send&lt;/span&gt;(subject, sender, receiver)
    puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;%Q[&lt;/span&gt;&lt;span class="content"&gt;
      Subject: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;subject&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;
      From:    &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;sender&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;@example.com
      To:      &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;receiver&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;@example.com
      Date:    &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.now.asctime&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;
    &lt;/span&gt;&lt;span class="delimiter"&gt;]&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# Document 2:&lt;/span&gt;
&lt;span class="comment"&gt;# Characteristics of a suspicious person&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Person&lt;/span&gt;
  include &lt;span class="constant"&gt;Email&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:name&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(name)
    &lt;span class="instance-variable"&gt;@name&lt;/span&gt; = name
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;send_email&lt;/span&gt;(subject, receiver)
    &lt;span class="constant"&gt;Email&lt;/span&gt;.send(subject, name, receiver)
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As we look through the &lt;code&gt;Email&lt;/code&gt; module, we see that it contains
&lt;code&gt;Email.send&lt;/code&gt; which takes three arguments: &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;sender&lt;/code&gt;, and
&lt;code&gt;receiver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Gazing at the suspicious &lt;code&gt;Person&lt;/code&gt; class, we see that it includes the
&lt;code&gt;Email&lt;/code&gt; module. &lt;code&gt;Person#send_email&lt;/code&gt; takes two parameters: a subject
and a receiver. &lt;code&gt;Person#name&lt;/code&gt; will stand in as the sender of the email.&lt;/p&gt;

&lt;p&gt;Hypothetically, let&amp;#39;s see how a suspicious person would send an email:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;bill = Person.new 'Bill'
bill.send_email 'Fishing Trip', 'Fred'
  # =&amp;gt;
      Subject: Fishing Trip
      From:    Bill@example.com
      To:      Fred@example.com
      Date:    Wed Aug 16 20:35:09 2006
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Hmm... as you sit in your cubicle, you ponder the numerous possible ways of
tracking emails. You won&amp;#39;t need anything too complicated, just
something to kick off a notification once an email has been sent.&lt;/p&gt;

&lt;p&gt;Volia! You realize you can use the &lt;em&gt;Observer&lt;/em&gt; pattern!&lt;/p&gt;

&lt;h2&gt;The Subject and its Observers&lt;/h2&gt;

&lt;p&gt;First, let&amp;#39;s start off by creating two &lt;em&gt;observer&lt;/em&gt; classes,
&lt;code&gt;Alert&lt;/code&gt; and &lt;code&gt;Agent&lt;/code&gt; classes.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Alert&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;gotcha&lt;/span&gt;(person)
    puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;!!! ALERT: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;person.name.upcase&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; SENT AN EMAIL !!!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Agent&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;gotcha&lt;/span&gt;(person)
    puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;!!! TIME TO DETAIN &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;person.name.upcase&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; !!!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, let&amp;#39;s create a &lt;code&gt;Subject&lt;/code&gt; module.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;module&lt;/span&gt; &lt;span class="class"&gt;Subject&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:observers&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@observers&lt;/span&gt; = []
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_observer&lt;/span&gt;(*observers)
    observers.each { |observer| &lt;span class="instance-variable"&gt;@observers&lt;/span&gt; &amp;lt;&amp;lt; observer }
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;delete_observer&lt;/span&gt;(*observers)
    observers.each { |observer| &lt;span class="instance-variable"&gt;@observers&lt;/span&gt;.delete(observer) }
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;notify_observers&lt;/span&gt;
    observers.each { |observer| observer.gotcha(&lt;span class="predefined-constant"&gt;self&lt;/span&gt;) }
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here within the &lt;code&gt;Subject#initialize&lt;/code&gt;, we create an empty array which
will contain a list of &lt;em&gt;observers&lt;/em&gt;. &lt;code&gt;Subject#add_observer&lt;/code&gt; simply pushes
our desired &lt;em&gt;observers&lt;/em&gt; into the array.&lt;/p&gt;

&lt;p&gt;Finally, we can alter the suspicious &lt;code&gt;Person&lt;/code&gt; class, which will act as
the &lt;em&gt;subject&lt;/em&gt; class. Let&amp;#39;s include the &lt;code&gt;Subject&lt;/code&gt; module now.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Person&lt;/span&gt;
  include &lt;span class="constant"&gt;Email&lt;/span&gt;, &lt;span class="constant"&gt;Subject&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:name&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(name)
    &lt;span class="comment"&gt;# 'super' requires a parentheses because we're calling&lt;/span&gt;
    &lt;span class="comment"&gt;# super on the superclass, 'Subject'&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt;()
    &lt;span class="instance-variable"&gt;@name&lt;/span&gt; = name
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;send_email&lt;/span&gt;(subject, receiver)
    &lt;span class="constant"&gt;Email&lt;/span&gt;.send(subject, name, receiver)
    notify_observers
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Subject#notify_observers&lt;/code&gt; calls &lt;code&gt;#gotcha&lt;/code&gt; on each &lt;em&gt;observer&lt;/em&gt;, which
informs each &lt;em&gt;observer&lt;/em&gt; that &lt;code&gt;Person#send_email&lt;/code&gt; has been kicked off.&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s give it a whirl...&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;alert = &lt;span class="constant"&gt;Alert&lt;/span&gt;.new
agent = &lt;span class="constant"&gt;Agent&lt;/span&gt;.new

bill = &lt;span class="constant"&gt;Person&lt;/span&gt;.new &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Bill&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

bill.add_observer alert, agent   &lt;span class="comment"&gt;# Bill now has two observers watching him&lt;/span&gt;

bill.send_email &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Fishing Trip&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Fred&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;# =&amp;gt;&lt;/span&gt;
      &lt;span class="key"&gt;Subject&lt;/span&gt;: &lt;span class="constant"&gt;Fishing&lt;/span&gt; &lt;span class="constant"&gt;Trip&lt;/span&gt;
      &lt;span class="key"&gt;From&lt;/span&gt;:    &lt;span class="constant"&gt;Bill&lt;/span&gt;&lt;span class="instance-variable"&gt;@example&lt;/span&gt;.com
      &lt;span class="key"&gt;To&lt;/span&gt;:      &lt;span class="constant"&gt;Fred&lt;/span&gt;&lt;span class="instance-variable"&gt;@example&lt;/span&gt;.com
      &lt;span class="key"&gt;Date&lt;/span&gt;:    &lt;span class="constant"&gt;Wed&lt;/span&gt; &lt;span class="constant"&gt;Aug&lt;/span&gt; &lt;span class="integer"&gt;16&lt;/span&gt; &lt;span class="integer"&gt;20&lt;/span&gt;:&lt;span class="integer"&gt;35&lt;/span&gt;:&lt;span class="integer"&gt;09&lt;/span&gt; &lt;span class="integer"&gt;2006&lt;/span&gt;

!!! &lt;span class="key"&gt;ALERT&lt;/span&gt;: &lt;span class="constant"&gt;BILL&lt;/span&gt; &lt;span class="constant"&gt;SENT&lt;/span&gt; &lt;span class="constant"&gt;AN&lt;/span&gt; &lt;span class="constant"&gt;EMAIL&lt;/span&gt; !!!
!!! &lt;span class="constant"&gt;TIME&lt;/span&gt; &lt;span class="constant"&gt;TO&lt;/span&gt; &lt;span class="constant"&gt;DETAIN&lt;/span&gt; &lt;span class="constant"&gt;BILL&lt;/span&gt; !!!
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Perfect, it works! Now we can start protecting our freedom!&lt;/p&gt;

&lt;h2&gt;Discussion&lt;/h2&gt;

&lt;p&gt;In our example above, we have two &lt;em&gt;observers&lt;/em&gt;, the &lt;code&gt;Alert&lt;/code&gt; and &lt;code&gt;Agent&lt;/code&gt;
classes, and a &lt;em&gt;subject&lt;/em&gt;, &lt;code&gt;Person&lt;/code&gt;. By creating the &lt;code&gt;Subject&lt;/code&gt; module,
any instance of &lt;code&gt;Person&lt;/code&gt; now informs and updates any &lt;em&gt;observer&lt;/em&gt; through
&lt;code&gt;#notify_observers&lt;/code&gt;, ultimately removing any implicit coupling from &lt;code&gt;Alert&lt;/code&gt; and
&lt;code&gt;Agent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are a few similarities between the &lt;em&gt;Observer&lt;/em&gt; and
&lt;a href="http://reefpoints.dockyard.com/2013/07/25/design-patterns-strategy-pattern.html"&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/a&gt;
patterns. Both patterns employ an object (the Observer&amp;#39;s &lt;em&gt;subject&lt;/em&gt; and
the Strategy&amp;#39;s &lt;em&gt;context&lt;/em&gt;) that makes calls to another object (the
Observer&amp;#39;s &lt;em&gt;observer&lt;/em&gt; or Strategy&amp;#39;s &lt;em&gt;strategy&lt;/em&gt;). The difference between
the two patterns is the purpose and use case. The &lt;em&gt;Strategy&lt;/em&gt; pattern
relies on the &lt;em&gt;strategy&lt;/em&gt; to do the work, while the &lt;em&gt;Observer&lt;/em&gt; pattern
informs the &lt;em&gt;observers&lt;/em&gt; of what is going on with the &lt;em&gt;subject&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed this short example, thanks for reading!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Testing Context Validations</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/08/05/testing-context-validations.html"/>
    <id>http://reefpoints.dockyard.com/2013/08/05/testing-context-validations.html</id>
    <published>2013-08-05T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>We moved your model validations to your controller, now we're going to help you test them</summary>
    <content type="html">&lt;h2&gt;Quick Refresher on ContextValidation&lt;/h2&gt;

&lt;p&gt;A few months ago, Brian released the &lt;a href="http://reefpoints.dockyard.com/ruby/2013/05/09/context-validations.html"&gt;ContextValidations gem&lt;/a&gt;.
ContextValidations moves your model validations to the controller,
allowing you to vary your validations by context, rather than relying on
conditional validations.&lt;/p&gt;

&lt;h2&gt;Let&amp;#39;s validate our user&lt;/h2&gt;

&lt;p&gt;We have a user model, that requires a password and a username when a
user signs up. They can change their username and password, but if they
can leave the password blank when updating their account, it will retain
the old password. Whenever they enter a password , it must be 9
characters or greater. We&amp;#39;re going to ignore the actual implementation
of the password saving scheme and password confirmation in this example.
Also, this example ignores setting up the test helper for &lt;a href="https://github.com/bcardarella/valid_attribute"&gt;valid_attribute&lt;/a&gt;
and MiniTest::Spec.&lt;/p&gt;

&lt;h3&gt;Implementing the Tests and Validations in the Model&lt;/h3&gt;

&lt;p&gt;To test the above requirements model validations, we&amp;#39;d do the following:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;describe &lt;span class="constant"&gt;OldUser&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;new user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    subject { &lt;span class="constant"&gt;OldUser&lt;/span&gt;.new &lt;span class="key"&gt;password&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;password_to_confirm&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }

    it { must have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;) }
    it { must have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;validpassword1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tooshort&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;existing user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    subject { old_users(&lt;span class="symbol"&gt;:example&lt;/span&gt;) }

    it { must have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;) }
    it { must have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;validpassword1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tooshort&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And here is the implementation of the model:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;OldUser&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  attr_accessor &lt;span class="symbol"&gt;:password&lt;/span&gt;
  validates &lt;span class="symbol"&gt;:username&lt;/span&gt;, &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  validates &lt;span class="symbol"&gt;:password&lt;/span&gt;, &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;, &lt;span class="key"&gt;if&lt;/span&gt;: &lt;span class="symbol"&gt;:new_record?&lt;/span&gt;
  validates &lt;span class="symbol"&gt;:password&lt;/span&gt;, &lt;span class="key"&gt;length&lt;/span&gt;: { &lt;span class="key"&gt;minimum&lt;/span&gt;: &lt;span class="integer"&gt;9&lt;/span&gt; }, &lt;span class="key"&gt;allow_blank&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Implementing the Tests and Validations in the Controller with ContextValidations&lt;/h3&gt;

&lt;p&gt;We&amp;#39;ve been using ContextValidations with our client work since its
release and realized we could unit test the controller to test the
validations.&lt;/p&gt;

&lt;p&gt;Our unit tests for the controller are here:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;describe &lt;span class="constant"&gt;UsersController&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#create&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    subject { &lt;span class="constant"&gt;User&lt;/span&gt;.new(&lt;span class="key"&gt;validations&lt;/span&gt;: validations_for(&lt;span class="symbol"&gt;:create&lt;/span&gt;)) }

    it { must have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;) }
    it { must have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;validpassword1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tooshort&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#update&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    subject { &lt;span class="constant"&gt;User&lt;/span&gt;.new(&lt;span class="key"&gt;validations&lt;/span&gt;: validations_for(&lt;span class="symbol"&gt;:update&lt;/span&gt;)) }

    it { must have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;) }
    it { must have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;validpassword1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tooshort&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note the use of &lt;code&gt;validations_for&lt;/code&gt;. It is a MiniTest
helper method defined by ContextValidations, which looks up the name
of the controller from the describe block, creates an instance of it,
and retrieves the validations for the context passed in. This prevents
you from needing to create your own instance and calling &lt;code&gt;validations&lt;/code&gt;
on it. The resulting tests end up looking very similar to what your
model tests would look like.&lt;/p&gt;

&lt;p&gt;Our model implementation is very light:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;User&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  include &lt;span class="constant"&gt;ContextValidations&lt;/span&gt;::&lt;span class="constant"&gt;Model&lt;/span&gt;

  attr_accessor &lt;span class="symbol"&gt;:password&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And our validations are defined in the controller:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;UsersController&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ApplicationController&lt;/span&gt;
  include &lt;span class="constant"&gt;ContextValidations&lt;/span&gt;::&lt;span class="constant"&gt;Controller&lt;/span&gt;

  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;base_validations&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:username&lt;/span&gt;, &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:password&lt;/span&gt;, &lt;span class="key"&gt;length&lt;/span&gt;: { &lt;span class="key"&gt;minimum&lt;/span&gt;: &lt;span class="integer"&gt;9&lt;/span&gt; }, &lt;span class="key"&gt;allow_blank&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;create_validations&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:password&lt;/span&gt;, &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;All of the examples are part of &lt;a href="https://github.com/dockyard/testing_context_validations"&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Wrapping it up&lt;/h2&gt;

&lt;p&gt;As you can see, writing the validation tests for the controller are
almost identical to writing them for the model. There are a few
differences in setting up the subject for the tests, but the only major
difference is that you are testing the controller instead of the model.
If you have any feedback on the tests we came up with, feel free to let
us know!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Putting things next to things with Susy</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/07/29/putting-things-next-to-things-with-susy.html"/>
    <id>http://reefpoints.dockyard.com/2013/07/29/putting-things-next-to-things-with-susy.html</id>
    <published>2013-07-29T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Angelo Simeoni</name>
    </author>
    <summary>The little grid framework that can</summary>
    <content type="html">&lt;p&gt;I&amp;#39;ve often lamented that one of the most challenging things to do on the front end is to put things next to other things. Things on top of things? Easy. Things by themselves? Piece of cake. This thing next to that thing? Things just got complicated.&lt;/p&gt;

&lt;p&gt;Should you roll your own layout, coming up with and refining conventions, browser testing to make sure everything still works? Do you rely on a front-end framework and all of the cluttered, confusing markup that comes going from that route? &lt;/p&gt;

&lt;p&gt;What about something different? This is where Susy saves the day.&lt;/p&gt;

&lt;h2&gt;The little framework that can&lt;/h2&gt;

&lt;p&gt;Susy is a grid framework for Compass. With Susy, you simply define your grid settings and start laying things out. If you want to come back and adjust your grid later, that&amp;#39;s totally fine. Susy will recalculate all your layouts.&lt;/p&gt;
&lt;div class="highlight css "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="error"&gt;$&lt;/span&gt;&lt;span class="tag"&gt;total-columns&lt;/span&gt;: &lt;span class="float"&gt;12&lt;/span&gt;
&lt;span class="error"&gt;$&lt;/span&gt;&lt;span class="tag"&gt;column-width&lt;/span&gt;: &lt;span class="float"&gt;4em&lt;/span&gt;
&lt;span class="error"&gt;$&lt;/span&gt;&lt;span class="tag"&gt;gutter-width&lt;/span&gt;: &lt;span class="float"&gt;1em&lt;/span&gt;
&lt;span class="error"&gt;$&lt;/span&gt;&lt;span class="tag"&gt;grid-padding&lt;/span&gt;: &lt;span class="error"&gt;$&lt;/span&gt;&lt;span class="tag"&gt;gutter-width&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Two main mixins do the bulk of the lifting. These are &amp;#39;container&amp;#39; and &amp;#39;span-columns&amp;#39;. Container is used to define the container of the grid. Span-columns is applied to elements within a container context. The syntax is easy.&lt;/p&gt;
&lt;div class="highlight css "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="class"&gt;.page&lt;/span&gt;
  +&lt;span class="tag"&gt;container&lt;/span&gt;
  &lt;span class="tag"&gt;article&lt;/span&gt;
    +&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;(&lt;span class="float"&gt;8&lt;/span&gt;, &lt;span class="float"&gt;12&lt;/span&gt;)
  &lt;span class="tag"&gt;aside&lt;/span&gt;
    +&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;(&lt;span class="float"&gt;4&lt;/span&gt; &lt;span class="tag"&gt;omega&lt;/span&gt;, &lt;span class="float"&gt;12&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This makes &amp;#39;.page&amp;#39; the grid container. The article takes up eight of twelve columns, the aside the final (omega) four of twelve columns.&lt;/p&gt;

&lt;p&gt;Susy really shines at figuring stuff out on its own. Say I wanted to have two columns of different widths with different padding for each column, both nested within the article above?&lt;/p&gt;
&lt;div class="highlight css "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;article&lt;/span&gt;
  +&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;(&lt;span class="float"&gt;8&lt;/span&gt;, &lt;span class="float"&gt;12&lt;/span&gt;)
  &lt;span class="class"&gt;.one&lt;/span&gt;
    +&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;(&lt;span class="float"&gt;3&lt;/span&gt;, &lt;span class="float"&gt;7&lt;/span&gt;, &lt;span class="float"&gt;1em&lt;/span&gt;)
  &lt;span class="class"&gt;.two&lt;/span&gt;
    +&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;(&lt;span class="float"&gt;4&lt;/span&gt; &lt;span class="tag"&gt;omega&lt;/span&gt;, &lt;span class="float"&gt;7&lt;/span&gt;, &lt;span class="class"&gt;.5em&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where did the seven columns come from? Susy doesn&amp;#39;t care. They are within the context of the article. Susy will figure out the math and make seven columns. The third option is the column padding. Susy will do the math there too. Thanks, Susy!&lt;/p&gt;

&lt;h2&gt;Susy, breakpoints and you&lt;/h2&gt;

&lt;p&gt;Susy is made to build responsive grids. The default layout is called &amp;#39;magic&amp;#39;. It&amp;#39;s a fixed width layout that fluidly scales if the viewport is smaller than the width of the grid. You can also opt for a fully fluid layout, or a static layout for pixel precision.&lt;/p&gt;

&lt;p&gt;Any of these layouts can be further modified with the +at-breakpoint mixin. This mixin makes accessing media queries within the context of our grid simple and straightforward.&lt;/p&gt;
&lt;div class="highlight css "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="class"&gt;.one&lt;/span&gt;, &lt;span class="class"&gt;.two&lt;/span&gt;
  +&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;t&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;b&lt;/span&gt;&lt;span class="error"&gt;r&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;k&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;i&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;t&lt;/span&gt;(&lt;span class="float"&gt;30em&lt;/span&gt;)
    +&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;(&lt;span class="float"&gt;7&lt;/span&gt;, &lt;span class="float"&gt;7&lt;/span&gt;, &lt;span class="class"&gt;.5em&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;�The one true grid&lt;/h2&gt;

&lt;p&gt;Everything Susy does is within context of a grid. You can  define multiple grids, and nest these grids inside one another. You can define abritrary values within any context. Many useful features, such as push, pull, and bleed are there to make life even easier.&lt;/p&gt;

&lt;p&gt;With all of this power comes some responsiblity. As with any tool, Susy just does what you ask it to do. It cannot explain  why your layout isn&amp;#39;t working. If you try to put too many things inside a grid, your layout will break. I&amp;#39;d recommend taking Susy for a spin. It&amp;#39;s really easy to &lt;a href="http://susy.oddbird.net/guides/getting-started/"&gt;get started&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Design Patterns: The Strategy Pattern</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2013/07/25/design-patterns-strategy-pattern.html"/>
    <id>http://reefpoints.dockyard.com/2013/07/25/design-patterns-strategy-pattern.html</id>
    <published>2013-07-25T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Doug Yun</name>
    </author>
    <summary>Exploring design patterns and their use cases</summary>
    <content type="html">&lt;h2&gt;Walls are sooooo last week...&lt;/h2&gt;

&lt;p&gt;In our last post, we discussed the &lt;em&gt;&lt;a href="http://reefpoints.dockyard.com/ruby/2013/07/10/design-patterns-template-pattern.html"&gt;Template
Method&lt;/a&gt;&lt;/em&gt;
pattern and its benefits, finding it most useful when we need to simply shape
behavior of &lt;em&gt;subclasses&lt;/em&gt;. However, due to the reliance on &lt;em&gt;inheritance&lt;/em&gt;,
there are a couple of limitations to this pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Subclasses are tightly bound to a superclass or baseclass&lt;/li&gt;
&lt;li&gt;Runtime flexibility is hindered&lt;/li&gt;
&lt;li&gt;Only a portion of the desired alogrithm is varied&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thankfully, there is another design pattern that resolves these
problems: the &lt;em&gt;Strategy&lt;/em&gt; pattern.&lt;/p&gt;

&lt;h2&gt;Summertime and the Livin&amp;#39; is Easy&lt;/h2&gt;

&lt;h3&gt;Hot dogs, hamburgers, and veggie patties&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s the middle of July, and there&amp;#39;s no better time to throw a day
party. Our pals are bringing the tasty beverages, so we just need to prepare the food.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll first create a superclass &lt;code&gt;Food&lt;/code&gt; that will delagate &lt;code&gt;#type&lt;/code&gt; to its
subclasses: &lt;code&gt;HotDog&lt;/code&gt;, &lt;code&gt;Hamburger&lt;/code&gt;, and &lt;code&gt;VeggiePatty&lt;/code&gt;. Notice that this
is the &lt;em&gt;&lt;a href="http://reefpoints.dockyard.com/ruby/2013/07/10/design-patterns-template-pattern.html"&gt;Template
Method&lt;/a&gt;&lt;/em&gt;
pattern in action.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Food&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;type&lt;/span&gt;
    raise &lt;span class="constant"&gt;NotImplementedError&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Ask the subclass&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;HotDog&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Food&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;type&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;hot dogs&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Hamburger&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Food&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;type&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;hamburgers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;VeggiePatty&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Food&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;type&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;veggie patties&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, let&amp;#39;s get the grill ready.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Grill&lt;/span&gt;
  attr_accessor &lt;span class="symbol"&gt;:food&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt; food
    &lt;span class="instance-variable"&gt;@food&lt;/span&gt; = food
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;grilling&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Grilling the &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;food.type&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Nice. Now let&amp;#39;s get grilling! We&amp;#39;ll start with some hot dogs.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;grill = &lt;span class="constant"&gt;Grill&lt;/span&gt;.new(&lt;span class="constant"&gt;HotDog&lt;/span&gt;.new)
grill.grilling &lt;span class="comment"&gt;# =&amp;gt; &amp;quot;Grilling the hot dogs!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Oh watch out, these dogs are almost done... time to throw on the
hamburger and veggie patties.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;grill.food = &lt;span class="constant"&gt;Hamburger&lt;/span&gt;.new
grill.grilling &lt;span class="comment"&gt;# =&amp;gt; &amp;quot;Grilling the hamburgers!&amp;quot;&lt;/span&gt;

grill.food = &lt;span class="constant"&gt;VeggiePatty&lt;/span&gt;.new
grill.grilling &lt;span class="comment"&gt;# =&amp;gt; &amp;quot;Grilling the veggie patties!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Wasn&amp;#39;t that easy? We were able to switch out items without
creating a new class of &lt;code&gt;Grill&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Discussion&lt;/h2&gt;

&lt;h3&gt;Strategies and Context&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Strategy&lt;/em&gt; pattern employs &lt;em&gt;strategies&lt;/em&gt;, objects of which
possess identical behavior. Our grill party relies on &lt;em&gt;strategies&lt;/em&gt; to
tell us what &lt;code&gt;#type&lt;/code&gt; of food they were. It&amp;#39;s important that all strategy objects
have the same responsiblity and support the same interface, which in our case
was &lt;code&gt;grill.grilling&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Grill&lt;/code&gt; class is our &lt;em&gt;context&lt;/em&gt; class, the operator of the
&lt;em&gt;strategies&lt;/em&gt;, which uses the &lt;code&gt;HotDog#type&lt;/code&gt;, &lt;code&gt;Hamburger#type&lt;/code&gt;, and
&lt;code&gt;VeggiePatty#type&lt;/code&gt; interchangeably.&lt;/p&gt;

&lt;p&gt;Through our contrived example, we see the immediate benefits of this
design pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Separation of concerns&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Strategies&lt;/em&gt; at runtime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;#39;ve achieved &lt;em&gt;separation of concerns&lt;/em&gt; by designating the &lt;code&gt;#type&lt;/code&gt;
method as our desired set of &lt;em&gt;strategies&lt;/em&gt;. &lt;code&gt;HotDog&lt;/code&gt;, &lt;code&gt;Hamburger&lt;/code&gt; and
&lt;code&gt;VeggiePatty&lt;/code&gt;  are unaware of our implementation of &lt;code&gt;Grill#grilling&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As for runtime flexibility, we&amp;#39;re able to switch out the items up on the
grill.&lt;/p&gt;

&lt;h3&gt;Special Patties: Lambdas&lt;/h3&gt;

&lt;p&gt;As we&amp;#39;re grilling our hamburger and veggies patties, a last minute guest
arrives, and she has brought some bacon, jalapeños, and onions.
Let&amp;#39;s make some custom patties, but avoid creating more subclasses of
&lt;code&gt;Food&lt;/code&gt;. What could we do here?&lt;/p&gt;

&lt;p&gt;A quick and awesome solution would be to use &lt;em&gt;lambdas&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Since we expect our &lt;em&gt;strategies&lt;/em&gt; to return &lt;code&gt;Strings&lt;/code&gt; for food &lt;code&gt;#type&lt;/code&gt;,
we can create a &lt;em&gt;lambda&lt;/em&gt; which will behave just like the other strategy
objects and return a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;CUSTOMPATTY&lt;/span&gt; = lambda { |type| &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;type&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; }
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, let&amp;#39;s get back to our &lt;code&gt;Grill&lt;/code&gt; class and alter the class a little
bit.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Grill&lt;/span&gt;
  attr_accessor &lt;span class="symbol"&gt;:food&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt; food
    &lt;span class="instance-variable"&gt;@food&lt;/span&gt; = food
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;grilling&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Grilling the &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;print_food&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;print_food&lt;/span&gt;
    food_is_string? ? food : food.type
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;food_is_string?&lt;/span&gt;
    food.is_a? &lt;span class="constant"&gt;String&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since we know the &lt;em&gt;strategies&lt;/em&gt; are &lt;code&gt;Strings&lt;/code&gt;, we&amp;#39;ve created two
&lt;code&gt;private&lt;/code&gt; methods, &lt;code&gt;#print_food&lt;/code&gt; and &lt;code&gt;#food_is_string&lt;/code&gt;.
&lt;code&gt;#food_is_string&lt;/code&gt; will check if &lt;code&gt;Grill&lt;/code&gt; has received a
&lt;code&gt;String&lt;/code&gt; or not, and &lt;code&gt;#print_food&lt;/code&gt; will handle &lt;em&gt;lambdas&lt;/em&gt; or &lt;em&gt;classes&lt;/em&gt; of
food.&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s try grilling some hot dogs and custom patties!&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;jalapeños = &lt;span class="constant"&gt;CUSTOMPATTY&lt;/span&gt;.call &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;spicy jalapeños patties&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
bacon = &lt;span class="constant"&gt;CUSTOMPATTY&lt;/span&gt;.call &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;greasy, yummy bacon patties&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

grill = &lt;span class="constant"&gt;Grill&lt;/span&gt;.new jalapeños
grill.grilling &lt;span class="comment"&gt;# =&amp;gt; &amp;quot;Grilling the spicy jalapeños patties!&amp;quot;&lt;/span&gt;

grill.food = bacon
grill.grilling &lt;span class="comment"&gt;# =&amp;gt; &amp;quot;Grilling the greasy, yummy bacon patties!&amp;quot;&lt;/span&gt;

grill.food = &lt;span class="constant"&gt;HotDog&lt;/span&gt;.new
grill.grilling &lt;span class="comment"&gt;# =&amp;gt; &amp;quot;Grilling the hot dogs!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Mmm-mmmm... That is a tasty burger.&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Strategy&lt;/em&gt; pattern is a delagation-based design pattern, and shares
some similarities with the &lt;em&gt;Template Method&lt;/em&gt; pattern. However, instead
of depending so heavily on inheiritance between a superclass and
subclasses to use our target algorithm, we take our algorithm and
consider it as a separate object. As long as we remember the
relationship between the &lt;em&gt;strategies&lt;/em&gt; and the &lt;em&gt;context&lt;/em&gt;, we earn real
advantages over the &lt;em&gt;Template Method&lt;/em&gt;, as seen in our custom patty
example.&lt;/p&gt;

&lt;p&gt;I hope you had fun at our day party, and we&amp;#39;ll next explore the
&lt;em&gt;Observer&lt;/em&gt; pattern.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Design Patterns: The Template Method Pattern</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2013/07/10/design-patterns-template-pattern.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2013/07/10/design-patterns-template-pattern.html</id>
    <published>2013-07-10T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Doug Yun</name>
    </author>
    <summary>Exploring design patterns and their use cases</summary>
    <content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;As the field of software development grows, we developers are
continuously trying to catch up with the latest technologies.
Fortunately, the craft of writing maintainable code is language
agnostic, and in this series of blogposts, we&amp;#39;ll focus on a powerful set of
timeless tools: &lt;em&gt;Design Patterns&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I highly recommend Russ Olsen&amp;#39;s book &lt;a href="http://designpatternsinruby.com/"&gt;Design
Patterns in Ruby&lt;/a&gt;. Our series
will draw inspiration from it and is brief in comparison. So if you
enjoy these posts (and I hope you do!), the book will be a great
investment.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll explore various design patterns and learn
when to apply them. Our topic for today will be the &lt;em&gt;Template Method&lt;/em&gt;
pattern, the simplest design pattern.&lt;/p&gt;

&lt;h2&gt;Our First Day in Construction&lt;/h2&gt;

&lt;h3&gt;The Right Tools&lt;/h3&gt;

&lt;p&gt;Quite simply, design patterns are just tools that help us construct software. However,
just like tools, we need to use the correct and proper one for the task. We
could use a hammer on screws, but we&amp;#39;d damage the wood planks and using a
power drill will be much more efficient. Before using any one of the numerous design patterns, it is
crucial to understand the problem we wish to solve.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It is incorrect to use a particular design pattern on the wrong
type of problem&lt;/em&gt;. In other words, it is in poor practice to use a
particular design pattern on a problem that does not require the
aforementioned design pattern.&lt;/p&gt;

&lt;h3&gt;Let&amp;#39;s Build Some Walls&lt;/h3&gt;

&lt;p&gt;Today, we&amp;#39;ve been asked by our foreman to build a couple of walls. All
the walls will share the same dimensions and will be made from the same
material (for this construction project, our foreman has given us an
&amp;quot;easy&amp;quot; set of requirements).&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# Blueprints for Wall&lt;/span&gt;
require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;minitest/autorun&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

describe &lt;span class="constant"&gt;Wall&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  let(&lt;span class="symbol"&gt;:wall&lt;/span&gt;) { &lt;span class="constant"&gt;Wall&lt;/span&gt;.new }

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should state its dimensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    wall.dimensions.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 30ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should be made from brick&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    wall.made_from.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from brick!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What a nice boss, he&amp;#39;s handed us the blueprints!
Now it&amp;#39;s just up to us to build out the &lt;code&gt;Wall&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Wall&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;dimensions&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 30ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;made_from&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from brick!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Nice! Our tests pass, everybody is happy, and we&amp;#39;re off to lunch!&lt;/p&gt;

&lt;h3&gt;A Hammer or a Nailgun?&lt;/h3&gt;

&lt;p&gt;Coming back to the site, our foreman has informed us that we need more
walls. &amp;quot;That&amp;#39;s a piece of cake,&amp;quot; we reply, recalling how easy it was to
build out the &lt;code&gt;Wall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&amp;quot;Not so fast,&amp;quot; our foreman retorts. We&amp;#39;re given new blueprints with
different wall requirements.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# Blueprints for a BrickWall&lt;/span&gt;
describe &lt;span class="constant"&gt;BrickWall&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  let(&lt;span class="symbol"&gt;:brick_wall&lt;/span&gt;) { &lt;span class="constant"&gt;BrickWall&lt;/span&gt;.new }

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should state its dimensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    brick_wall.dimensions.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 30ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should be made from brick&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    brick_wall.made_from.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from brick!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="comment"&gt;# Blueprints for a ConcreteWall&lt;/span&gt;
describe &lt;span class="constant"&gt;ConcreteWall&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  let(&lt;span class="symbol"&gt;:concrete_wall&lt;/span&gt;) { &lt;span class="constant"&gt;ConcreteWall&lt;/span&gt;.new }

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should state its dimensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    concrete_wall.dimensions.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 30ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should be made from concrete&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    concrete_wall.made_from.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from concrete!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="comment"&gt;# Blueprints for a WoodWall&lt;/span&gt;
describe &lt;span class="constant"&gt;WoodWall&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  let(&lt;span class="symbol"&gt;:wood_wall&lt;/span&gt;) { &lt;span class="constant"&gt;WoodWall&lt;/span&gt;.new }

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should state its dimensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    wood_wall.dimensions.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 10ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should be made from wood&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    wood_wall.made_from.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from wood!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Hmm... A couple of ideas run through our heads. We could follow the initial &lt;code&gt;Wall&lt;/code&gt; class and
define each method, hardcoding each string output, for the &lt;code&gt;BrickWall&lt;/code&gt;, &lt;code&gt;ConcreteWall&lt;/code&gt;, and &lt;code&gt;WoodWall&lt;/code&gt;
classes. That seems like an okay idea, but we&amp;#39;d have to hard code each
instance method. What if our house requires a dozen different types of walls?&lt;/p&gt;

&lt;h3&gt;Open That Toolbox!&lt;/h3&gt;

&lt;p&gt;Sipping on our after-lunch coffee, we realize that we&amp;#39;ve got a tool right
for the job, the &lt;em&gt;Template Method&lt;/em&gt; pattern.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;Template Method&lt;/em&gt; pattern, the creation of a &lt;em&gt;skeletal class&lt;/em&gt; will
serve as the basis for various &lt;em&gt;subclasses&lt;/em&gt; or &lt;em&gt;concrete classes&lt;/em&gt;. Within the &lt;em&gt;skeletal class&lt;/em&gt;
there are &lt;em&gt;abstract methods&lt;/em&gt;, which in turn, will be overridden by the
methods of &lt;em&gt;subclasses&lt;/em&gt;. Essentially, we&amp;#39;ll define a &lt;code&gt;Wall&lt;/code&gt; class (our
&lt;em&gt;skeletal class&lt;/em&gt;) and its &lt;em&gt;subclasses&lt;/em&gt;, &lt;code&gt;BrickWall&lt;/code&gt;, &lt;code&gt;ConcreteWall&lt;/code&gt;, and
&lt;code&gt;WoodWall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Going over the blueprints, we notice that the three different classes of
walls each contain the methods &lt;code&gt;#dimensions&lt;/code&gt; and &lt;code&gt;#made_from&lt;/code&gt;, which
result in slighty different strings. With this knowledge, let&amp;#39;s
create our &lt;code&gt;Wall&lt;/code&gt; class and its subclasses.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Wall&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;dimensions&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;I am &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;length&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;ft. long and &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;width&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;made_from&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;I am made from &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;material&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;length&lt;/span&gt;
    &lt;span class="integer"&gt;30&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;BrickWall&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Wall&lt;/span&gt;
  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;width&lt;/span&gt;
    &lt;span class="integer"&gt;20&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;material&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;brick&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;ConcreteWall&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Wall&lt;/span&gt;
  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;width&lt;/span&gt;
    &lt;span class="integer"&gt;20&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;material&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;concrete&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;WoodWall&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Wall&lt;/span&gt;
  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;length&lt;/span&gt;
    &lt;span class="integer"&gt;10&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;width&lt;/span&gt;
    &lt;span class="integer"&gt;20&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;material&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;wood&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;

&lt;h3&gt;Hook Methods&lt;/h3&gt;

&lt;p&gt;Within the &lt;code&gt;Wall&lt;/code&gt; class we have defined a private method called &lt;code&gt;#length&lt;/code&gt;
because we see that &lt;code&gt;BrickWall&lt;/code&gt; and &lt;code&gt;ConcreteWall&lt;/code&gt; share the same
length. As for the &lt;code&gt;WoodWall&lt;/code&gt; class, we simply overwrite the &lt;code&gt;#length&lt;/code&gt;
and give it a value of &lt;code&gt;10&lt;/code&gt;. These are examples of &lt;em&gt;Hook Methods&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hook Methods&lt;/em&gt; serve two purposes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Override the skeletal implementation and define something new&lt;/li&gt;
&lt;li&gt;Or, accept the default implementation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please note that the default implemetation, within the skeletal class, does
not necessarily need to define a method. For example, we could have had:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Wall&lt;/span&gt;

  ...

  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;length&lt;/span&gt;
    raise &lt;span class="constant"&gt;NotImplementedError&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Sorry, you have to override length&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;BrickWall&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Wall&lt;/span&gt;
  private

  ...

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;length&lt;/span&gt;
    &lt;span class="integer"&gt;30&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the example above, the &lt;code&gt;#length&lt;/code&gt; method within the &lt;code&gt;Wall&lt;/code&gt; class
served as a placeholder for the &lt;code&gt;#length&lt;/code&gt; for the &lt;code&gt;BrickWall&lt;/code&gt;, it&amp;#39;s
&lt;em&gt;concrete class&lt;/em&gt;. Essentially, &lt;em&gt;hook methods&lt;/em&gt; inform all &lt;em&gt;concrete
classes&lt;/em&gt; that the method may require an override. If the base
implementation is undefined the subclasses must define the &lt;em&gt;hook
methods&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Those Are Some Nice Walls&lt;/h2&gt;

&lt;p&gt;Our foreman is delighted with the results and we&amp;#39;re going to call it a
day. As we can see, using the &lt;em&gt;Template Method&lt;/em&gt; pattern is not difficult
at all. We first defined a base class, within which we defined necessary
&lt;em&gt;hook methods&lt;/em&gt; to be overridden by our &lt;em&gt;subclasses&lt;/em&gt;. Of course, this
particular design pattern does not solve every conceivable problem, but
helps keep our code clean by the use of inheritance.&lt;/p&gt;

&lt;p&gt;Next we&amp;#39;ll be discussing the &lt;em&gt;Strategy&lt;/em&gt; method pattern. Stay tuned!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>First Month at DockYard</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/office/2013/07/09/first-month-at-dockyard.html"/>
    <id>http://reefpoints.dockyard.com/office/2013/07/09/first-month-at-dockyard.html</id>
    <published>2013-07-09T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Marin Abernethy</name>
    </author>
    <summary>Our summer intern shares her thoughts on her first month with us</summary>
    <content type="html">&lt;p&gt;I came to the programming party a little late in my &lt;a href="http://www.trincoll.edu/Pages/default.aspx"&gt;college&lt;/a&gt; career, 
only having a year and a half of classroom experience under my belt. Due
to my limited CS background, I was rather anxious to start work at a
web development startup, fearing my qualifications were not up to par.
However, my feelings of inadequacy quickly subsided after starting at
DockYard! I was welcomed by a comfortable learning environment and an
atmosphere of positivity and productivity. My coworkers are very
approachable and always willing to answer my questions. Because of
DockYard&amp;#39;s intimate size I am able to see all sides of the business, and
get to know everyone in the office.&lt;/p&gt;

&lt;p&gt;It has now been a month since I began working and already I feel I am
light-years ahead of where I started. My nerves have been replaced by an
eagerness to continue learning and grow as a developer. The amount of
information that has been thrown my way is rather overwhelming. I have
already pored through 6 books, including: &lt;a href="http://pragprog.com/book/rails32/agile-web-development-with-rails-3-2"&gt;Agile Web Development with
Rails&lt;/a&gt; by Sam Ruby and, &lt;a href="http://jsninja.com/"&gt;Secrets of the JavaScript Ninja&lt;/a&gt; by John Resig, in
addition to other readings on &lt;a href="http://coffeescript.org"&gt;CoffeeScript&lt;/a&gt;, version control (&lt;a href="http://git-scm.com"&gt;git&lt;/a&gt;), and
&lt;a href="http://en.wikipedia.org/wiki/User_story"&gt;user stories&lt;/a&gt;. Not to mention my introduction to vim and all the commands
that accompany it. While I cannot claim all of the information has
stuck, the exposure will surely breed understanding. I have learned that
it isn&amp;#39;t about having all the answers, but the efficiency of finding
them that is important.&lt;/p&gt;

&lt;p&gt;In addition to all the reading, I have worked on a small side project: a
simple blog site (my introduction to &lt;a href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;test-driven
development&lt;/a&gt;) that I
rebuilt 3 times, each time adding more features. The saying, &amp;quot;repetition
is the mother of all learning&amp;quot;, has certainly resonated with me after
this exercise.  Also &lt;a href="http://en.wikipedia.org/wiki/Pair_programming"&gt;pair programming&lt;/a&gt; with others in the office has also
been extremely helpful, giving me an idea of the day-to-day. Overall, I
feel lucky to be at DockYard in the midst of the growing field of web
development. Already I can say my experience has been invaluable and I
thoroughly look forward to the rest of the summer.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Steven Trevathan is a DockYarder</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2013/07/08/steven-trevathan-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2013/07/08/steven-trevathan-is-a-dockyarder.html</id>
    <published>2013-07-08T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>DockYard absorbs Dobot!</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/steven-trevathan.jpg" alt="Steven"&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m very happy to announce today that DockYard has joined forces with
Boston design firm Dobot! Leader designer Steven Trevathan has come on
as a partner and Creative Director (until we come up with a title he
prefers) of DockYard.&lt;/p&gt;

&lt;p&gt;This is a huge step forward for us. While we have had in-house designers
we have been actually leaning on Steven from time to time for our
concept design needs. Now with Steven coming on as part of our team he
will focus on building out the design side of DockYard and putting
together a formal concept design process for us.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/strevat"&gt;Follow Steven on Twitter&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Logan Faerber is a DockYarder</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2013/07/08/logan-faerber-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2013/07/08/logan-faerber-is-a-dockyarder.html</id>
    <published>2013-07-08T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>DockYard absorbs Dobot!</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/logan-faerber.jpg" alt="Logan"&gt;
Along with his other fellow Dobot-er we welcome Logan Faerber to the
DockYard team today!&lt;/p&gt;

&lt;p&gt;Logan is a &lt;a href="http://www.loganfaerber.com/"&gt;kick ass illustrator&lt;/a&gt; who
has done work for New York Life, Dynamo Labs, CareShare, CustomMade,
&lt;a href="http://www.biowarestore.com/garrus-screenprint-poster.html"&gt;Bioware&lt;/a&gt;,
and &lt;a href="http://www.archaia.com/archaia-titles/hawken-genesis/"&gt;Archaia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Logan has been working out of our office for the last few months and we
are excited to have his unique talents at DockYard.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/loganfaerber"&gt;Follow Logan on Twitter&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>DockYard Acquires Dobot</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2013/07/08/dockyard-acquires-dobot.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2013/07/08/dockyard-acquires-dobot.html</id>
    <published>2013-07-08T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Joining forces</summary>
    <content type="html">&lt;p&gt;Today I&amp;#39;m very happy to announce that we have acquired local design firm
&lt;a href="http://dobotdo.com"&gt;Dobot&lt;/a&gt;, its two partners Steven &amp;amp; Logan have joined us full-time.
This is a huge move for DockYard, and a simple one for Dobot (they have
been working out of our office for the past few months so they don&amp;#39;t
actually need to move anywhere).&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/acquire.gif" alt="DockYard acquires Dobot"&gt;&lt;/p&gt;

&lt;p&gt;Please see the announcement for &lt;a href="http://reefpoints.dockyard.com/announcement/2013/07/08/steven-trevathan-is-a-dockyarder.html"&gt;Steven
Trevathan&lt;/a&gt;
and the announcement for &lt;a href="http://reefpoints.dockyard.com/announcement/2013/07/08/logan-faerber-is-a-dockyarder.html"&gt;Logan
Faerber&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sean Hussey is a DockYarder</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2013/07/01/sean-hussey-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2013/07/01/sean-hussey-is-a-dockyarder.html</id>
    <published>2013-07-01T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>We snag one of the tallest guys in Ruby</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/hussey.png" alt="Sean Hussey"&gt;
Today is the first day for Sean Hussey at DockYard. He has been
contracting with us for the past few months and I was finally able to
lock him down recently. Sean and I have known one another for years as
he hired me for my first Ruby job at
&lt;a href="http://global.rakuten.com/en/"&gt;RakutenUSA&lt;/a&gt;. He brings years of Sr.
level Ruby experience to our team.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Introducing destroyed_at</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2013/06/28/introducing-destroyed_at.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2013/06/28/introducing-destroyed_at.html</id>
    <published>2013-06-28T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Michael Dupuis</name>
    </author>
    <summary>An ActiveRecord mixin for safe destroys</summary>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/dockyard/destroyed_at"&gt;See the project on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve found that more and more clients are requesting &amp;quot;undestroy&amp;quot;
functionality in their apps. We recently extracted this common pattern into a gem
we&amp;#39;re calling &lt;a href="https://github.com/dockyard/destroyed_at"&gt;DestroyedAt&lt;/a&gt;, an ActiveRecord mixin that makes un-destroying records
simple.&lt;/p&gt;

&lt;p&gt;By
setting the datetime of the &lt;code&gt;#destroyed_at&lt;/code&gt; field of your record, you can
mark records as destroyed, without actually deleting them. By default, the
model in which you &lt;code&gt;include DestroyedAt&lt;/code&gt; is scoped to only include
records that have not been destroyed. So something like
&lt;code&gt;User.all&lt;/code&gt; will only return &lt;code&gt;User&lt;/code&gt;s with &lt;code&gt;#destroyed_at&lt;/code&gt; values of &lt;code&gt;nil&lt;/code&gt;;
and &lt;code&gt;User.unscoped.all&lt;/code&gt; will return all &lt;code&gt;User&lt;/code&gt; records.&lt;/p&gt;

&lt;p&gt;When you want to bring a
record back, simply call &lt;code&gt;#undestroy&lt;/code&gt; on the instance and its
&lt;code&gt;#destroyed_at&lt;/code&gt; will be set to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve baked a bunch of other functionality in as well, including
undestroy callbacks. For the full rundown, head over to &lt;a href="https://github.com/dockyard/destroyed_at"&gt;DestroyedAt&amp;#39;s
GitHub page&lt;/a&gt; .&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Michael Dupuis is a DockYarder</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2013/06/19/michael-dupuis-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2013/06/19/michael-dupuis-is-a-dockyarder.html</id>
    <published>2013-06-19T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Grow baby grow!</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/dupuis.jpg" alt="Michael"&gt;
Recently we added another great mind to the DockYard team: Michael
Dupuis. Mike joins our Boston office and has already been busy building
out client apps in Ruby on Rails and Ember.js for us! He also comes with
some design chops. Welcome Mike!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Marin Abernethy is a DockYarder</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2013/06/19/marin-abernethy-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2013/06/19/marin-abernethy-is-a-dockyarder.html</id>
    <published>2013-06-19T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Our first developer intern</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/abernethy.jpg" alt="Marin"&gt;
Marin comes to us as from Trinity College for the summer. We&amp;#39;ve been
overwhelming her with Ruby, Linux, SQL, JavaScript, and VIM. She&amp;#39;s
excelled and we&amp;#39;re excited to see what she can accomplish over the
remainder of the summer.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Tilde's Ember Training</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ember/2013/05/09/tildes-ember-training.html"/>
    <id>http://reefpoints.dockyard.com/ember/2013/05/09/tildes-ember-training.html</id>
    <published>2013-05-09T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>We sent a group of developers to the Ember.js training that Tilde taught at Bocoup Loft</summary>
    <content type="html">&lt;p&gt;A couple weeks ago, Yehuda Katz and Tom Dale of &lt;a href="http://tilde.io"&gt;Tilde&lt;/a&gt; ran
their 3-day &lt;a href="http://www.tilde.io/training/"&gt;Introduction to Ember.js Training&lt;/a&gt;
at &lt;a href="http://bocoup.com/"&gt;Bocoup&lt;/a&gt; here in Boston. I, along with Amanda,
Doug and Chris, attended the training.&lt;/p&gt;

&lt;h2&gt;Format&lt;/h2&gt;

&lt;p&gt;Throughout the training, attendees were building a simplified Rdio/Spotify clone
using Ember. It was broken up into a series of exercises, which built
upon each other. The exercises were test driven, each having set of QUnit tests that defined the
exercise. Before each exercise, Tom and Yehuda would explain and demo
the concepts via slides and JSBin.&lt;/p&gt;

&lt;h3&gt;Day 1&lt;/h3&gt;

&lt;p&gt;Day 1 was spent outlining the core concepts of
&lt;a href="http://handlebarsjs.com"&gt;Handlebars&lt;/a&gt; and Ember. We
started with Handlebars, which is what Ember uses as its templating
language. After covering the basics of Handlebars, we learned about how
&lt;a href="http://emberjs.com/guides/routing/"&gt;Ember handles routing and outlets&lt;/a&gt;.
After we finished routing, we moved onto creating Handlebars helper
functions.&lt;/p&gt;

&lt;h3&gt;Day 2&lt;/h3&gt;

&lt;p&gt;On day 2, we started off with
&lt;a href="http://emberjs.com/guides/controllers/"&gt;Ember controllers&lt;/a&gt; and how they
serve as proxy objects for the model of your current resource. After
controllers, we covered
&lt;a href="http://emberjs.com/guides/object-model/computed-properties/"&gt;computed properties&lt;/a&gt;.
&lt;a href="http://emberjs.com/guides/views/"&gt;Views&lt;/a&gt; followed computed properties,
then we wrapped up the day with creating custom controls with Ember and
Handlebars.&lt;/p&gt;

&lt;h3&gt;Day 3&lt;/h3&gt;

&lt;p&gt;Once we had built the majority of the app, we had a couple more
exercises that built upon all the exercise we had completed. Tom and
Yehuda also went over how we would use
&lt;a href="http://eviltrout.com/2013/03/23/ember-without-data.html"&gt;Ajax requests to pull in data from a remote source with Promises&lt;/a&gt;.
After wrapping up the remainder of the exercises, we covered how the
&lt;a href="http://stackoverflow.com/questions/13597869/what-is-ember-runloop-and-how-does-it-work"&gt;Ember Run Loop works&lt;/a&gt;,
and discussed approaches to testing Ember applications.&lt;/p&gt;

&lt;h2&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Yehuda and Tom provided a great balance of not-to-dense information,
useful demos and exercises. They did a great job of, what Tom stated as,
&amp;quot;Providing a sufficient level of confusion&amp;quot; in the exercises. Before
each exercise, they would provide all the information needed for the
exercise, but would not give you a list of steps to complete the task.
You may struggle a bit, but they answer any questions you would
have during the exercise. This would help the attendees actually learn
the concepts, rather than just copy/paste a set of code and modify it
here and there and have it work. I, personally, felt that this worked
really well.&lt;/p&gt;

&lt;p&gt;I have worked on a couple side project with Ember before taking this
training, and had a very shallow understanding of some of the concepts.
Coming out of this training, I feel I have a great place to start building
Ember apps. I really fleshed out my understanding of Ember and am really
excited about the technology. I am planning on using it for
any upcoming side projects, to really explore it further. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Context Validations</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2013/05/09/context-validations.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2013/05/09/context-validations.html</id>
    <published>2013-05-09T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>An alternative to the normal Rails validations</summary>
    <content type="html">&lt;p&gt;I just released a new &lt;a href="https://github.com/dockyard/context_validations"&gt;gem called ContextValidations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ContextValidations allows you to set validations on the instance of
ActiveRecord models. Any class-level validations you have already set
in your models are ignored. You may be asking yourself &amp;quot;Whaaaaaat?&amp;quot; so
let&amp;#39;s look into why.&lt;/p&gt;

&lt;h2&gt;Conditional Validations Are A Smell&lt;/h2&gt;

&lt;p&gt;When applications grow in complexity the validation models required to
support them usually grow too. Eventually you will have to &amp;quot;work around&amp;quot;
the validations with conditionals that rely upon state flags. In some
cases you end up writing empty model objects for use with your forms to
avoid the mess that conditional validations introduce.&lt;/p&gt;

&lt;p&gt;The problem here is that the model is defining a single set of
validations but the model needs to absorb different sets of data under
different circumstances. Imagine you have a user account that where
depending upon how the users get to your app will depend upon what data
they need to provide. You might also be importing data from an external
incomplete data set. Do you set these records aside into another table
until the records are claimed and the user can complete registration? Or
do you allow the records to save and have the model enter a state of
&lt;code&gt;unclaimed&lt;/code&gt; to avoid authentication until &lt;code&gt;claimed&lt;/code&gt;? You could just
avoid the validations all together but you definitely don&amp;#39;t want to
allow records that don&amp;#39;t have the most basic of identifying information
such as &lt;code&gt;email&lt;/code&gt; or &lt;code&gt;username&lt;/code&gt; to be saved.&lt;/p&gt;

&lt;p&gt;You can imagine with this scenario the current solution with Rails is
either a very complex and messy validation model or breaking things out
into other models and having a strategy to reconciling that at a later
point in time.&lt;/p&gt;

&lt;h2&gt;Context Matters&lt;/h2&gt;

&lt;p&gt;I have come to believe that defining a monolithic validation set in your
model is the wrong way to go. Context matters. If I am an admin I should
be able to write data to a record that might not be acceptable to a
regular user. Even the simple case of not requiring a password unless
the record is new.&lt;/p&gt;

&lt;h3&gt;Controllers Are the Context&lt;/h3&gt;

&lt;p&gt;I believe the rule of &amp;quot;Fat Model, Skinny Controller&amp;quot; has conditioned
Rails developers to never ever put anything more than a few lines of
code into your controllers. For the most part this is a good trend. But
as we have seen with &lt;a href="https://github.com/rails/strong_parameters"&gt;Strong Parameters&lt;/a&gt; 
there are circumstances where adding a few more lines to our controllers
isn&amp;#39;t going to end the world. I submit the case is also true for
validations. The controller is the context in which the user is
interacting with the data. Going back to the admin example, you most
likely have a &lt;code&gt;UsersController&lt;/code&gt; and an &lt;code&gt;Admin::UsersController&lt;/code&gt; defined.
Two controllers, same data. Different contexts. Not only should you
allow mass assignment to the models differently for each context but
what is considered &amp;quot;valid data&amp;quot; should also be different.&lt;/p&gt;

&lt;h2&gt;Context Validations&lt;/h2&gt;

&lt;p&gt;To handle this need I have just released
&lt;a href="https://github.com/dockyard/context_validations"&gt;ContextValidations&lt;/a&gt;.
The goals of this gem are simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Maintain simplicity&lt;/li&gt;
&lt;li&gt;Enable instance level validations&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t deviate from exisitng Rails validations&lt;/li&gt;
&lt;li&gt;Backwards compatibility with 3rd party libraries&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before I dive into each one let&amp;#39;s see how a set of validations might be
applied in a controller&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;UsersController&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ApplicationController&lt;/span&gt;
  include &lt;span class="constant"&gt;ContextValidations&lt;/span&gt;::&lt;span class="constant"&gt;Controller&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;create&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@user&lt;/span&gt; = &lt;span class="constant"&gt;User&lt;/span&gt;.new(user_params)
    &lt;span class="instance-variable"&gt;@user&lt;/span&gt;.validations = validations(&lt;span class="symbol"&gt;:create&lt;/span&gt;)
    &lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="instance-variable"&gt;@user&lt;/span&gt;.save
      &lt;span class="comment"&gt;# happy path&lt;/span&gt;
    &lt;span class="keyword"&gt;else&lt;/span&gt;
      &lt;span class="comment"&gt;# sad path&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;base_validations&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:first_name&lt;/span&gt;, &lt;span class="symbol"&gt;:last_name&lt;/span&gt; &lt;span class="symbol"&gt;:email&lt;/span&gt;, &lt;span class="symbol"&gt;:presence&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:email&lt;/span&gt;, &lt;span class="symbol"&gt;:uniqueness&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;, &lt;span class="symbol"&gt;:format&lt;/span&gt; =&amp;gt; &lt;span class="constant"&gt;EmailFormat&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:password&lt;/span&gt;, &lt;span class="symbol"&gt;:confirmation&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;create_validations&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:password&lt;/span&gt;, &lt;span class="symbol"&gt;:presence&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Maintain Simplicity&lt;/h3&gt;

&lt;p&gt;At this point some of you are probably thinking &lt;a href="http://rhnh.net/2012/12/03/form-objects-in-rails"&gt;Form Objects&lt;/a&gt;.
Perhaps in the end, Form Objects will be the real answer for what I
strive for. But right now I don&amp;#39;t see a justification for the increase
in complexity. &lt;code&gt;ContextValidations&lt;/code&gt; has attempted to keep the complexity
as low as possible while still allowing for flexibility. The
&lt;code&gt;ContextValidations::Controller&lt;/code&gt; module can be mixed into any object,
not just controllers. Let&amp;#39;s say you had a &lt;a href="http://stevelorek.com/service-objects.html"&gt;Service Object&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;UserService&lt;/span&gt;
  include &lt;span class="constant"&gt;ContextValidations&lt;/span&gt;::&lt;span class="constant"&gt;Controller&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(params)
    &lt;span class="instance-variable"&gt;@params&lt;/span&gt; = params
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;create&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@user&lt;/span&gt; = &lt;span class="constant"&gt;User&lt;/span&gt;.new(create_params)
    &lt;span class="instance-variable"&gt;@user&lt;/span&gt; = validations(&lt;span class="symbol"&gt;:create&lt;/span&gt;)
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;At this point the code looks identitly to the controller example from
above. The validations are accessible anywhere, from any object.&lt;/p&gt;

&lt;h3&gt;Instance level validations&lt;/h3&gt;

&lt;p&gt;The real key here is that the instance of the model is able to declare
what its validations are rather than the class. To that end you must
mixin the &lt;code&gt;ContextValidations::Model&lt;/code&gt; module into any model you want to
use &lt;code&gt;ContextValidations&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;User&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  include &lt;span class="constant"&gt;ContextValidations&lt;/span&gt;::&lt;span class="constant"&gt;Model&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This mixin will do several things to you &lt;code&gt;ActiveRecord&lt;/code&gt; model&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A &lt;code&gt;#validations&lt;/code&gt; setter and getter is added. The default for
&lt;code&gt;#validations&lt;/code&gt; is an empty array. When any arrays are assigned they are
wrapped in an array and falttened out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;:validate&lt;/code&gt; callbacks are completed removed. This allows the
model to accept validations set on the class by 3rd party libraries but
these validations will never run.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;#run_validations!&lt;/code&gt; protected method is overwritten to run
through the instance level validations instead of running the
&lt;code&gt;:validate&lt;/code&gt; callback.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Don&amp;#39;t deviate from exisitng Rails validations&lt;/h3&gt;

&lt;p&gt;The only difference from writing your validations now is they are
written on the instance. The &lt;code&gt;#validates&lt;/code&gt; method functions exactly the
same way. You can still pass conditional validations if you&amp;#39;d like but I
wouldn&amp;#39;t recommend it.&lt;/p&gt;

&lt;h3&gt;Backwards compatibility with 3rd party libraries&lt;/h3&gt;

&lt;p&gt;As mentioned above we don&amp;#39;t want your Rails app to crash if 3rd party
libraries are declaring regular Rails validations in your models. They
are just ignored.&lt;/p&gt;

&lt;h2&gt;Moving forward&lt;/h2&gt;

&lt;p&gt;There are a few directions things could move in. I still haven&amp;#39;t come
up with a simple way to test &lt;code&gt;ContextValidations&lt;/code&gt;. There will also be
validations that are always used regardless of the context. I don&amp;#39;t
think it makes sense to constantly rewrite these validations. One
possibility would be to consider the class validations the
&lt;code&gt;base_validations&lt;/code&gt; that are always run then you can declare context
validations on the instance. This might cause issues with 3rd party
libraries that are using conditional validations. But, we could easily
get around that by ignoring any class level validations that have
conditionals on them.&lt;/p&gt;

&lt;p&gt;I am eager to get feedback on this. I am sure this might cause some
friction as it moves outside of the comfort zone for many Rails devs but
now I am happy with the direction.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Thoughts on Designing Responsive Websites</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/design/2013/04/26/thoughts-on-designing-responsive-websites.html"/>
    <id>http://reefpoints.dockyard.com/design/2013/04/26/thoughts-on-designing-responsive-websites.html</id>
    <published>2013-04-26T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Amanda Cheung</name>
    </author>
    <summary>What I've learned by making a few responsive websites - Part 1</summary>
    <content type="html">&lt;p&gt;Things I have learned about the design process of making responsive websites:&lt;/p&gt;

&lt;h4&gt;Design Mobile First&lt;/h4&gt;

&lt;p&gt;Why do I like to design for narrower screen sizes first? Because it places emphasis on hierarchy and content organization. It prioritizes making decisions about organizing the content of the site, which of course is the most important part! (Take a look at some of &lt;a href="http://karenmcgrane.com/category/content-strategy/"&gt;Karen McGrane&amp;#39;s stuff&lt;/a&gt; if you want to read more about content strategy) Which sections make the most sense near each other? Does the layout order make it easy for a user to find what she or he is looking for? Imagine how disjointed it could be for a mobile user if the content groupings didn&amp;#39;t flow in context among each other. Figuring all this out before moving on to designing wider screen sizes can be very helpful. Everything can&amp;#39;t be shoved &lt;a href="http://iampaddy.com/lifebelow600/"&gt;&amp;quot;above the fold&amp;quot;&lt;/a&gt; in mobile. Say goodbye to hearing that everything is important!&lt;/p&gt;

&lt;h4&gt;Don&amp;#39;t Fight the Web, Work With It!&lt;/h4&gt;

&lt;p&gt;Think ahead about how design elements are going to be implemented during initial design stages. Can it be written out of CSS? Maybe some elements can&amp;#39;t be, but let&amp;#39;s keep those to a minimal. With all the fancy CSS3 things we can do now, we shouldn&amp;#39;t have to open up Photoshop to make design edits. In the way that form should follow function, allow implementation to inform design. This is not an argument against &lt;a href="http://sachagreif.com/flat-pixels/"&gt;skeuomorphism&lt;/a&gt;, but it just so happens that flatter designs tend to be more web-friendly. Sorry, pirate scrolls. Not sorry.&lt;/p&gt;

&lt;h4&gt;Get in the Browser ASAP&lt;/h4&gt;

&lt;p&gt;After laying out a few basic wireframes, I like to jump right into HTML and CSS (or really, &lt;a href="http://haml.info/"&gt;HAML&lt;/a&gt; and &lt;a href="http://sass-lang.com/"&gt;SASS&lt;/a&gt;). Whether you start on paper, Illustrator, or Photoshop, the design won&amp;#39;t look like how it&amp;#39;s really going to look until it&amp;#39;s in the browser. It makes more sense for me to get right in to iterations while seeing how layouts are behaving at different screen sizes. I find myself doing a lot of trial and error because I can never be sure of what may or may not work. If I think of a possible solution, I try it out. If it doesn&amp;#39;t work better than what I had, I&amp;#39;ll revert it and try something else. The majority of my designing and problem-solving happens in the browser now where I can shrink and expand the width of the window to see how everything is coming together. For me, getting right into this &lt;a href="http://en.wikipedia.org/wiki/Iterative_design"&gt;iterative design&lt;/a&gt; process beats out creating thorough mockups that will only represent so little of the &amp;quot;final product&amp;quot;.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s a lot of stuff to know so the best way to learn is to dive right in!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>We are hiring for a fulltime Ember.js developer</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2013/04/04/we-are-hiring-for-an-emberjs-dev.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2013/04/04/we-are-hiring-for-an-emberjs-dev.html</id>
    <published>2013-04-04T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Work at DockYard building Ember.js apps!</summary>
    <content type="html">&lt;p&gt;We are looking for an Ember.js Developer. Our ideal
candidate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Work on cutting-edge Ember.js applications&lt;/li&gt;
&lt;li&gt;Passionate about new HTML/JavaScript technologies&lt;/li&gt;
&lt;li&gt;Has experience building complex client side applications&lt;/li&gt;
&lt;li&gt;Some backend experience would be nice&lt;/li&gt;
&lt;li&gt;Some database experience would be nice&lt;/li&gt;
&lt;li&gt;Enjoys contributing to open source, writing blog posts, giving talks&lt;/li&gt;
&lt;li&gt;Willing to live in Boston (we can relocate for the right candidate)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our current tech stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rubyonrails.org"&gt;Ruby on Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://postgresql.com"&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://coffeescript.org"&gt;CoffeeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Most of our apps deploy to &lt;a href="http://heroku.com"&gt;Heroku&lt;/a&gt;, if not then
to &lt;a href="http://linode.com"&gt;Linode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://dockyard.com"&gt;DockYard&lt;/a&gt; is a Boston-based consultancy that always wants to work with
the best people and the best technology. We are committed to Ember.js as
a client side framework. We help organize the Boston &lt;a href="http://www.meetup.com/Boston-Ember-js"&gt;Ember.js
meetup&lt;/a&gt; and
I recently spoke at &lt;a href="http://embercamp.com"&gt;Ember Camp in San Francisco&lt;/a&gt;. We are already &lt;a href="https://github.com/dockyard/ember-builds"&gt;building
tools around Ember.js&lt;/a&gt; and hope to continue to improve and build new ones
in the upcoming years.&lt;/p&gt;

&lt;p&gt;Please email &lt;a href="mailto:contact@dockyard.com"&gt;contact@dockyard.com&lt;/a&gt; with
all relevant information on why you would be an ideal candidate for a
fulltime Ember.js developer.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Running PostgreSQL 9.2 on Travis-CI</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2013/03/29/running-postgresql-9-2-on-travis-ci.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2013/03/29/running-postgresql-9-2-on-travis-ci.html</id>
    <published>2013-03-29T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>Test your gem against the latest PostgreSQL version (or an older one)</summary>
    <content type="html">&lt;p&gt;I spent most of yesterday trying to get PostgreSQL 9.2 running &lt;a href="http://travis-ci.org"&gt;Travis-CI&lt;/a&gt;.
After almost 30 attempts, I successfully tested &lt;a href="https://github.com/dockyard/postgres_ext"&gt;postgres_ext&lt;/a&gt; against PostgreSQL 9.2.&lt;/p&gt;

&lt;p&gt;Here is the final &lt;code&gt;before_script&lt;/code&gt; needed to install PostgreSQL 9.2.&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;before_script:
  - sudo /etc/init.d/postgresql stop
  - sudo cp /etc/postgresql/9.1/main/pg_hba.conf ./
  - sudo apt-get remove postgresql postgresql-9.1 -qq --purge
  - source /etc/lsb-release
  - echo &amp;quot;deb http://apt.postgresql.org/pub/repos/apt/ $DISTRIB_CODENAME-pgdg main&amp;quot; &amp;gt; pgdg.list
  - sudo mv pgdg.list /etc/apt/sources.list.d/
  - wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -
  - sudo apt-get update
  - sudo apt-get -o Dpkg::Options::=&amp;quot;--force-confdef&amp;quot; -o Dpkg::Options::=&amp;quot;--force-confnew&amp;quot; install postgresql-9.2 postgresql-contrib-9.2 -qq
  - sudo /etc/init.d/postgresql stop
  - sudo cp ./pg_hba.conf /etc/postgresql/9.2/main
  - sudo /etc/init.d/postgresql start
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Step by step explanation&lt;/h2&gt;

&lt;h3&gt;Out with the old&lt;/h3&gt;

&lt;p&gt;Currently, Travis-CI has PostgreSQL 9.1 installed with a passwordless &lt;code&gt;postgres&lt;/code&gt; superuser role. We first stop the current user by calling
&lt;code&gt;sudo /etc/init.d/postgresql stop&lt;/code&gt;. We also want to copy the current &lt;code&gt;pg_hba.conf&lt;/code&gt;, since we can reuse it with PostgreSQL 9.2 to disable the need
for a password for the &lt;code&gt;postgres&lt;/code&gt; role. We then remove the currently installed version via &lt;code&gt;sudo apt-get remove postgresql postgresql-9.1 -qq --purge&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Add the apt.postgresql.org repositories&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://postgresql.org"&gt;Postgresql.org&lt;/a&gt; maintains Debian and Ubuntu packages of the current PostgreSQL 8.3, 8.4, 9.0, 9.1 and 9.2 builds at
&lt;a href="http://apt.postgresql.org"&gt;apt.postgresql.org&lt;/a&gt; (&lt;a href="https://wiki.postgresql.org/wiki/Apt"&gt;more
information&lt;/a&gt;). Since Travis-CI
workers run Ubuntu, we can leverage these packages. We first load the
Ubuntu distribution environment variables via &lt;code&gt;source /etc/lsb-release&lt;/code&gt;.
Using the &lt;code&gt;$DISTRIB_CODENAME&lt;/code&gt; variable, we can set up the pgdg.list file
that we will add to the apt-get sources list directory. We do so with
the following command:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;echo &amp;quot;deb http://apt.postgresql.org/pub/repos/apt/ $DISTRIB_CODENAME-pgdg main&amp;quot; &amp;gt; pgdg.list
sudo mv pgdg.list /etc/apt/sources.list.d/
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The last thing we have to do before we can start installing the 9.2 is
to import postgresql.org&amp;#39;s apt key via&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;In with the new&lt;/h3&gt;

&lt;p&gt;After we update our package listing via &lt;code&gt;sudo apt-get update&lt;/code&gt;, we can
install &lt;code&gt;postgresql-9.2&lt;/code&gt; and &lt;code&gt;postgresql-contrib-9.2&lt;/code&gt; (needed for the
PostgreSQL extensions) via:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;sudo apt-get -o Dpkg::Options::=&amp;quot;--force-confdef&amp;quot; -o Dpkg::Options::=&amp;quot;--force-confnew&amp;quot; install postgresql-9.2 postgresql-contrib-9.2 -qq
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We need the &lt;code&gt;Dpkg::Options&lt;/code&gt; to automatically resolve any configuration
file conflicts left behind by 9.1 (even though we purge the files, for
some reason the &lt;code&gt;/etc/init.d/postgresql&lt;/code&gt; file gets left behind). Without
the &lt;code&gt;Dpkg::Options&lt;/code&gt;, apt-get will raise a user prompt that will hang the
Travis-CI build.&lt;/p&gt;

&lt;p&gt;At this point, we have a vanilla install of PostgreSQL 9.2, which will
prompt for a password for the &lt;code&gt;postgres&lt;/code&gt; role. We then need to stop the
server, replace the 9.2 &lt;code&gt;pg_hba.conf&lt;/code&gt; with the custom Travis-CI one we
copied earlier, then restart the server:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;sudo /etc/init.d/postgresql stop
sudo cp ./pg_hba.conf /etc/postgresql/9.2/main
sudo /etc/init.d/postgresql start
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;At this point, you can use any other &lt;code&gt;before_script&lt;/code&gt; commands you were
previously using to create your database.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;After a decent amount of trial and error, I arrived at the above
&lt;code&gt;before_script&lt;/code&gt; to install PostgreSQL 9.2. I am currently adding support
for &lt;a href="http://www.postgresql.org/docs/9.2/static/rangetypes.html"&gt;ranges&lt;/a&gt;
to postgres&lt;em&gt;ext, which was added in 9.2. You should be able use this
`before&lt;/em&gt;script` to add 9.2 to your Travis-CI builds.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Adding route specific body class tags in Ember</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ember/2013/03/27/body-class-tags-in-ember.html"/>
    <id>http://reefpoints.dockyard.com/ember/2013/03/27/body-class-tags-in-ember.html</id>
    <published>2013-03-27T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>For design!</summary>
    <content type="html">&lt;p&gt;Our &lt;a href="http://twitter.com/cssboy"&gt;designer&lt;/a&gt; likes to use body class tags
depending upon the context of the app he is designing. We&amp;#39;re currently
building an Ember app and this is how I got it working:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.Route.reopen({
  &lt;span class="function"&gt;activate&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;var&lt;/span&gt; cssClass = &lt;span class="local-variable"&gt;this&lt;/span&gt;.toCssClass();
    &lt;span class="comment"&gt;// you probably don't need the application class&lt;/span&gt;
    &lt;span class="comment"&gt;// to be added to the body&lt;/span&gt;
    &lt;span class="keyword"&gt;if&lt;/span&gt; (cssClass != &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;application&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) {
      Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;body&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).addClass(cssClass);
    }
  },
  &lt;span class="function"&gt;deactivate&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    Ember.&lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;body&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).removeClass(&lt;span class="local-variable"&gt;this&lt;/span&gt;.toCssClass());
  },
  &lt;span class="function"&gt;toCssClass&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.routeName.replace(&lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="content"&gt;\.&lt;/span&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="modifier"&gt;g&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;-&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).dasherize();
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Concurrent Indexes in PostgreSQL for Rails 4 and Postgres_ext</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2013/03/26/concurrent-indexes-in-postgresql-for-rails-4-and-postgres_ext.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2013/03/26/concurrent-indexes-in-postgresql-for-rails-4-and-postgres_ext.html</id>
    <published>2013-03-26T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>Prevent new indexes from locking up your tables</summary>
    <content type="html">&lt;p&gt;PostgreSQL allows you to &lt;a href="http://www.postgresguide.com/performance/indexes.html#create-index-concurrently"&gt;create your indexes
concurrently&lt;/a&gt;
so that your table isn&amp;#39;t locked as the index builds. This allows you to
avoid taking a performance hit when adding a new index to a large table.
Yesterday, I submitted a &lt;a href="https://github.com/rails/rails/pull/9923"&gt;pull request to
Rails&lt;/a&gt; that as merged in this
morning that allows you to add concurrent indexes through the
&lt;code&gt;add_index&lt;/code&gt; method in your migrations. To create an index concurrently,
you add the &lt;code&gt;algorithm: :concurrently&lt;/code&gt; option to the &lt;code&gt;add_index&lt;/code&gt; call&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;add_index &lt;span class="symbol"&gt;:table&lt;/span&gt;, &lt;span class="symbol"&gt;:column&lt;/span&gt;, &lt;span class="key"&gt;algorithm&lt;/span&gt;: &lt;span class="symbol"&gt;:concurrently&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A side effect of this commit is that it also enables the &lt;code&gt;algorithm&lt;/code&gt;
option for MySQL too, so MySQL users can create indexes using &lt;code&gt;DEFAULT&lt;/code&gt;,
&lt;code&gt;INPLACE&lt;/code&gt; or &lt;code&gt;COPY&lt;/code&gt; algorithm when creating indexes.&lt;/p&gt;

&lt;h2&gt;Postgres_ext gains concurrent index support as well&lt;/h2&gt;

&lt;p&gt;This morning I added support for concurrent indexes to
&lt;a href="https://github.com/dockyard/postgres_ext"&gt;postgres_ext&lt;/a&gt; as well, using
the same syntax as the Rails 4 example above. The 0.3.0 version of
postgres_ext was released, which contains this, and a &lt;a href="https://github.com/dockyard/postgres_ext/blob/master/CHANGELOG.md#030"&gt;slew of other
improvements as
well&lt;/a&gt;.
One thing to note, the &lt;code&gt;index_type&lt;/code&gt; option for &lt;code&gt;add_index&lt;/code&gt; has been
renamed to &lt;code&gt;using&lt;/code&gt; to match Rails 4.&lt;/p&gt;

&lt;p&gt;If you have any features you want to see in postgres_ext or have any
issues, &lt;a href="https://github.com/dockyard/postgres_ext/issue"&gt;open an issue&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Igata</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2013/03/25/igata.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2013/03/25/igata.html</id>
    <published>2013-03-25T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>We built an App Store for Heroku, got bored with it, and now open sourced it</summary>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/dockyard/igata"&gt;View the code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://igata.io"&gt;Try it out!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A year and a half ago I started thinking about a product I wanted to
build. I am a big fan of Heroku and I felt something missing from their
eco-system was an App Store. Similar to the WordPress Theme Store. This
Heroku App Store would allow developers to create fully realized
applications and sell them to non developers. The person on the
purchasing side wouldn&amp;#39;t even need to know about Heroku. We built this
product over the past year, got the &amp;quot;thumbs up&amp;quot; from Heroku, finally got bored with the idea of launching it, and
are now open sourcing it for all to see. I will go into the challenges we
faced as a consulting firm building a product and why we decided to give
this away rather than &amp;quot;go for it&amp;quot;.&lt;/p&gt;

&lt;h2&gt;Concept to reality&lt;/h2&gt;

&lt;p&gt;The concept was simple: App Store for Heroku. I built the original app
code in May of 2012. I would say about 50% of the app was completed in a
week. However, what I quickly learned is that balancing consulting a
product development is not easy. Quickly development on Igata turned
into a see-saw. A day of work here and there in between contracts. It
became very difficult to stay focused and keep interested in the
project. But I believed it was one that could do well if positioned
properly. The idea of proving an additional revenue stream to Heroku
also felt like a good challenge.&lt;/p&gt;

&lt;p&gt;I let the app sit for a few months while we were working on a very large
contract over the summer. Then the Rails Rumble came and I was a judge,
I saw an app called &lt;a href="https://deploybutton.com"&gt;Deploy Button&lt;/a&gt; and I
freaked out. This was essentially what we had already built but without
the purchasing aspect. I emailed my team and told them we weren&amp;#39;t taking
any more contracts until we finished Igata. This proved to not work very
well in reality. As a Rails consultancy we are not cheap but you don&amp;#39;t
realize just how expensive you are until there is no money coming in. So
we went back on contract and shelved Igata, again. I kept coming back to
it every so often. Finally I decided to open source it.&lt;/p&gt;

&lt;h2&gt;Validation&lt;/h2&gt;

&lt;p&gt;It wasn&amp;#39;t until I made the decision to open source Igata that I started
to get some validation of the concept. I was very secretive about the
app as I figured if Heroku found out about it, and liked the idea, they
would just toss a few devs at it for a week or two and come out with an
&amp;quot;official&amp;quot; app store. But now that I was going to OSS is fuck it, I&amp;#39;ll
tell everybody! I told a few friends that work at Heroku and in the end
it was foolish of me to worry about that sort of thing. Several people
encouraged me not to open source and just finish and release. So I went
to Waza (Heroku&amp;#39;s Conference) and met with a few people from Heroku&amp;#39;s
Partner program, once I showed them the app they loved it.&lt;/p&gt;

&lt;p&gt;I came home a few weeks ago, pumped to finish the app.&lt;/p&gt;

&lt;h2&gt;Back to Open Sourcing&lt;/h2&gt;

&lt;p&gt;I wouldn&amp;#39;t say doubt began to creep back in, just more that I really
didn&amp;#39;t like the idea of what would come of Heroku if it it was a
success. Maintaining an app store and building it out really doesn&amp;#39;t
interest me at all. I had a choice: shit or get off the pot. I&amp;#39;ve now
decided to get off the pot.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m happy to go into more details on what our business model would have
been in another post if people are interested. The app itself is about
95% complete. There were some changes to the payment system we would
make. But overall I&amp;#39;m happy with what we built considering the very
disrupted development schedule on it. I hope this app can serve someone
well.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Fixing Capybara 2.0 and Labels</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ember/2013/03/21/capybara-and-unique-labels.html"/>
    <id>http://reefpoints.dockyard.com/ember/2013/03/21/capybara-and-unique-labels.html</id>
    <published>2013-03-21T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Capybara is broken, they refused to fix. Here is the monkey patch</summary>
    <content type="html">&lt;p&gt;I love Capybara, it makes integration testing a breeze. However, one of
the decisions made for Capybara 2.0 confuses an annoys me. In Capybara
1.x you could do the following:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;fill_in &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Password&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;123456&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
fill_in &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Password confirmation&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;123456&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And everything worked. In Capybara 2.0 this does not work. Capybara will
notice two labels that contain &amp;#39;Password&amp;#39; and complain about an
ambiguous locator. The suggested work around is to attach meta data to
the input element and use that for the selector. There are two reasons
why I don&amp;#39;t like this. First, I am doing Ember development now and I
have no control of the ID, it is generated by the framework. Second, I
believe that the integration test should be recreating the steps (as
much as possible) as if a user were actually using the app. Something
like:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;fill_in &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;[data-name=&amp;quot;password&amp;quot;]&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;123456&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
fill_in &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;[data-name=&amp;quot;password_confirmation&amp;quot;]&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:with&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;123456&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Doesn&amp;#39;t sit right with me. Users are looking at the text, not the selectors.
I get that apps have the ability to show different languages but that doesn&amp;#39;t conern me, I don&amp;#39;t need
to test if the Rails &lt;code&gt;i18n&lt;/code&gt; works or not. I just care about asserting the happy and sad
paths in my app.&lt;/p&gt;

&lt;p&gt;So, to fix this problem simply add the
following code into your &lt;code&gt;test_helper.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;module&lt;/span&gt; &lt;span class="class"&gt;XPath::HTML&lt;/span&gt;
  protected

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;locate_field&lt;/span&gt;(xpath, locator)
    locate_field = xpath[attr(&lt;span class="symbol"&gt;:id&lt;/span&gt;).equals(locator) | attr(&lt;span class="symbol"&gt;:name&lt;/span&gt;).equals(locator) | attr(&lt;span class="symbol"&gt;:placeholder&lt;/span&gt;).equals(locator) | attr(&lt;span class="symbol"&gt;:id&lt;/span&gt;).equals(anywhere(&lt;span class="symbol"&gt;:label&lt;/span&gt;)[string.n.equals(locator)].attr(&lt;span class="symbol"&gt;:for&lt;/span&gt;))]
    locate_field += descendant(&lt;span class="symbol"&gt;:label&lt;/span&gt;)[string.n.contains(locator)].descendant(xpath)
    locate_field[~attr(&lt;span class="symbol"&gt;:disabled&lt;/span&gt;)]
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And you should be all set!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Mike Sager Joins DockYard</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2013/03/19/mike-sager-joins-dockyard.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2013/03/19/mike-sager-joins-dockyard.html</id>
    <published>2013-03-19T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Sager!!!!!</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/mike-sager.png" alt="Sager"&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m very happy to announce that Mike Sager has joined DockYard! Sager
and I met while working on The Campaign That Shall Not Be Named (it was
a very &amp;quot;special&amp;quot; one in MA) we kept in touch on and off after that until
we recently worked together on a project for the AFL-CIO.&lt;/p&gt;

&lt;p&gt;Sager brings an intimate knowledge of the progressive political tech
arena. DockYard is already making a great name for itself with political
tech and NPOs and we&amp;#39;re looking forward to the klout that Sager will
bring to the table.&lt;/p&gt;

&lt;p&gt;While not yet &amp;quot;official&amp;quot; we will soon be opening an office in
Washington, DC. Sager and Chris Gill will be running this office and we
are looking to hire Rails developers that have experience building apps
in politics. &lt;a href="mailto:contact@dockyard.com"&gt;Join us!&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Introducing Ember-EasyForm</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ember/2013/02/21/ember-easy-form.html"/>
    <id>http://reefpoints.dockyard.com/ember/2013/02/21/ember-easy-form.html</id>
    <published>2013-02-21T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>A SimpleForm-like FormBuilder for Ember</summary>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/dockyard/ember-easyForm"&gt;View the project on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the more tedious tasks in Ember is writing forms. It is not
uncommon to have to write something like so:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;input string&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;for&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;firstNameField.field_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;First name&lt;span class="tag"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextField&lt;/span&gt; &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;first_name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;viewName&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstNameField&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;input string&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;for&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;lastNameField.field_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Last name&lt;span class="tag"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextField&lt;/span&gt; &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;last_name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;viewName&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastNameField&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;input string&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;for&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;ageField.field_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Age&lt;span class="tag"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextField&lt;/span&gt; &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;age&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;age&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;viewName&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ageField&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;submit&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;value&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Submit&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And this is just a very simple form, but what if we could write this:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;formFor&lt;/span&gt; &lt;span class="attribute-name"&gt;controller&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;firstName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;lastName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;age&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;submit&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;formFor&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That is &lt;em&gt;much&lt;/em&gt; more concise! We pass the &lt;code&gt;controller&lt;/code&gt; as the context to
the &lt;code&gt;formFor&lt;/code&gt; Handlebars helper. Then we can simply call &lt;code&gt;input&lt;/code&gt; for
each property we want.&lt;/p&gt;

&lt;p&gt;By default &lt;code&gt;EasyForm&lt;/code&gt; will use text fields for the rendered input.
However, in certain cases it will attempt to properly set the &lt;code&gt;type&lt;/code&gt;. If
the property contains &lt;code&gt;email&lt;/code&gt; the &lt;code&gt;type&lt;/code&gt; will be set to &lt;code&gt;email&lt;/code&gt; or of
the property contains &lt;code&gt;password&lt;/code&gt; the &lt;code&gt;type&lt;/code&gt; will be set to &lt;code&gt;password&lt;/code&gt;.
You can override this and set the type yourself:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;code&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;hidden&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Currently the only other input type supported is &lt;code&gt;textarea&lt;/code&gt;, you can
create one with:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;bio&lt;/span&gt; &lt;span class="attribute-name"&gt;as&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I plan on adding support for the other input types such as &lt;code&gt;select&lt;/code&gt; in
the next few weeks.&lt;/p&gt;

&lt;h2&gt;Validations&lt;/h2&gt;

&lt;p&gt;This implementation has basic support for property validations.
Currently it works with &lt;code&gt;ember-data-validations&lt;/code&gt; but that project might
get rolled into a larger Ember Object Validation effort and at that time
I will change &lt;code&gt;ember-easyForm&lt;/code&gt; to support whatever that is.&lt;/p&gt;

&lt;p&gt;Validations will fire on &lt;code&gt;onFocusOut&lt;/code&gt; for each input and will render
into a &lt;code&gt;&amp;lt;span class=&amp;quot;error&amp;quot;&amp;gt;&lt;/code&gt; element associated with the given input.&lt;/p&gt;

&lt;p&gt;If your model doesn&amp;#39;t have validations this behavior will be ignored.&lt;/p&gt;

&lt;h2&gt;Form Submit&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;submit&lt;/code&gt; helper will render a submit input but you can just write
one yourself if you wish. The &lt;code&gt;onSubmit&lt;/code&gt; action for the wrapping &lt;code&gt;form&lt;/code&gt;
element will do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Attempt to validate for object. If validations are not supported it
will go to step 3.&lt;/li&gt;
&lt;li&gt;If validations fail form submit is interrupted and errors are
rendered. If not go to step 3.&lt;/li&gt;
&lt;li&gt;The view for the &lt;code&gt;form&lt;/code&gt; element will attempt to call a &lt;code&gt;submit&lt;/code&gt;
action on the controller. This is an action that you need to supply
yourself:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.NewUserController = Ember.ObjectController.extend({
  &lt;span class="function"&gt;submit&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// handle form submit here&lt;/span&gt;
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;More to come!&lt;/h2&gt;

&lt;p&gt;This is very close to what I recently (and briefly) showed at
&lt;a href="http://www.embercamp.com"&gt;EmberCamp&lt;/a&gt;
last week. I hope to continue to build this project into a form builder
that evrerybody will be happy to use. &lt;a href="https://github.com/dockyard/ember-easyForm/issues"&gt;Please feel free to propose new
idea in the issues for this project on GitHub&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building an Ember app with RailsAPI - Part 3</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ember/2013/01/10/building-an-ember-app-with-rails-api-part-3.html"/>
    <id>http://reefpoints.dockyard.com/ember/2013/01/10/building-an-ember-app-with-rails-api-part-3.html</id>
    <published>2013-01-10T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>CUD, it isn't just for cows</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;This article was last updated on May 28, 2013 and reflects the state
 of Ember (1.0.0-rc4) and the latest build of Ember Data (0.13) as of
that date.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bcardarella/ember-railsapi"&gt;Fork the project on Github!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ember-rails-api.herokuapp.com/"&gt;Use the app live on Heroku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href="/ember/2013/01/07/building-an-ember-app-with-rails-api-part-1.html"&gt;Part 1&lt;/a&gt; I showed you how to setup a &lt;code&gt;Rails-API&lt;/code&gt; app for Ember.&lt;/p&gt;

&lt;p&gt;In &lt;a href="/ember/2013/01/09/building-an-ember-app-with-rails-api-part-2.html"&gt;Part 2&lt;/a&gt; I showed you the basics of building an Ember app, reading from a backend API and displaying that information.&lt;/p&gt;

&lt;p&gt;Today we&amp;#39;re going to do some coding on the Rails side and the Ember side to add Creating, Updating, and Destroying records.&lt;/p&gt;

&lt;h2&gt;Part 3 - The Big Finish&lt;/h2&gt;

&lt;p&gt;In &lt;a href="http://reefpoints.dockyard.com/ember/2013/01/07/building-an-ember-app-with-rails-api-part-1.html"&gt;Part 1&lt;/a&gt; we setup the backend using &lt;a href="https://github.com/rails-api/rails-api/"&gt;Rails API&lt;/a&gt;. In &lt;a href="http://reefpoints.dockyard.com/ember/2013/01/09/building-an-ember-app-with-rails-api-part-2.html"&gt;Part 2&lt;/a&gt; we built out the basics of an Ember app, reading from a remote data source and displaying that data. Now we&amp;#39;re going to add the ability to Create, Update, and Destroy that data. This part will be a mix of Ember and Rails code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: If you have been following along that &lt;a href="http://reefpoints.dockyard.com/ember/2013/01/09/building-an-ember-app-with-rails-api-part-2.html"&gt;Part 2&lt;/a&gt; was recently updated to reflect new changes to the Ember Router, you will need to go back and update your code. Absolute make sure to update your ember.js and ember-data.js dependencies as they have been updated on the github repo&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Create&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s start by adding a &lt;code&gt;Create&lt;/code&gt; button to our index page:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;users.new&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;btn btn-primary&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;Create&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We need to add the proper route so the index page doesn&amp;#39;t blow up. While we&amp;#39;re in here we&amp;#39;ll add the &lt;code&gt;edit&lt;/code&gt; route as well.&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Router.map -&amp;gt;
  @resource 'users', -&amp;gt;
    @route 'new'
    @route 'edit',
      path: '/:user_id/edit'
    @route 'show',
      path: '/:user_id'
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And now we can add the &lt;code&gt;UsersNewRoute&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.UsersNewRoute = App.UsersRoute.extend
  model: -&amp;gt;
    App.User.createRecord()
  setupController: (controller, model) -&amp;gt;
    controller.set('content', model)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Don&amp;#39;t be fooled by the &lt;code&gt;createRecord()&lt;/code&gt; call. This will not write anything to the backend. This call is simply used to create a new model. Now let&amp;#39;s create the template &lt;code&gt;app/assets/javascripts/templates/users/new.hbs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Create &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;fullName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;for&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;firstNameField.elementId&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;First Name&lt;span class="tag"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextField&lt;/span&gt; &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;first_name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;viewName&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstNameField&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;for&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastNameField.elementId&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Last Name&lt;span class="tag"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextField&lt;/span&gt; &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;last_name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;viewName&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastNameField&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;for&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;quoteField.elementId&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Quote&lt;span class="tag"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextArea&lt;/span&gt; &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;quote&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;quote&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;viewName&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;quoteField&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;save&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;btn btn-success&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Create&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;page-header&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;cancel&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;btn btn-inverse&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next we&amp;#39;ll add &lt;code&gt;app/assets/javascripts/controllers/users/newController.coffeescript&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.UsersNewController = Ember.ObjectController.extend
  headerTitle: 'Create'
  buttonTitle: 'Create'

  save: -&amp;gt;
    @content.save().then =&amp;gt;
      @transitionToRoute('users.show', @content)

  cancel: -&amp;gt;
    @content.deleteRecord()
    @transitionToRoute('users.index')
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The first two functions &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;cancel&lt;/code&gt; are actions that are mapped in the template. Let&amp;#39;s break down each:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;save&lt;/code&gt; will make a call to &lt;code&gt;this.store.commit()&lt;/code&gt;. You will notice we are not modifying a model, assigning params, etc... as you would in a Rails app. Keep in mind that when you modify data that is bound in the form you are actually modifying the data in the model itself. The datastore in Ember needs to be directed when these modifications should be made &amp;quot;permanent&amp;quot;, and because we are using the RESTAdapter Ember will attempt to write these changes to the backend.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cancel&lt;/code&gt; If the user decides to not create a new user we must delete the record we created then transition to the &lt;code&gt;index&lt;/code&gt; page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://emberjs.com/guides/models/model-lifecycle"&gt;Learn more about the Ember Model Lifecycle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally we&amp;#39;re going to hook up the back end in &lt;code&gt;app/controllers/users_controller.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;create&lt;/span&gt;
  user = &lt;span class="constant"&gt;User&lt;/span&gt;.new(params[&lt;span class="symbol"&gt;:user&lt;/span&gt;])

  &lt;span class="keyword"&gt;if&lt;/span&gt; user.save
    render &lt;span class="key"&gt;json&lt;/span&gt;: user
  &lt;span class="keyword"&gt;else&lt;/span&gt;
    render &lt;span class="key"&gt;json&lt;/span&gt;: user, &lt;span class="key"&gt;status&lt;/span&gt;: &lt;span class="integer"&gt;422&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It has been mentioned that &lt;code&gt;422&lt;/code&gt; is the proper status code for validation failures. Personally I would prefer to use &lt;code&gt;respond_with&lt;/code&gt; but it isn&amp;#39;t part of the default Rails-API stack, &lt;a href="https://groups.google.com/forum/?fromgroups=#!topic/rails-api-core/QhPh2VG7yTU"&gt;hopefully this will change&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s run our app and see how it goes.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/kFC9arb.png" alt="New1"&gt;&lt;/p&gt;

&lt;p&gt;Whoops, we have &lt;code&gt;undefined undefined&lt;/code&gt; for the &lt;code&gt;fullName&lt;/code&gt;. Let&amp;#39;s set default values of an empty string in our user model:&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.User = DS.Model.extend
  firstName: DS.attr('string', defaultValue: '' )
  lastName: DS.attr('string', defaultValue: '' )
  quote: DS.attr('string')
  fullName: (-&amp;gt;
    &amp;quot;#{@get('firstName')} #{@get('lastName')}&amp;quot;
  ).property('firstName', 'lastName')
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now when we add data and create it will write to the back end, take us to the show page. When can then click &lt;code&gt;Back&lt;/code&gt; and we can see the record has been automatically added to the collection on the &lt;code&gt;index&lt;/code&gt; page.&lt;/p&gt;

&lt;p&gt;Adding &lt;code&gt;Edit&lt;/code&gt; should be straight forward now that we have done create. Start will adding the route:&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.UsersEditRoute = Ember.Route.extend
  model: (params) -&amp;gt;
    App.User.find(params.user_id)
  setupController: (controller, model) -&amp;gt;
    controller.set('content', model)
    @controllerFor('application').set('currentRoute', 'users')
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#39;ll notice that this route is identical to &lt;code&gt;App.UsersShowRoute&lt;/code&gt; we wrote in Part 2, let&amp;#39;s DRY this up&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.UserRoute = Ember.Route.extend
  model: (params) -&amp;gt;
    App.User.find(params.user_id)
  setupController: (controller, model) -&amp;gt;
    controller.set('content', model)
    @controllerFor('application').set('currentRoute', 'users')

App.UsersShowRoute = App.UserRoute.extend()
App.UsersEditRoute = App.UserRoute.extend()
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next we&amp;#39;ll add the edit link to &lt;code&gt;app/assets/javascripts/templates/users/show.hbs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;users.edit&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="attribute-name"&gt;content&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;btn btn-primary&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;Edit&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now the edit template itself in &lt;code&gt;app/assets/javascripts/templates/users/edit.hbs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Edit &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;fullName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;for&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;firstNameField.elementId&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;First Name&lt;span class="tag"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextField&lt;/span&gt; &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;first_name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;viewName&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstNameField&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;for&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastNameField.elementId&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Last Name&lt;span class="tag"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextField&lt;/span&gt; &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;last_name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;viewName&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastNameField&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;for&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;quoteField.elementId&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Quote&lt;span class="tag"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextArea&lt;/span&gt; &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;quote&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;quote&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;viewName&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;quoteField&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;save&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;btn btn-success&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Update&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;page-header&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;cancel&lt;/span&gt; &lt;span class="attribute-name"&gt;target&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;btn btn-inverse&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And now the controller &lt;code&gt;app/assets/javascripts/controllers/users/editController.coffee&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.UsersEditController = Ember.ObjectController.extend
  destroy: -&amp;gt;
    @content.deleteRecord()
    @store.commit()
    @transitionTo('users.index')

  save: -&amp;gt;
    @content.save().then =&amp;gt;
      @transitionToRoute('users.show', @content)

  cancel: -&amp;gt;
    if @content.isDirty
      @content.rollback()
    @transitionTo('users.show', @content)

  buttonTitle: 'Edit'
  headerTitle: 'Editing'
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This controller looks similar to &lt;code&gt;App.UsersNewController&lt;/code&gt; but let&amp;#39;s explore the differences&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;save&lt;/code&gt; here because the model already has an &lt;code&gt;id&lt;/code&gt; we can commit to the datastore and transition.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cancel&lt;/code&gt; instead of deleting the record we want to rollback to its previous state. And we can only rollback if the record has changed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#39;m sure you know what is next. The &lt;code&gt;new&lt;/code&gt; template is nearly identical to the &lt;code&gt;edit&lt;/code&gt; template. Let&amp;#39;s create &lt;code&gt;app/assets/javascripts/templates/users/form.hbs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;headerTitle&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;fullName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;for&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;firstNameField.elementId&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;First Name&lt;span class="tag"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextField&lt;/span&gt; &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;first_name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;viewName&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;firstNameField&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;for&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastNameField.elementId&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Last Name&lt;span class="tag"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextField&lt;/span&gt; &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastName&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;last_name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;viewName&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;lastNameField&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;for&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;quoteField.elementId&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Quote&lt;span class="tag"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextArea&lt;/span&gt; &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;quote&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;quote&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;viewName&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;quoteField&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;save&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;btn btn-success&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;buttonTitle&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;page-header&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;cancel&lt;/span&gt; &lt;span class="attribute-name"&gt;target&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;btn btn-inverse&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And in both the &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;edit&lt;/code&gt; template remove the markup and replace with&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt; &lt;span class="attribute-name"&gt;template&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;users&lt;/span&gt;&lt;span class="error"&gt;/&lt;/span&gt;&lt;span class="attribute-name"&gt;form&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we need to edit the two controllers. In &lt;code&gt;App.UsersNewController&lt;/code&gt; add to the two attributes:&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;headerTitle: 'Create'
buttonTitle: 'Create'
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And likewise in &lt;code&gt;App.UsersEditController&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;headerTitle: 'Edit'
buttonTitle: 'Update'
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Last part for this section is to add the &lt;code&gt;update&lt;/code&gt; action to &lt;code&gt;app/controllers/users_controller.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;update&lt;/span&gt;
  user = &lt;span class="constant"&gt;User&lt;/span&gt;.find(params[&lt;span class="symbol"&gt;:id&lt;/span&gt;])
  &lt;span class="keyword"&gt;if&lt;/span&gt; user.update_attributes(params[&lt;span class="symbol"&gt;:user&lt;/span&gt;])
    render &lt;span class="key"&gt;json&lt;/span&gt;: user
  &lt;span class="keyword"&gt;else&lt;/span&gt;
    render &lt;span class="key"&gt;json&lt;/span&gt;: user, &lt;span class="key"&gt;status&lt;/span&gt;: &lt;span class="integer"&gt;422&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now go through and everything should work! This allows us to treat the templates similar to a partial in Rails.&lt;/p&gt;

&lt;p&gt;Finally we&amp;#39;re going to add the ability to delete records. Because this is an action we are going to limit to the &lt;code&gt;edit&lt;/code&gt; page we will put the link below the &lt;code&gt;render&lt;/code&gt; call&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;destroy&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;btn btn-danger&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Destroy&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we add the action to the &lt;code&gt;App.UsersEditController&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;destroy: -&amp;gt;
  @content.deleteRecord()
  @store.commit()
  @transitionToRoute 'users.index'
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And we add the &lt;code&gt;destroy&lt;/code&gt; action to the backend&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;destroy&lt;/span&gt;
  user = &lt;span class="constant"&gt;User&lt;/span&gt;.find(params[&lt;span class="symbol"&gt;:id&lt;/span&gt;])
  &lt;span class="keyword"&gt;if&lt;/span&gt; user.destroy
    render &lt;span class="key"&gt;json&lt;/span&gt;: user, &lt;span class="key"&gt;status&lt;/span&gt;: &lt;span class="integer"&gt;204&lt;/span&gt;
  &lt;span class="keyword"&gt;else&lt;/span&gt;
    render &lt;span class="key"&gt;json&lt;/span&gt;: user
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;204&lt;/code&gt; status here is refers to &lt;code&gt;No Content&lt;/code&gt;. Ember-data expects this to ensure the destroy action is a success.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it! You&amp;#39;ve just created your very first Ember app with all of the CRUD actions. Congratulations!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building an Ember app with RailsAPI - Part 2</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ember/2013/01/09/building-an-ember-app-with-rails-api-part-2.html"/>
    <id>http://reefpoints.dockyard.com/ember/2013/01/09/building-an-ember-app-with-rails-api-part-2.html</id>
    <published>2013-01-09T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Building the Ember app</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;This article was last updated on May 28, 2013 and reflects the state
 of Ember (1.0.0-rc4) and the latest build of Ember Data (0.13) as of
that date.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bcardarella/ember-railsapi"&gt;Fork the project on Github!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ember-rails-api.herokuapp.com/"&gt;Use the app live on Heroku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href="/ember/2013/01/07/building-an-ember-app-with-rails-api-part-1.html"&gt;Part 1&lt;/a&gt; I showed you how to setup a &lt;code&gt;Rails-API&lt;/code&gt; app for Ember. Now let&amp;#39;s build the app itself.&lt;/p&gt;

&lt;p&gt;In this part I will go over building the Ember app from the perspective of a Rails developer. I will be making comparisons to where Ember resembles common patterns in Rails and even Ruby itself.&lt;/p&gt;

&lt;p&gt;I know I promised a 2-part series but I&amp;#39;m going to extend this to 3-parts. This post was growing too large to cover everything.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note: this post has been updated since it was originally written. If
you were following along you should start from the beginning of this
post as changes have been made to reflect the changes on Ember&amp;#39;s master
branch! *&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Part 2 - Building with Ember&lt;/h2&gt;

&lt;p&gt;We need to start with something I forgot to setup in Part 1. Ember looks for templates in the &lt;code&gt;Ember.TEMPLATES&lt;/code&gt; JavaScript object which is provided to us with the &lt;code&gt;handlebars_assets&lt;/code&gt; gem we setup in Part 1. We just need to tell the gem to compile for Ember. We can do this in &lt;code&gt;config/initializers/handlebars_assets.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="keyword"&gt;defined?&lt;/span&gt;(&lt;span class="constant"&gt;HandlebarsAssets&lt;/span&gt;)
  &lt;span class="constant"&gt;HandlebarsAssets&lt;/span&gt;::&lt;span class="constant"&gt;Config&lt;/span&gt;.ember = &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; If you have skipped ahead and come back to this initializer you will need to run:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rm -rf tmp/*
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Otherwise your Ember templates won&amp;#39;t compile properly.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s dive in by creating our application layout template in &lt;code&gt;app/assets/javascripts/templates/application.hbs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;navbar navbar-inverse navbar-fixed-top&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;navbar-inner&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;container&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;nav-collapse collapse&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;nav&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;index&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;Home&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;users&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;Users&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;container&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;id&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;main&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;content&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;row&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;span12&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;page-header&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;outlet&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://emberjs.com/guides/templates/handlebars-basics"&gt;Read more about Ember Templates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the Ember equivalent of a Rails layout template. The &lt;code&gt;outlet&lt;/code&gt; is the Ember equivalent to &lt;code&gt;yield&lt;/code&gt; in Rails. So this template will wrap the other templates we plan on rendering. I will come back to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;s in the nav later.&lt;/p&gt;

&lt;p&gt;Next we&amp;#39;re going to setup a default route and render a template. In &lt;code&gt;app/assets/javascripts/routes.coffee&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Router.reopen
  location: 'history'
  rootURL: '/'

App.Router.map -&amp;gt;
  @resource 'users'
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://emberjs.com/guides/routing"&gt;Read more about Ember Routes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will tell the Ember Router to use the History API instead of the
default &amp;#39;hash&amp;#39; URLs for routes. The mapping of the &lt;code&gt;/&lt;/code&gt; in our app is
implicit in Ember, and it will be assigned to a route of 
&lt;code&gt;index&lt;/code&gt;. The Ember Router will use this string to make some
assumptions. If there is a &lt;code&gt;App.IndexController&lt;/code&gt; object it will use that
controller. If not, it will just render out the &lt;code&gt;index&lt;/code&gt; template. Now,
under the hood Ember is still using a &lt;code&gt;App.IndexController&lt;/code&gt; controller
but it will define one on the fly. I will get into this in a future blog
post. When you call &lt;code&gt;reopen&lt;/code&gt; this is the Ember way to reopen and monkey
patch a class. As you can see the Ember Router syntax is similar to the
one in Rails. This is by design. We need the 2nd route there so our
&lt;code&gt;application.hbs&lt;/code&gt; template can compile as it is referencing the
&lt;code&gt;users.index&lt;/code&gt; route.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s write &lt;code&gt;app/assets/javascripts/templates/index.hbs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;lt;h1&amp;gt;Welcome!&amp;lt;/h1&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We need to do one last thing before we check out the homepage. By default, Rails includes a sample &lt;code&gt;index&lt;/code&gt; page in &lt;code&gt;public/index.html&lt;/code&gt;. If we were to go to the homepage now, we would see that.
But we want to see the index page we just made. To remove the Rails default page, simply run&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm public/index.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;from the command line.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it. If you run your rails server and load the app you should see the following
&lt;img src="http://i.imgur.com/1j50C.png?1" alt="Welcome"&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You&amp;#39;ve built your first Ember app! Let&amp;#39;s make it do
something useful. We are going to add the &lt;code&gt;/users&lt;/code&gt; page, so edit
&lt;code&gt;app/assets/javascripts/templates/users.hbs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Users&lt;span class="tag"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;span3&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;table table-striped&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;ID&lt;span class="tag"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Name&lt;span class="tag"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Reload your app and you can click back and forth between &amp;#39;Users&amp;#39; and &amp;#39;Home&amp;#39;, thanks to the &lt;code&gt;linkTo&lt;/code&gt; actions we setup in &lt;code&gt;application.hbs&lt;/code&gt;. These actions map to controllers being automatically generated because we haven&amp;#39;t created them yet; those controllers automatically render the templates with the same naming convention. Does that sound familiar? That&amp;#39;s right, its our good friend &lt;a href="http://en.wikipedia.org/wiki/Convention_over_configuration"&gt;Convention Over Configuration&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Now, when clicking between the two pages the nav is not properly updating the &lt;code&gt;active&lt;/code&gt; class on the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags. In Ember, you can &lt;a href="http://emberjs.com/guides/templates/binding-element-class-names"&gt;bind element class names to actions&lt;/a&gt;. This will require a bit of code, but as we add more controllers I&amp;#39;ll show how we can easily reuse what we&amp;#39;re about to write. Let&amp;#39;s start by adding the bindings to &lt;code&gt;application.hbs&lt;/code&gt; Modify the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags in the nav menu to:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;isHome:active&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;index&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;Home&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bindAttr&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;isUsers:active&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;users.index&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;Users&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This binding of &lt;code&gt;isHome:active&lt;/code&gt; tells Ember to make the class &lt;code&gt;active&lt;/code&gt; if the &lt;code&gt;isHome&lt;/code&gt; attribute on the controller is &lt;code&gt;true&lt;/code&gt;. If it is &lt;code&gt;false&lt;/code&gt; the value will be nothing. The same goes for &lt;code&gt;isUsers&lt;/code&gt;. Because this code lives in &lt;code&gt;application.hbs&lt;/code&gt; we need to add these attributes to &lt;code&gt;app/assets/javascripts/controllers/applicationController.coffee&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.ApplicationController = Ember.Controller.extend
  isHome: (-&amp;gt;
    @get('currentRoute') == 'home'
  ).property('currentRoute')

  isUsers: (-&amp;gt;
    @get('currentRoute') == 'users'
  ).property('currentRoute')
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://emberjs.com/guides/controllers"&gt;Read more about Ember Controllers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each attribute is a function that will compare the &lt;code&gt;currentRoute&lt;/code&gt; attribute to a value and return that boolean result. We instruct the attribute to be a &lt;a href="http://emberjs.com/guides/object-model/computed-properties"&gt;computed property&lt;/a&gt;. Computed properties are simple to understand: we tell Ember to automatically update the value of &amp;#39;isHome&amp;#39; when &lt;code&gt;currentRoute&lt;/code&gt; is &lt;code&gt;set&lt;/code&gt; to a different value. Ember will then instruct anything bound to that attribute to update as well.&lt;/p&gt;

&lt;p&gt;Finally, we&amp;#39;re going to update our routes to set &lt;code&gt;currentRoute&lt;/code&gt; depending upon the route. Let&amp;#39;s add two route classes to &lt;code&gt;app/assets/javascripts/routes.coffee&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.IndexRoute = Ember.Route.extend
  setupController: (controller, model) -&amp;gt;
    @controllerFor('application').set('currentRoute', 'home')

App.UsersRoute = Ember.Route.extend
  setupController: (controller, model) -&amp;gt;
    @controllerFor('application').set('currentRoute', 'users')
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Two new concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setupController&lt;/code&gt; is a function automatically called on each visit to the route. It will pass in an instance of the controller and a model if you supply one (we&amp;#39;ll see this in a bit)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.controllerFor&lt;/code&gt; When interacting with a specific controller you may want to modify a different controller. In this case the wrapping controller is &lt;code&gt;ApplicationController&lt;/code&gt; and we need to update the &lt;code&gt;currentRoute&lt;/code&gt; attribute. You &lt;em&gt;must&lt;/em&gt; use the &lt;code&gt;set&lt;/code&gt; function otherwise Ember won&amp;#39;t know to notify any &lt;a href="http://emberjs.com/guides/object-model/computed-properties/"&gt;computed property observers&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now reload your app and click between the actions and you should see the active states properly set depending upon your route.&lt;/p&gt;

&lt;p&gt;Next, we&amp;#39;re going to start using real data. We&amp;#39;re going to fetch the collection of Users from the server and display them on the index page. Let&amp;#39;s start with telling Ember what our data store looks like in &lt;code&gt;app/assets/javascripts/store.coffee&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Store = DS.Store.extend()
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://emberjs.com/guides/models/the-rest-adapter"&gt;Read more about Ember&amp;#39;s REST Adapter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The REST adapter allows us to pull from an API backend assuming certain conventions are followed in the URIs and JSON response. Thankfully we set this up properly in &lt;a href="http://reefpoints.dockyard.com/ember/2013/01/07/building-an-ember-app-with-rails-api-part-1.html"&gt;Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we&amp;#39;ll create a new model in &lt;code&gt;app/assets/javascripts/models/user.coffee&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.User = DS.Model.extend(
  firstName: DS.attr('string')
  lastName:  DS.attr('string')
  quote:     DS.attr('string')
  fullName: (-&amp;gt;
    &amp;quot;#{@get('firstName')} #{@get('lastName')}&amp;quot;
  ).property('firstName', 'lastName')
)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://emberjs.com/guides/models"&gt;Read more about Ember models&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are defining each attribute that is coming over the wire, as well as a computed property that will combine &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;. If you&amp;#39;re wondering about that call to &lt;code&gt;property&lt;/code&gt;, you have to let Ember know when a method on an object is using a property computed from dependency properties on that object. Here &lt;code&gt;fullName&lt;/code&gt; depends on &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;. When we call &lt;code&gt;property&lt;/code&gt; and let Ember know which properties to observe, the &lt;code&gt;fullName&lt;/code&gt; property will update if either the &lt;code&gt;firstName&lt;/code&gt; or &lt;code&gt;lastName&lt;/code&gt; changes. If you like, you can &lt;a href="http://emberjs.com/guides/object-model/computed-properties/"&gt;read more about computed properties&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now we need to modify the &lt;code&gt;users&lt;/code&gt; route to fetch the data&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.UsersRoute = Ember.Route.extend
  model: -&amp;gt;
    App.User.find()
  setupController: (controller, model) -&amp;gt;
    @controllerFor('application').set('currentRoute', 'users')
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;App.User.find()&lt;/code&gt; makes a remote call, fetches the collection, and instantiates the models. This collection is then passed to &lt;code&gt;setupController&lt;/code&gt; through the &lt;code&gt;model&lt;/code&gt; attribute. We then assign this collection to the &lt;code&gt;users&lt;/code&gt; attribute on the controller. &lt;/p&gt;

&lt;p&gt;Now edit &lt;code&gt;app/assets/javascripts/templates/users.hbs&lt;/code&gt; to include a list of our users and an outlet through which we&amp;#39;ll render a users index page and our users show page.&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;span3&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;table table-striped&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;ID&lt;span class="tag"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Name&lt;span class="tag"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;controller&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;id&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt; &lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="attribute-name"&gt;users.show&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt; &lt;span class="attribute-name"&gt;this&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;fullName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;span8&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;outlet&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We are linking to the &lt;code&gt;show&lt;/code&gt; named route and passing the instance of a &lt;code&gt;User&lt;/code&gt; (which is what &lt;code&gt;this&lt;/code&gt; refers to) as the paramater. Ember will pull out the id on the object and set that to the &lt;code&gt;:user_id&lt;/code&gt; segment on the path.&lt;/p&gt;

&lt;p&gt;We need to next update &amp;#39;App.Router&amp;#39; for the proper mapping&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Router.map -&amp;gt;
  @resource 'users', -&amp;gt;
    @route 'show',
      path: '/:user_id'
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note how we are matching against &lt;code&gt;:user_id&lt;/code&gt; and not &lt;code&gt;:id&lt;/code&gt; that Rails developers are used to.&lt;/p&gt;

&lt;p&gt;I must confess I don&amp;#39;t entirely understand why the &lt;code&gt;/&lt;/code&gt; map is necessary under &lt;code&gt;/users&lt;/code&gt;, I would have thought the top nesting could be used and it wouldn&amp;#39;t be necessary to redefine a root path. Please enlighten me in the comments! Ok, the router maps are updated. Let&amp;#39;s add the &lt;code&gt;show&lt;/code&gt; route.&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.UsersShowRoute = Ember.Route.extend
  model: (params) -&amp;gt;
    App.User.find(params.user_id)
  setupController: (controller, model) -&amp;gt;
    controller.set('content', model)
    @controllerFor('application').set('currentRoute', 'users')
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And we&amp;#39;ll add the &lt;code&gt;app/assets/javascripts/templates/users/show.hbs&lt;/code&gt; template&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;fullName&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;q&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;quote&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/q&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;page-header&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;users&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;btn&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;Back&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;linkTo&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And finally, we&amp;#39;ll add the &amp;#39;app/assets/javascripts/users/index.hbs&amp;#39; template&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Please choose a user.&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Reload your app and click through to the show page and you should see&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/jNKhnrJ.png" alt="Show"&gt;&lt;/p&gt;

&lt;p&gt;So we have only implemented the &amp;#39;Read&amp;#39; of &amp;#39;CRUD&amp;#39; in this part, but we have also introduced alot of new concepts. In &lt;a href="http://reefpoints.dockyard.com/ember/2013/01/10/building-an-ember-app-with-rails-api-part-3.html"&gt;Part 3&lt;/a&gt; we will implement the &amp;#39;Create Update Destroy&amp;#39; actions.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building an Ember app with RailsAPI - Part 1</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ember/2013/01/07/building-an-ember-app-with-rails-api-part-1.html"/>
    <id>http://reefpoints.dockyard.com/ember/2013/01/07/building-an-ember-app-with-rails-api-part-1.html</id>
    <published>2013-01-07T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Setting up RailsAPI for writing an Ember App</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;This article was last updated on May 28, 2013 and reflects the state
 of Ember (1.0.0-rc4) and the latest build of Ember Data (0.13) as of
that date.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bcardarella/ember-railsapi"&gt;Fork the project on Github!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ember-rails-api.herokuapp.com/"&gt;Use the app live on Heroku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lately I&amp;#39;ve been playing with &lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt; and I have
really grown to love it. I get the same &amp;quot;AHA!&amp;quot; feeling I got building my
first &lt;a href="http://rubyonrails.org"&gt;Rails&lt;/a&gt; app 7 years ago. Let&amp;#39;s see how to
build a simple
&lt;a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt; app
using the &lt;a href="https://github.com/rails-api/rails-api"&gt;RailsAPI&lt;/a&gt; as the
backend. We&amp;#39;re going to build a new app and deploy to Heroku.&lt;/p&gt;

&lt;h2&gt;Part 1 - Getting Set Up&lt;/h2&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;gem install rails-api
rails-api new ember-app
cd ember-app
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Similar to the &lt;code&gt;rails&lt;/code&gt; command &lt;code&gt;RailsAPI&lt;/code&gt; comes with a &lt;code&gt;rails-api&lt;/code&gt;
command which under the hood is just using the normal &lt;code&gt;rails&lt;/code&gt; CLI code
but overriding some of the templates generated. Out of the box
&lt;code&gt;RailsAPI&lt;/code&gt; won&amp;#39;t generate the &lt;a href="http://guides.rubyonrails.org/asset_pipeline.html"&gt;asset pipeline&lt;/a&gt; directories
as there is &lt;a href="https://github.com/rails-api/rails-api/issues/50"&gt;still some
debate&lt;/a&gt; if it will use
&lt;a href="https://github.com/sstephenson/sprockets"&gt;Sprockets&lt;/a&gt;,
&lt;a href="https://github.com/livingsocial/rake-pipeline"&gt;Rake-Pipeline&lt;/a&gt; or some
other solution. In this example we&amp;#39;re going to use Sprockets as it will
save us a lot of time. &lt;code&gt;RailsAPI&lt;/code&gt; is bundled with
&lt;a href="https://github.com/rails/rails/blob/3-2-stable/actionpack/actionpack.gemspec"&gt;ActionPack&lt;/a&gt;
which has &lt;code&gt;Sprockets&lt;/code&gt; as a dependency. All we need to do is add in the
directories&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;mkdir -p app/assets/{javascripts,stylesheets,images}
mkdir -p vendor/assets/{javascripts,stylesheets,images}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we need to copy in the vendored asset files. You can either build yourself our run the following to copy directly from my Github project&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;cd vendor/assets/javascripts
wget https://raw.github.com/bcardarella/ember-railsapi/master/vendor/assets/javascripts/ember-data.js
wget https://raw.github.com/bcardarella/ember-railsapi/master/vendor/assets/javascripts/ember.js
wget https://raw.github.com/bcardarella/ember-railsapi/master/vendor/assets/javascripts/jquery.js
wget https://raw.github.com/bcardarella/ember-railsapi/master/vendor/assets/javascripts/modernizr.js
cd ../../..
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that if you&amp;#39;re a Mac user, just replace &lt;code&gt;wget&lt;/code&gt; (the Linux command) with &lt;code&gt;curl -O&lt;/code&gt; (the Unix command) on the above lines.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s setup the directory structure for our Ember app&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;mkdir -p app/assets/javascripts/{controllers,models,views,templates}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And now we&amp;#39;ll setup the load order in our &lt;code&gt;app/assets/javascripts/application.coffee&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight coffeescript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;#= require modernizr
#= require jquery
#= require handlebars
#= require ember
#= require ember-data
#= require bootstrap
#= require_self
#= require store
#= require routes
#= require_tree ./controllers
#= require_tree ./models
#= require_tree ./templates
#= require_tree ./views

window.App = Ember.Application.create()
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Add the &lt;code&gt;routes.coffee&lt;/code&gt; and &lt;code&gt;store.coffee&lt;/code&gt; files:&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;touch app/assets/javascripts/routes.coffee
touch app/assets/javascripts/store.coffee
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And the &lt;code&gt;app/assets/stylesheets/application.sass&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight sass "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="directive"&gt;@import&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bootstrap&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="tag"&gt;body&lt;/span&gt;
  &lt;span class="key"&gt;padding-top&lt;/span&gt;: &lt;span class="float"&gt;60px&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That was a good amount of setup. Now we have the application structure for an Ember app in our asset pipeline. This will make things cleaner once we start coding.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s setup the necessary gem dependencies in our &lt;code&gt;Gemfile&lt;/code&gt;. Just replace the entire contents with the following:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;source &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;https://rubygems.org&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

ruby &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;2.0.0&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;rails&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;3.2.13&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;rails-api&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;thin&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;active_model_serializers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:github&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;rails-api/active_model_serializers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

group &lt;span class="symbol"&gt;:development&lt;/span&gt;, &lt;span class="symbol"&gt;:test&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;debugger&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;sqlite3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

group &lt;span class="symbol"&gt;:production&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;pg&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

group &lt;span class="symbol"&gt;:assets&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;sass-rails&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;~&amp;gt; 3.2&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;coffee-rails&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;~&amp;gt; 3.2&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;compass-rails&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;uglifier&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bootstrap-sass&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;~&amp;gt; 2.0.3.0&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;handlebars_assets&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;0.12.3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

group &lt;span class="symbol"&gt;:development&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;quiet_assets&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There are two gems to take note of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rails-api/active_model_serializers"&gt;ActiveModelSerializers&lt;/a&gt; is a project that is written by the &lt;code&gt;Ember&lt;/code&gt; core team which will normalize the &lt;a href="http://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; output for models in a &lt;code&gt;Rails&lt;/code&gt; app.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leshill/handlebars_assets"&gt;HandlebarsAssets&lt;/a&gt; will allow the &lt;code&gt;AssetPipeline&lt;/code&gt; to compile &lt;a href="http://handlebarsjs.com/"&gt;Handlebars&lt;/a&gt; templates which is required for Ember. There is the &lt;a href="https://github.com/emberjs/ember-rails"&gt;Ember-Rails&lt;/a&gt; gem which will also do this but I have found &lt;code&gt;HandlebarsAssets&lt;/code&gt; to be a leaner solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After this, don&amp;#39;t forget to run &lt;code&gt;bundle install&lt;/code&gt; from the command line to pick up the gems we just added.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s create a simple model and the serializer&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rails-api g model User first_name:string last_name:string quote:text
rails-api g serializer User
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Run &amp;#39;rake db:migrate&amp;#39; to run the migration for our User model. Now open up &lt;code&gt;app/serializers/user_serializer.rb&lt;/code&gt; and add the fields that require serialization&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;UserSerializer&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveModel&lt;/span&gt;::&lt;span class="constant"&gt;Serializer&lt;/span&gt;
  attributes &lt;span class="symbol"&gt;:id&lt;/span&gt;, &lt;span class="symbol"&gt;:first_name&lt;/span&gt;, &lt;span class="symbol"&gt;:last_name&lt;/span&gt;, &lt;span class="symbol"&gt;:quote&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Again, this will instruct &lt;code&gt;Rails&lt;/code&gt; to turn our &lt;code&gt;ActiveRecord&lt;/code&gt; object into a &lt;code&gt;JSON&lt;/code&gt; object properly normalized for &lt;code&gt;Ember&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let&amp;#39;s write the Controller. Create and edit &lt;code&gt;app/controllers/users_controller.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;UsersController&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;index&lt;/span&gt;
    render &lt;span class="key"&gt;json&lt;/span&gt;: &lt;span class="constant"&gt;User&lt;/span&gt;.all
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Take note that we are inheriting &lt;code&gt;ApplicationController&lt;/code&gt; but in a &lt;code&gt;RailsAPI&lt;/code&gt; app &lt;code&gt;ApplicationController&lt;/code&gt; itself inherits from &lt;code&gt;ActionController::API&lt;/code&gt; instead of &lt;code&gt;ActionController::Base&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This basic controller will serve up all of our users to our Ember app. We&amp;#39;ll add more later.&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s add some routes to &lt;code&gt;config/routes.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;EmberApp&lt;/span&gt;::&lt;span class="constant"&gt;Application&lt;/span&gt;.routes.draw &lt;span class="keyword"&gt;do&lt;/span&gt;
  &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;FormatTest&lt;/span&gt;
    attr_accessor &lt;span class="symbol"&gt;:mime_type&lt;/span&gt;

    &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(format)
      &lt;span class="instance-variable"&gt;@mime_type&lt;/span&gt; = &lt;span class="constant"&gt;Mime&lt;/span&gt;::&lt;span class="constant"&gt;Type&lt;/span&gt;.lookup_by_extension(format)
    &lt;span class="keyword"&gt;end&lt;/span&gt;

    &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;matches?&lt;/span&gt;(request)
      request.format == mime_type
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  resources &lt;span class="symbol"&gt;:users&lt;/span&gt;, &lt;span class="symbol"&gt;:except&lt;/span&gt; =&amp;gt; &lt;span class="symbol"&gt;:edit&lt;/span&gt;, &lt;span class="symbol"&gt;:constraints&lt;/span&gt; =&amp;gt; &lt;span class="constant"&gt;FormatTest&lt;/span&gt;.new(&lt;span class="symbol"&gt;:json&lt;/span&gt;)
  get &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;*foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:to&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember#index&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:constraints&lt;/span&gt; =&amp;gt; &lt;span class="constant"&gt;FormatTest&lt;/span&gt;.new(&lt;span class="symbol"&gt;:html&lt;/span&gt;)
  get &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:to&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember#index&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:constraints&lt;/span&gt; =&amp;gt; &lt;span class="constant"&gt;FormatTest&lt;/span&gt;.new(&lt;span class="symbol"&gt;:html&lt;/span&gt;)
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A few things are happening here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are constraining against the format with a custom &lt;code&gt;FormatTest&lt;/code&gt; class. We only want to map certain routes to &lt;code&gt;JSON&lt;/code&gt; requests and certain routes to &lt;code&gt;HTML&lt;/code&gt; requesets.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;get &amp;#39;*foo&amp;#39;...&lt;/code&gt; will greedily match all routes except &lt;code&gt;/&lt;/code&gt; so we have the following line. We want to direct all &lt;code&gt;HTML&lt;/code&gt; requests to a single &lt;code&gt;controller#action&lt;/code&gt;. I will go into the reason why in a bit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let&amp;#39;s create that &lt;code&gt;Ember&lt;/code&gt; controller. This will act as the primary application serving controller that is hit when people visit the app. Create and edit &lt;code&gt;app/controllers/ember_controller.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;EmberController&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActionController&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;; &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that we are inheriting from &lt;code&gt;ActionController::Base&lt;/code&gt; this time and not &lt;code&gt;ApplicationController&lt;/code&gt;. This is so that the controller actions can respond to non &lt;code&gt;JSON&lt;/code&gt; requests.&lt;/p&gt;

&lt;p&gt;Now we will add the view in &lt;code&gt;app/views/ember/index.html.erb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight erb "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="doctype"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="attribute-name"&gt;lang&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;en&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;&amp;lt;%=&lt;/span&gt; stylesheet_link_tag &lt;span class="symbol"&gt;:application&lt;/span&gt;, &lt;span class="symbol"&gt;:media&lt;/span&gt; =&amp;gt; &lt;span class="symbol"&gt;:all&lt;/span&gt; &lt;span class="inline-delimiter"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;&amp;lt;%=&lt;/span&gt; javascript_include_tag &lt;span class="symbol"&gt;:application&lt;/span&gt; &lt;span class="inline-delimiter"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class="tag"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That is all the view that your Ember app will need. Ember will automatically attach its own default template to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s add some data to &lt;code&gt;db/seeds.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;User&lt;/span&gt;.create(&lt;span class="symbol"&gt;:first_name&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;William&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:last_name&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Harrison&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:quote&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;I'm just singin' in the rain!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class="constant"&gt;User&lt;/span&gt;.create(&lt;span class="symbol"&gt;:first_name&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Abraham&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:last_name&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Lincoln&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:quote&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;I'd like to see a show tonight.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now run your migrations and seed&lt;/p&gt;
&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rake db:migrate db:seed
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ok, now our app is in a good spot to start developing an Ember app with. Let&amp;#39;s review what we did&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Generated a new app using &lt;code&gt;rails-api&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set up the javascript and stylesheet assets&lt;/li&gt;
&lt;li&gt;Wrote a very simple JSON API for returning all users&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In &lt;a href="http://reefpoints.dockyard.com/ember/2013/01/09/building-an-ember-app-with-rails-api-part-2.html"&gt;Part 2&lt;/a&gt; we&amp;#39;ll build the Ember app itself.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>DismissibleHelpers released</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2013/01/04/dismissible_helpers-released.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2013/01/04/dismissible_helpers-released.html</id>
    <published>2013-01-04T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>Add simple to implement help text that users can dismiss</summary>
    <content type="html">&lt;p&gt;Have an application where you want to add some help text for the user,
but they really only need to see it once? With the
&lt;a href="https://github.com/dockyard/dismissible_helpers"&gt;&lt;code&gt;dismissible_helpers&lt;/code&gt;&lt;/a&gt;
gem, you can quickly add dismissible help text to your application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dockyard/dismissible_helpers"&gt;View the project on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dismissible-helpers-example.herokuapp.com/"&gt;View the demo here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dockyard/dismissible_helpers_example"&gt;View the demo source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;What you get&lt;/h2&gt;

&lt;p&gt;DismissibleHelpers includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DismissibleHelpers View Helper - Renders the help text only if the visitor
has not dismissed it&lt;/li&gt;
&lt;li&gt;DismissedHelpers Routes and controller - Handles the JavaScript requests
to store the dismissal state&lt;/li&gt;
&lt;li&gt;DismissedHelpers Javascript - Handles the front end interactions with
the help text&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, &lt;code&gt;dismissible_helpers&lt;/code&gt; will use a cookie to store the
dismissal status of the help text.&lt;/p&gt;

&lt;h2&gt;Three minute setup&lt;/h2&gt;

&lt;p&gt;To start using &lt;code&gt;dismissible_helpers&lt;/code&gt; without any customization, you only
three steps away.&lt;/p&gt;

&lt;ol&gt;

  &lt;li&gt;&lt;p&gt; Add &lt;code&gt;dismissible_helpers_routes&lt;/code&gt; to your &lt;code&gt;config/routes.rb&lt;/code&gt;

```ruby
YourApplication::Application.routes.draw do
  dismissible_helpers_routes

  # Your other routes
end```
  &lt;/p&gt;&lt;/li&gt;

  &lt;li&gt;&lt;p&gt; Add the Javascript: Add the following to your &lt;code&gt;app/assets/javascripts/application.js&lt;/code&gt;.

```javascript
// Your other require statments
//=require dismissible_helpers
//=require_self

$(function(){
  $('.dismissible').dismissible()
})```
  &lt;/p&gt;&lt;/li&gt;

  &lt;li&gt;&lt;p&gt; Call the &lt;code&gt;render_dismissible_helper&lt;/code&gt; method with the string you want to
       render. The string passed to the method will be processed by the I18n method
       &lt;code&gt;t&lt;/code&gt;, so the content of the help message should be stored in your localization
       file.

```erb
&lt;%= render_dismissible_helper 'help.some_help_message' %&gt;
```
  &lt;/p&gt;&lt;/li&gt;

&lt;/ol&gt;

&lt;h2&gt;Advanced setup&lt;/h2&gt;

&lt;h3&gt;Changing the way the help text is removed&lt;/h3&gt;

&lt;p&gt;By default, the dismissed helper is removed from the page via
&lt;code&gt;$(helper).remove()&lt;/code&gt;. This can be customized by passing a callback to the
&lt;code&gt;.dismissible()&lt;/code&gt; call. To use jQuery&amp;#39;s &lt;code&gt;.slideUp()&lt;/code&gt; you would use the
following call:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="keyword"&gt;function&lt;/span&gt;(){
  &lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;.dismissible&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).dismissible({
    &lt;span class="function"&gt;success&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(helper){
      helper.slideUp(); &lt;span class="comment"&gt;//'helper' is the jQuery-wrapped element&lt;/span&gt;
    }
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Storing dismissed helpers for authenticated users&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;dismissible_helpers&lt;/code&gt; can store the help text dismissal state on a
user/account. That way, when a user dismisses some help text, it follows
them across browsers.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dismissible_helpers&lt;/code&gt; will attempt to retrieve the authenticated user by
checking for a &lt;code&gt;current_user&lt;/code&gt; helper method. If the
ApplicationController responds to &lt;code&gt;current_user&lt;/code&gt;, &lt;code&gt;dismissible_helpers&lt;/code&gt;
will check to see if the returned object has a &lt;code&gt;dismissed_helpers&lt;/code&gt;
attribute. It will then add the dismissed help text to that model.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dismissible_helpers&lt;/code&gt; expects that the &lt;code&gt;dismissed_helpers&lt;/code&gt; attribute is
an array. With vanilla ActiveRecord, you can achieve this with attribute
serialization:&lt;/p&gt;

&lt;p&gt;First, add the column to your model (we&amp;#39;ll assume it&amp;#39;s an Account class
in this example)&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;AddDismissedHelpersToAccounts&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Migration&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;up&lt;/span&gt;
    add_column &lt;span class="symbol"&gt;:accounts&lt;/span&gt;, &lt;span class="symbol"&gt;:dismissed_helpers&lt;/span&gt;, &lt;span class="symbol"&gt;:text&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;down&lt;/span&gt;
    remove_column &lt;span class="symbol"&gt;:accounts&lt;/span&gt;, &lt;span class="symbol"&gt;:dismissed_helpers&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then add the &lt;code&gt;serialize&lt;/code&gt; call to your model&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Account&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  serialize &lt;span class="symbol"&gt;:dismissed_helpers&lt;/span&gt;, &lt;span class="constant"&gt;Array&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you are using PostgreSQL as your database, you could use
&lt;a href="https://github.com/dockyard/postgres_ext"&gt;postgres_ext&lt;/a&gt; to
add native array support to your models. You would just need the
following migration to add the dismissed_helpers attribute
to your model:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;AddDismissedHelpersToAccounts&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Migration&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;up&lt;/span&gt;
    add_column &lt;span class="symbol"&gt;:accounts&lt;/span&gt;, &lt;span class="symbol"&gt;:dismissed_helpers&lt;/span&gt;, &lt;span class="symbol"&gt;:string&lt;/span&gt;, &lt;span class="symbol"&gt;:array&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;down&lt;/span&gt;
    remove_column &lt;span class="symbol"&gt;:accounts&lt;/span&gt;, &lt;span class="symbol"&gt;:dismissed_helpers&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;Hopefully you find the gem useful. If you find any issues with it, 
&lt;a href="https://github.com/dockyard/dismissible_helpers/issues"&gt;let us know&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Integration is Hard</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/politics/2013/01/03/integration-is-hard.html"/>
    <id>http://reefpoints.dockyard.com/politics/2013/01/03/integration-is-hard.html</id>
    <published>2013-01-03T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Chris Gill</name>
    </author>
    <summary>A description of techniques used to integrate with various vendors on a recent DockYard project for the AFL-CIO's Super PAC Worker's Voice.</summary>
    <content type="html">&lt;p&gt;There&amp;#39;s no one-size-fits-all approach to integrating with external
systems because each system comes with its own unique requirements and
constraints.  This article aims to describe some of the varying
approaches we used to integrate with external systems in a recent
project we built for the &lt;a href="http://www.aflcio.org"&gt;AFL-CIO&lt;/a&gt;&amp;#39;s Super PAC
&lt;a href="http://www.workersvoice.org"&gt;Worker&amp;#39;s Voice&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For this project, integration with external vendors was the biggest technical hurdle to clear in order to ensure a successful launch.  The project, called &lt;a href="http://repurpose.workersvoice.org/"&gt;RePurpose&lt;/a&gt;, gives volunteers and activists a way to choose how the movement&amp;#39;s resources get deployed.  The more volunteering and activism a person does, the more RePurpose points they earn, which they can then use to direct the funding of things like more canvassers, direct mail pieces or online ads.  &lt;/p&gt;

&lt;p&gt;It&amp;#39;s a way to give the people on the ground a say in how the money gets spent.&lt;/p&gt;

&lt;p&gt;The volunteering and activism data for which RePurpose points get awarded exists in several separate systems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.ngpvan.com"&gt;VAN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VAN is the de facto standard tool used everywhere in progressive politics - from small local races all the way up to the Obama campaign.  It&amp;#39;s an organizing tool that stores volunteer records, canvass records (door knocks and phone calls), activist codes, and other organizing data used by progressive campaigns and organizations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.salsalabs.com"&gt;Salsa Labs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Salsa has a platform with a rich API and tools to create fundraising and advocacy campaigns and manage organizer data.  It stores supporter records, online donation records, and pledges to take action - among other things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://amicushq.com/"&gt;Amicus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amicus is a new online tool that leverages Facebook connections of volunteers to enhance fundraising and advocacy campaigns.  It stores a set of volunteer records, friend invite records, and social calling records.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal was straightforward - RePurpose needed to know when a volunteer
was performing tasks in external systems, so that the user could receive
points in RePurpose for those tasks.  RePurpose itself has a Task model
that supports multiple kinds of tasks in the various external systems -
survey tasks, activist code tasks, and
&lt;a href="http://en.wikipedia.org/wiki/Canvassing"&gt;canvass&lt;/a&gt; tasks in VAN, donation tasks and action tasks in Salsa, and friend invite tasks and call tasks in Amicus.  So a RePurpose administrator could set up a task that would award 10 RePurpose points each time a volunteer knocked on a door, made a phone call, or made a donation.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how we did it in each system:&lt;/p&gt;

&lt;h2&gt;VAN Sync&lt;/h2&gt;

&lt;p&gt;VAN, which was recently voted &lt;a href="http://rootscamp.neworganizing.com/awards/2012/"&gt;Most Valuable
Tech&lt;/a&gt; at &lt;a href="http://rootscamp.neworganizing.com/"&gt;RootsCamp
2012&lt;/a&gt;, has a
&lt;a href="http://en.wikipedia.org/wiki/SOAP"&gt;SOAP&lt;/a&gt;-based API that allows us to list survey questions, list activist codes, and create and list volunteers (among other things) - all of which we use to get that data into RePurpose, but the API doesn&amp;#39;t support retrieving the raw canvasser data - which is the piece we really need to award credit.  To get this data the two options were a nightly sync of flat files, or getting direct access to a replicated database.  We opted for the flat file sync as we knew it had worked for other organizations (among them the Democratic National Committee) and the replicated database approach would have incurred extra time, expense, and risk.&lt;/p&gt;

&lt;p&gt;We worked with the great folks at VAN to get a nightly data sync into
place.  Each night around 3am, VAN uploads a zipped TSV (tab-separated
values) export of the relevant data from all the relevant tables in the
AFL-CIO&amp;#39;s VAN database.  This is not a delta - because the data size is
relatively low (&amp;lt; 1 GB), we receive the full data dump each night.  We
then unzip, verify that all the files we expect are present, convert
character encodings from
&lt;a href="http://en.wikipedia.org/wiki/Windows-1252"&gt;CP1252&lt;/a&gt; to
&lt;a href="http://en.wikipedia.org/wiki/UTF-8"&gt;UTF8&lt;/a&gt; (VAN uses &lt;a href="http://en.wikipedia.org/wiki/Microsoft_SQL_Server"&gt;MSSQL
Server&lt;/a&gt;), and load
this data into auxiliary tables in the RePurpose database using
&lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt;&amp;#39;s
&amp;quot;&lt;a href="http://www.postgresql.org/docs/9.2/static/sql-copy.html"&gt;COPY&lt;/a&gt;&amp;quot; command.  All told it takes about 5 minutes each night to process, load, and index around 700MB of data from flat files to get it into PostgreSQL and ready to be used.  Then based on the new data we award credit to volunteers for completing tasks.  This approach handles the most data of any of the external integrations and does so reliably.  It has one drawback which is that the data can be at most 24 hours stale by the time we receive it, which is not ideal but is certainly workable.  In practice this has not been a problem for us.&lt;/p&gt;

&lt;h2&gt;Salsa API&lt;/h2&gt;

&lt;p&gt;Salsa has a
&lt;a href="http://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt;-based
&lt;a href="http://en.wikipedia.org/wiki/Application_programming_interface"&gt;API&lt;/a&gt; for authenticating and for creating and retrieving objects in the Salsa system.  For RePurpose, that meant creating and listing supporters (Salsa&amp;#39;s name for a volunteer record), listing donation pages, listing donations, and listing completed actions like making a pledge or writing a letter to an editor.  In the context of RePurpose we were most interested in listing completed donations and completed actions so we could award the person who completed the task with their RePurpose points.  Since we could get all this information via the API, and since the API can list objects created since a certain timestamp, we set up a scheduled job to poll the API and ask for anything new that has come in since the last record we retrieved.  This job runs every 10 minutes and gets us pretty close to realtime - if you make a donation through one of the Salsa donation pages that&amp;#39;s connected to a RePurpose task, your points will be credited to you within 5 minutes on average.&lt;/p&gt;

&lt;h2&gt;Amicus Exports&lt;/h2&gt;

&lt;p&gt;The Amicus API was still a work in progress during the RePurpose project, so we could not use it - but they did have an on-demand user export that could be programmatically triggered.  Since the user export contained all the information we needed about how many calls a user had attempted and how many friends they had invited on Facebook, this would get us where we needed to be.  We would import the Amicus users nightly on a schedule and load them into auxiliary tables in the RePurpose database, which were then used to award credit to the folks making calls and inviting friends.  Since we could trigger the export on demand, we also added a button to the RePurpose admin area to allow administrators to reload the Amicus data on demand and credit any new arrivals.&lt;/p&gt;

&lt;h2&gt;Matching&lt;/h2&gt;

&lt;p&gt;You&amp;#39;ve heard how we get the data into the RePurpose system, but how do we match the volunteers from the various external systems up with the users in RePurpose?  &lt;/p&gt;

&lt;p&gt;There are all kinds of pitfalls in implementing person matching, like trying to match up on variations of a first name, or variations of a street address, or keeping track of previous known-good addresses.  Complexity can quickly spiral out of control for marginal benefit.  For this project we went with a simple assumption - all matching would occur via email address.  So if a user was doing things in the field, which gets recorded into VAN - they should use the same email address that they would use to create their RePurpose account.  Likewise for Salsa and Amicus.  Since each of these external systems stores an email address for the volunteer, with this simple assumption, the matching logic becomes simple - comparing lowercase versions of email addresses.&lt;/p&gt;

&lt;h2&gt;Awarding Credit&lt;/h2&gt;

&lt;p&gt;There were some wrinkles with awarding credit for tasks performed in external systems.  Since each task hinged on an external datapoint, it was critical to uniquely identify these datapoints.  For most tasks, the granularity of data allowed us to use the primary key of the foreign data source as the unique identifier.  In some cases the data would just be an aggregate count, like &amp;quot;15 calls made&amp;quot; - in which case we would generate our own idempotent IDs for those calls so as to award credit once and have a way to prevent awarding credit for the same call a second time.  In addition to keeping things crediting properly, this had the added benefit of allowing any RePurpose points in the system can be traced back to the explicit data point in the external system that was responsible for creating them.&lt;/p&gt;

&lt;h2&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Now that you&amp;#39;ve seen how we took three different approaches to integrate
with three different systems, you&amp;#39;re probably thinking that integration
can be tricky.  But if you&amp;#39;re in a progressive organization that uses
VAN, Salsa, or Amicus - remember that &lt;a href="http://dockyard.com/contact"&gt;here at DockYard we have the
expertise and experience to make it look
easy&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>OpenHack Boston 1.0</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/community/2012/10/26/openhack-boston.html"/>
    <id>http://reefpoints.dockyard.com/community/2012/10/26/openhack-boston.html</id>
    <published>2012-10-26T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Come one, come all!</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/openhack.png" alt="OpenHack"&gt;
Last night we hosted Boston&amp;#39;s first
&lt;a href="http://openhack.github.com/"&gt;OpenHack&lt;/a&gt;
event.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/qrush"&gt;Nick Quaranto&lt;/a&gt; started OpenHack at his &lt;a href="http://coworkbuffalo.com/"&gt;CoWorkBuffalo&lt;/a&gt; office space,
based upon &lt;a href="http://bostonrb.org"&gt;BostonRB&lt;/a&gt;&amp;#39;s former (don&amp;#39;t get me
started) Hackfests. The idea is pretty simple: a quiet space with food,
drinks, and wifi is provided. Developers show up and hack on some
software for a few hours.&lt;/p&gt;

&lt;p&gt;On 2-day notice we had 11 in attendance and all around everyone had a
very productive night. Currently our office maxes out at 20 chairs so until we buy more
we cannot accept over 20, but next month we will open the
event to a wider audience. We want to welcome more than just Ruby devs
(with the exception of 2 all were Ruby devs) to the event.&lt;/p&gt;

&lt;p&gt;Follow &lt;a href="http://twitter.com/dockyard"&gt;@DockYard&lt;/a&gt; for all Boston OpenHack
announcements.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Expanding the Yard</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/design/2012/10/11/expanding-the-yard.html"/>
    <id>http://reefpoints.dockyard.com/design/2012/10/11/expanding-the-yard.html</id>
    <published>2012-10-11T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Angelo Simeoni</name>
    </author>
    <summary>The story of how we reimagined our site.</summary>
    <content type="html">&lt;div class="one"&gt;
  &lt;div class="content"&gt;
    &lt;h2&gt;Outgrowing simplicity&lt;/h2&gt;
    &lt;p&gt;The first version of our site was contained within a single page. At the time, it served its purpose well. As we added more, it began to feel like it trying to do too much. Upon recognizing this, we began reimagining our site.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="two"&gt;
  &lt;div class="content"&gt;
    &lt;h2&gt;Structural changes&lt;/h2&gt;
    &lt;p&gt;The very first step we took was to establish a reasonable structure of our new site. This helped to inform the site content, and much of the new site design.&lt;/p&gt;
    &lt;p&gt;We decided to make the landing page an overview of DockYard. Our work deserved its own place to be shown. We have added people to our team, and we wanted a page dedicated to community &amp; open source projects. We have this blog thing, and we also wanted a dedicated contact page.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="three"&gt;
  &lt;div class="content"&gt;
    &lt;h2&gt;Design &amp; code&lt;/h2&gt;
    &lt;p&gt;After the structural decisions had been made, it was time to put down some design. This was done primarily in the browser using actual code. This allowed rapid iteration over page layout, content tweaks, and especially mobile design. Being able to try things almost right away in browser informed many design decisions.&lt;/p&gt;
    &lt;p&gt;With the new design, the Narwin (half narwhal, half penguin) was introduced as our mascot and overseer of all things nautical. We have high confidence that he will serve us loyally now and in the future.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="four"&gt;
  &lt;div class="content"&gt;
    &lt;h2&gt;Well done&lt;/h2&gt;
    &lt;p&gt;It was a lot of fun to reimagine our site and we are all proud of the result. It is designed to grow and evolve along with us.&lt;/p&gt;
    &lt;p&gt;There are plenty of hidden surprises in the new site. See if you can find an easter egg or two.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>ClientSideValidations 3.2 Released!</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/10/09/client-side-validations-3-2-released.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/10/09/client-side-validations-3-2-released.html</id>
    <published>2012-10-09T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Better late than never</summary>
    <content type="html">&lt;p&gt;I just released &lt;a href="https://github.com/bcardarella/client_side_validations"&gt;ClientSideValidations 3.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a very big release for the gem, one that took &lt;em&gt;way&lt;/em&gt; too much
time to get done. I want to start by re-introducing people to the gem,
what the value is, and what the changes for 3.2 are.&lt;/p&gt;

&lt;p&gt;ClientSideValidations is just that, it will extract the validations from
your model and apply them to your forms on the client. The
&lt;a href="https://github.com/bcardarella/client_side_validations/blob/master/README.md"&gt;README&lt;/a&gt;
has more comprehensive instructions. But here is the quick guide:&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;rails.validation.js&lt;/code&gt; to your asset pipeline, then add &lt;code&gt;:validate =&amp;gt;
true&lt;/code&gt; to your form like so:&lt;/p&gt;
&lt;div class="highlight erb "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;&amp;lt;%=&lt;/span&gt; form_for &lt;span class="instance-variable"&gt;@user&lt;/span&gt;, &lt;span class="symbol"&gt;:validate&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |f| &lt;span class="inline-delimiter"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And that is it. If you have more &lt;a href="https://github.com/bcardarella/client_side_validations/blob/master/README.md#conditional-validators"&gt;complex validators&lt;/a&gt; or 
&lt;a href="https://github.com/bcardarella/client_side_validations/blob/master/README.md#custom-validators"&gt;custom validators&lt;/a&gt;
on your models then you can quickly support these as well.&lt;/p&gt;

&lt;h2&gt;Changes&lt;/h2&gt;

&lt;p&gt;Version 3.2 brings many changes to the gem. The first of which is that
from this version on we will be following &lt;a href="http://semver.org"&gt;Semantic Versioning&lt;/a&gt; or trying our best to do so.&lt;/p&gt;

&lt;p&gt;The next change, and the biggest backward-incompatible change, is that
the support for &lt;code&gt;SimpleForm&lt;/code&gt;, &lt;code&gt;Formtastic&lt;/code&gt;, &lt;code&gt;Mongoid&lt;/code&gt;, and &lt;code&gt;MongoMapper&lt;/code&gt;
have been removed. These have been put into their own
&lt;a href="https://github.com/bcardarella/client_side_validations/wiki/Plugins"&gt;plugins&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dockyard/client_side_validations-simple_form"&gt;SimpleForm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dockyard/client_side_validations-formtastic"&gt;Formtastic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dockyard/client_side_validations-mongoid"&gt;Mongoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dockyard/client_side_validations-mongo_mapper"&gt;MongoMapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will be the convetion from now on. The &lt;code&gt;ClientSideValidations&lt;/code&gt; gem
itself will only support &lt;code&gt;Rails&lt;/code&gt; out of the box. If there are additional
FormBuilders or ORMs that people need support for these will be done so
via the plugins. This will allow for quicker bug fixes and less
complexity in the core gem.&lt;/p&gt;

&lt;p&gt;I have also released a gem for &lt;a href="https://github.com/dockyard/client_side_validations-turbolinks"&gt;Turbolinks support&lt;/a&gt;.
Turbolinks support will be part of the core gem for the next release
(4.0).&lt;/p&gt;

&lt;p&gt;There have been a significant number of bug fixes for this release. If
you ran into a bug before odds are it is now resolved.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Proc&lt;/code&gt;s are now fullow supported in &lt;code&gt;ActiveModel&lt;/code&gt; validators, you just
have to force the validation to evaluate:&lt;/p&gt;
&lt;div class="highlight erb "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;&amp;lt;%=&lt;/span&gt; f.text_field, &lt;span class="symbol"&gt;:validate&lt;/span&gt; =&amp;gt; { &lt;span class="symbol"&gt;:length&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt; } &lt;span class="inline-delimiter"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I have also added a FormBuilder method for adding validations for
attributes that are not being written to the form but may be added
dynamically later:&lt;/p&gt;
&lt;div class="highlight erb "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;&amp;lt;%=&lt;/span&gt; f.validate &lt;span class="symbol"&gt;:age&lt;/span&gt;, &lt;span class="symbol"&gt;:weight&lt;/span&gt; &lt;span class="inline-delimiter"&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This method can also take validator specific options.&lt;/p&gt;

&lt;h2&gt;JavaScript API Additions and Changes&lt;/h2&gt;

&lt;p&gt;The first major change is that &lt;code&gt;data-validate=&amp;quot;true&amp;quot;&lt;/code&gt; is no longer
rendered on the inputs server-side. It is added to the input at
run-time.&lt;/p&gt;

&lt;p&gt;The second is the addition of some &lt;a href="https://github.com/bcardarella/client_side_validations/blob/master/README.md#enabling-disabling-and-resetting-on-the-client"&gt;jQuery functions&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="predefined"&gt;$&lt;/span&gt;(form or input).enableClientSideValidations();
&lt;span class="predefined"&gt;$&lt;/span&gt;(form or input).disableClientSideValidations();
&lt;span class="predefined"&gt;$&lt;/span&gt;(form).resetClientSideValidations();
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$.fn.enableClientSideValidations()&lt;/code&gt; acts upon either a form or input
and will enable them for ClientSideValidations. If you are adding
forms or inputs dynamically to the DOM via AJAX or some other means you
&lt;em&gt;need&lt;/em&gt; to call this function on them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$.fn.disableClientSideValidations()&lt;/code&gt; acts upon either a form or an
input and will disable them for ClientSideValidations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$.fn.resetClientSideValidations()&lt;/code&gt; will reset the validations. This
means disabling, removing all error messages, and enabling
validaitons.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Security&lt;/h2&gt;

&lt;p&gt;There have been some security fixes. Mostly around the &lt;code&gt;Uniqueness&lt;/code&gt;
middleware.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calls to the uniqueness middleware only act upon models and
attributes that have a uniqueness validator defined in the model.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href="https://github.com/bcardarella/client_side_validations/blob/master/README.md#security"&gt;API for turning off uniqueness app-wide has been changed&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Backwards incompatiable changes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you were relying upon &lt;code&gt;data-validate=&amp;quot;true&amp;quot;&lt;/code&gt; being rendered on the
inputs from the server your code will break.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ClientSideValidations::Config.uniqueness_validator_disabled&lt;/code&gt; has been
removed. Please add &lt;code&gt;ClientSideValidations::Config.disabled_validators
= [:uniqueness]&lt;/code&gt; to your initializer if you require this functionality.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please give the gem a try and &lt;a href="http://twitter.com/bcardarella"&gt;let me know&lt;/a&gt; what you think!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Querying PostgreSQL datatypes in ActiveRecord with postgres_ext</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/09/21/querying-postgresql-datatypes-in-active-record-with-postgres_ext.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/09/21/querying-postgresql-datatypes-in-active-record-with-postgres_ext.html</id>
    <published>2012-09-21T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>Returning records based on array elements and network subnets</summary>
    <content type="html">&lt;p&gt;I created the &lt;a href="https://github.com/dockyard/postgres_ext"&gt;postgres_ext&lt;/a&gt; gem to add ActiveRecord support for 
PostgreSQL datatypes in Rails 3.2+. So far, I have added support for
the CIDR, INET, MACADDR, UUID, and array datatypes. &lt;a href="https://github.com/dockyard/postgres_ext/issues"&gt;Please open an issue on GitHub if you&amp;#39;d like other datatypes supported that aren&amp;#39;t currently&lt;/a&gt;.
Since we can now add these columns via Rails migrations, and have
INET/CIDR and array columns converted to Ruby &lt;code&gt;IPAddr&lt;/code&gt; and &lt;code&gt;Array&lt;/code&gt;
objects, resepectively.&lt;/p&gt;

&lt;p&gt;Rails 4.0 has also added support for CIDR, INET, MACADDR and array
datatypes.&lt;/p&gt;

&lt;p&gt;It would be great if we could take advantage of
PostgreSQL&amp;#39;s query support for these datatypes. Wait, we can already do
that!&lt;/p&gt;

&lt;h2&gt;Querying against arrays using &lt;code&gt;ANY&lt;/code&gt; and &lt;code&gt;ALL&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In PostgreSQL, you can query for records where any or all elements match
a given predicate.&lt;/p&gt;
&lt;div class="highlight sql "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="class"&gt;SELECT&lt;/span&gt; *
&lt;span class="keyword"&gt;FROM&lt;/span&gt; users
&lt;span class="keyword"&gt;WHERE&lt;/span&gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;johnny&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; = &lt;span class="keyword"&gt;ANY&lt;/span&gt;(nicknames)
&lt;span class="comment"&gt;-- Finds any record that has 'johnny' stored in the nicknames array&lt;/span&gt;

&lt;span class="class"&gt;SELECT&lt;/span&gt; *
&lt;span class="keyword"&gt;FROM&lt;/span&gt; user_scores
&lt;span class="keyword"&gt;WHERE&lt;/span&gt; &lt;span class="integer"&gt;1000&lt;/span&gt; &amp;gt; &lt;span class="keyword"&gt;ALL&lt;/span&gt;(scores)
&lt;span class="comment"&gt;-- Finds any record that has over 1000 stored in every element in the&lt;/span&gt;
&lt;span class="comment"&gt;-- scores array&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can actually use arel to generate these queries.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;user_arel = &lt;span class="constant"&gt;User&lt;/span&gt;.arel_table

any_nicknames_function = &lt;span class="constant"&gt;Arel&lt;/span&gt;::&lt;span class="constant"&gt;Nodes&lt;/span&gt;::&lt;span class="constant"&gt;NamedFunction&lt;/span&gt;.new(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ANY&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, [user_arel[&lt;span class="symbol"&gt;:nicknames&lt;/span&gt;]])
predicate = &lt;span class="constant"&gt;Arel&lt;/span&gt;::&lt;span class="constant"&gt;Nodes&lt;/span&gt;::Equality(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, any_nicknames_function)

sql_statement = user_arel.project(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;*&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).where(predicate).to_sql
&lt;span class="comment"&gt;#=&amp;gt; SELECT * FROM \&amp;quot;users\&amp;quot; WHERE 'test' = ANY(\&amp;quot;users\&amp;quot;.\&amp;quot;nicknames\&amp;quot;)&lt;/span&gt;

users_with_nickname = &lt;span class="constant"&gt;User&lt;/span&gt;.find_by_sql(sql_statement)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the above example, we have to create an &lt;code&gt;Equality&lt;/code&gt; node manually
since the left hand side of the predicate is the value, instead of the
column. If you need &lt;code&gt;&amp;lt;&lt;/code&gt; in your predicate, you would create a &lt;code&gt;LessThan&lt;/code&gt;
node instead of an equality node.&lt;/p&gt;

&lt;p&gt;This example applies to both Rails 3.2+ with postgres_ext and Rails 4.0
with native array support.&lt;/p&gt;

&lt;h2&gt;Array overlap&lt;/h2&gt;

&lt;p&gt;In PostgreSQL, you can check if two arrays have one or more elements in
common by using the overlap operator, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight sql "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;{1,2,3}&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;{4,5,6}&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="comment"&gt;-- f&lt;/span&gt;
&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;{1,2,3}&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;{3,4}&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="comment"&gt;-- t&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In postgres_ext, I added a new Arel predicate node for the 
overlap operator.  For the time being, it is named &lt;code&gt;ArrayOverlap&lt;/code&gt;
and can be called from a &lt;code&gt;Arel::Attribute&lt;/code&gt; as &lt;code&gt;#array_overlap&lt;/code&gt;. It
is likely that this will be renamed to &lt;code&gt;Overlap&lt;/code&gt; and &lt;code&gt;#overlap&lt;/code&gt;,
respectively, in the next release of postgres_ext.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;user_arel = &lt;span class="constant"&gt;User&lt;/span&gt;.arel_table

&lt;span class="constant"&gt;User&lt;/span&gt;.where(user_arel[&lt;span class="symbol"&gt;:tags&lt;/span&gt;].array_overlap([&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;one&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;two&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;])).to_sql
&lt;span class="comment"&gt;# =&amp;gt; SELECT \&amp;quot;users\&amp;quot;.* FROM \&amp;quot;users\&amp;quot; WHERE \&amp;quot;users\&amp;quot;.\&amp;quot;tags\&amp;quot; &amp;amp;&amp;amp; '{one,two}'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;One case that we have used an array column in tandem with the overlap
operator was adding tags to a user. We had three tags that could be
placed on a user, so we stored this data an array column. We then had a
search form which had a multiselect field for that tags column. The
multiselect would give us an array of possible values that we wanted to
find records that had any of those selected values. So instead of
crafting a statement with multiple &lt;code&gt;ANY&lt;/code&gt; queries &lt;code&gt;OR&lt;/code&gt;ed together, we
used overlap instead, resulting in only one predicate.&lt;/p&gt;

&lt;h2&gt;INET/CIDR subnet inclusion&lt;/h2&gt;

&lt;p&gt;In PostgreSQL, you can see if a particular INET address is contained in
a specific subnet with the contained within operator, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight sql "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;inet &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;192.168.1.6&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &amp;lt;&amp;lt; inet &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;10.0.0.0/24&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="comment"&gt;-- f&lt;/span&gt;

inet &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;192.168.1.6&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &amp;lt;&amp;lt; inet &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;192.168.1.0/24&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="comment"&gt;-- t&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In postgres_ext, I added a new Arel predicate node for the 
contained within operator. It can be called from a
&lt;code&gt;Arel::Attribute&lt;/code&gt; with &lt;code&gt;#contained_within&lt;/code&gt;. I also added a visitor for
IPAddr objects so that they are correctly converted to quoted strings
when called within a Arel predicate.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;user_arel = &lt;span class="constant"&gt;User&lt;/span&gt;.arel_table

&lt;span class="constant"&gt;User&lt;/span&gt;.where(user_arel[&lt;span class="symbol"&gt;:ip_address&lt;/span&gt;].contained_within(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;10.0.0.0/8&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).to_sql
&lt;span class="comment"&gt;#=&amp;gt; SELECT \&amp;quot;users\&amp;quot;.* FROM \&amp;quot;users\&amp;quot; WHERE \&amp;quot;users\&amp;quot;.\&amp;quot;ip_address\&amp;quot; &amp;lt;&amp;lt; '10.0.0.0/8'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;We&amp;#39;re not done yet&lt;/h2&gt;

&lt;p&gt;We have only scratched the surface of the datatype specific functions
and operators in PostgreSQL. There are many more to be implemented, and
the plan is to support them all. This post highlights what has been
implemented so far, and also what you can do with Arel already. I plan
to put together some pull requests for Arel to add in some of the
PostgreSQL operators. If there is an operator missing in postgres_ext
that you want/need, please &lt;a href="https://github.com/dockyard/postgres_ext/issues?state=open"&gt;open an issue on
Github&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Making of the DockYard Narwin</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/design/2012/09/20/making-of-the-dockyard-narwin.html"/>
    <id>http://reefpoints.dockyard.com/design/2012/09/20/making-of-the-dockyard-narwin.html</id>
    <published>2012-09-20T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Amanda Cheung</name>
    </author>
    <summary>Animated gif of the evolution of the narwin</summary>
    <content type="html">&lt;p&gt;Half narwhal, half penguin. He&amp;#39;s a cute lil&amp;#39; fella with quite the personality. He set the stage for the redesign of our website while becoming DockYard&amp;#39;s new brand mascot.&lt;/p&gt;

&lt;p&gt;The Final Version:
&lt;img src="/images/narwin.jpg" alt="DockYard"&gt;&lt;/p&gt;

&lt;p&gt;The Evolution:
&lt;img src="/images/narwin.gif" alt="DockYard Narwin"&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rails 4.0 Sneak Peek: PostgreSQL array support</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/09/18/rails-4-sneak-peek-postgresql-array-support.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/09/18/rails-4-sneak-peek-postgresql-array-support.html</id>
    <published>2012-09-18T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>Storing arrays natively in PostgreSQL is now supported by Rails</summary>
    <content type="html">&lt;p&gt;I&amp;#39;m happy to announce that &lt;a href="https://github.com/rails/rails/pull/7547"&gt;Rails 4.0 now has support for PostgreSQL
arrays&lt;/a&gt;. You can create an
array column easily at the time of migration by adding &lt;code&gt;:array =&amp;gt; true&lt;/code&gt;.
Creating an array column will respect the other options you add to the
column (&lt;code&gt;length&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, etc). &lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;create_table &lt;span class="symbol"&gt;:table_with_arrays&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
  t.integer &lt;span class="symbol"&gt;:int_array&lt;/span&gt;, &lt;span class="symbol"&gt;:array&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  &lt;span class="comment"&gt;# integer[]&lt;/span&gt;
  t.integer &lt;span class="symbol"&gt;:int_array&lt;/span&gt;, &lt;span class="symbol"&gt;:array&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;, &lt;span class="symbol"&gt;:length&lt;/span&gt; =&amp;gt; &lt;span class="integer"&gt;2&lt;/span&gt;
  &lt;span class="comment"&gt;# smallint[]&lt;/span&gt;
  t.string &lt;span class="symbol"&gt;:string_array&lt;/span&gt;, &lt;span class="symbol"&gt;:array&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;, &lt;span class="symbol"&gt;:length&lt;/span&gt; =&amp;gt; &lt;span class="integer"&gt;30&lt;/span&gt;
  &lt;span class="comment"&gt;# char varying(30)[]&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt; 
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It should be noted when setting the default value for an array column,
you should use PostgreSQL&amp;#39;s array notation for that value
(&lt;code&gt;{value,another value}&lt;/code&gt;). If you want the default value to be an empty
array you would have &lt;code&gt;:default =&amp;gt; &amp;#39;{}&amp;#39;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;create_table &lt;span class="symbol"&gt;:table_with_arrays&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
  t.integer &lt;span class="symbol"&gt;:int_array&lt;/span&gt;, &lt;span class="symbol"&gt;:array&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;, &lt;span class="symbol"&gt;:default&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;{}&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;# integer[], default == []&lt;/span&gt;
  t.integer &lt;span class="symbol"&gt;:int_array&lt;/span&gt;, &lt;span class="symbol"&gt;:array&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;, &lt;span class="symbol"&gt;:length&lt;/span&gt; =&amp;gt; &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="symbol"&gt;:default&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;{1}&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;# smallint[], default == [1]&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt; 
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;An example of a model with an array value&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s say that we have a user model, which has a formal first and last
name, and also a number of nicknames (I rarely ever go by Daniel). The
following code would create the table we need to store this.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;create_table &lt;span class="symbol"&gt;:users&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
  t.string &lt;span class="symbol"&gt;:first_name&lt;/span&gt;
  t.string &lt;span class="symbol"&gt;:last_name&lt;/span&gt;
  t.string &lt;span class="symbol"&gt;:nicknames&lt;/span&gt;, &lt;span class="symbol"&gt;:array&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And we have a simple model for this table:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;User&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  attr_accessible &lt;span class="symbol"&gt;:first_name&lt;/span&gt;, &lt;span class="symbol"&gt;:last_name&lt;/span&gt;, &lt;span class="symbol"&gt;:nicknames&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where we don&amp;#39;t have a default value, if we instantiate a User object
with the following&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;john = &lt;span class="constant"&gt;User&lt;/span&gt;.create(&lt;span class="symbol"&gt;:first_name&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;John&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:last_name&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Doe&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If we call &lt;code&gt;john.nicknames&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt; would be returned, and is stored as
&lt;code&gt;NULL&lt;/code&gt; in PostgresSQL. We can set the nicknames attribute at the time of
creation with&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;john = &lt;span class="constant"&gt;User&lt;/span&gt;.create(&lt;span class="symbol"&gt;:first_name&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;John&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:last_name&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Doe&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="symbol"&gt;:nicknames&lt;/span&gt; =&amp;gt; [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Jack&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Johnny&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;])
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If we then retrieved this record from the database, the &lt;code&gt;nicknames&lt;/code&gt;
value would be casted to an array, instead of returning the string of
&lt;code&gt;{Jack,Johnny}&lt;/code&gt;.  Rails 4.0 has a pure ruby array value parser, but if
you would like to speed up the parsing process, the previously mentioned
&lt;a href="https://github.com/dockyard/pg_array_parser"&gt;pg_array_parser&lt;/a&gt;
gem will be used if it is available. PgArrayParser has
a C extension, and a Java implementation for JRuby (although the gem
currently broken in JRuby, this is something I am fixing now).&lt;/p&gt;

&lt;p&gt;One important thing to note when interacting with array (or other
mutable values) on a model.  ActiveRecord does not currently track
&amp;quot;destructive&amp;quot;, or in place changes. These include array &lt;code&gt;push&lt;/code&gt;ing and
&lt;code&gt;pop&lt;/code&gt;ing, &lt;code&gt;advance&lt;/code&gt;-ing DateTime objects. If you want to use a
&amp;quot;destructive&amp;quot; update, you must call &lt;code&gt;&amp;lt;attribute&amp;gt;_will_change!&lt;/code&gt; to let
ActiveRecord know you changed that value. With our User model, if we
wanted to append a nickname, you can do the following:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;john = &lt;span class="constant"&gt;User&lt;/span&gt;.first

john.nicknames += [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Jackie boy&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span class="comment"&gt;# or&lt;/span&gt;
john.nicknames = john.nicknames.push(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Jackie boy&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="comment"&gt;# Any time an attribute is set via `=`, ActiveRecord tracks the change&lt;/span&gt;
john.save

john.reload
john.nicknames
&lt;span class="comment"&gt;#=&amp;gt; ['Jack', 'Johnny', 'Jackie Boy']&lt;/span&gt;

john.nicknames.pop
john.nicknames_will_change!
&lt;span class="comment"&gt;# '#pop' changes the value in place, so we have to tell ActiveRecord it changed&lt;/span&gt;
john.save
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;One last note about arrays in PostgreSQL: there are no element count
constraints, and any array can be multidimensional. With the
multidimensional arrays, they must be &amp;quot;square&amp;quot; (the sub arrays must all
have the same number of elements).&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;[[&lt;span class="integer"&gt;1&lt;/span&gt;,&lt;span class="integer"&gt;2&lt;/span&gt;,&lt;span class="integer"&gt;3&lt;/span&gt;], [&lt;span class="integer"&gt;2&lt;/span&gt;,&lt;span class="integer"&gt;3&lt;/span&gt;,&lt;span class="integer"&gt;4&lt;/span&gt;], [&lt;span class="integer"&gt;4&lt;/span&gt;,&lt;span class="integer"&gt;5&lt;/span&gt;,&lt;span class="predefined-constant"&gt;nil&lt;/span&gt;]]
&lt;span class="comment"&gt;# Valid array value in PostgreSQL, each subarray has the same number of&lt;/span&gt;
&lt;span class="comment"&gt;# elements&lt;/span&gt;
[&lt;span class="integer"&gt;1&lt;/span&gt;,&lt;span class="integer"&gt;2&lt;/span&gt;,[&lt;span class="integer"&gt;3&lt;/span&gt;,&lt;span class="integer"&gt;4&lt;/span&gt;]]
&lt;span class="comment"&gt;# Invalid array, we are mixing values and arrays at a single level&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In my next article, I will talk about querying PostgreSQL arrays in both
postgres_ext and Rails 4.0. Go forth and use arrays in Rails 4.0!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Doug Yun is a DockYarder!</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2012/09/05/doug-yun-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2012/09/05/doug-yun-is-a-dockyarder.html</id>
    <published>2012-09-05T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>DockYard welcomes Doug Yun</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/doug-yun.png" alt="Doug Yun"&gt;&lt;/p&gt;

&lt;p&gt;Doug has been training with us for the past month and this week we&amp;#39;ve
released him from his cage on the nearest client app. He&amp;#39;s running wild!&lt;/p&gt;

&lt;p&gt;This rounds out our Boston team to 4! ZOMG!&lt;/p&gt;

&lt;p&gt;Follow him on the &lt;a href="http://twitter.com/DougYun"&gt;Twitters&lt;/a&gt; and
&lt;a href="https://github.com/duggieawesome"&gt;github&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Lessons Learned: The First Hire</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/opinion/2012/08/30/lessons-learned-the-first-hire.html"/>
    <id>http://reefpoints.dockyard.com/opinion/2012/08/30/lessons-learned-the-first-hire.html</id>
    <published>2012-08-30T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>What to expect when you start hiring</summary>
    <content type="html">&lt;p&gt;In February we made our first full-time hire with Dan McClain. He came
on board at a time when our company was not very stable but we needed to
grow to accomodate the larger contracts we wanted. I want to discuss the
risks and benefits on making the first hire.&lt;/p&gt;

&lt;h2&gt;You will lose money&lt;/h2&gt;

&lt;p&gt;One of the first things you learn about making your first full-time hire
beyond the founders is that you will most likely lose money. Which is
kind of backwards because the entire point of hiring is so more money
can be made. Brian Kaney at &lt;a href="http://vermonster.com"&gt;Vermonster&lt;/a&gt; told me this after we had already
hired Dan. I was accustomed to balancing 3 people&amp;#39;s salaries and now a
4th was in play and we didn&amp;#39;t have any extra money coming in. So we the
partners had to take less money. After Brian told me that Vermonster had
similar growing pains it made me feel better. I&amp;#39;ve since spoken with
others that have said the same. I suspect this is partly due to my
inexperience as a first time business owner, if I ever start another
company I can plan better for this. It is also due simply to the fact
that we didn&amp;#39;t have any extra work coming in and were now dividing the
money 4 ways instead of 3. The employees have to be paid, the partners
don&amp;#39;t. I took on the brunt of the risk and actually just started paying
myself for the first time in 2012 at the start of August. It was totally
worth it.&lt;/p&gt;

&lt;h2&gt;Be picky who you hire&lt;/h2&gt;

&lt;p&gt;I&amp;#39;d like to say that Dan hired himself rather than we hired him. He was
somewhat new to the Boston Ruby community but was going out of his way
to make himself known. He took the initiative to introduce himself to
me and wanted to make contributions to the &lt;a href="https://github.com/bostonrb/bostonrb"&gt;BostonRB website&lt;/a&gt;.
He developed a feature, made a pull request, and I gave him feedback.
What impressed me was how quickly he adapted to the feedback I gave him.
This told me one thing: Dan was a very quick learner. Before DockYard
was even looking to hire Dan contacted me and expressed interest in
being hired. When it came time for us to make a hire he was the first
name that came to mind. I think the lesson to learn here is if you want
to work somewhere, don&amp;#39;t wait for them to hire for your talent. Contact
them, let them know you are interested even if they don&amp;#39;t have anything
available. When the time comes they&amp;#39;ll remember you.&lt;/p&gt;

&lt;h2&gt;Make full-time hires, don&amp;#39;t contract to hire&lt;/h2&gt;

&lt;p&gt;We hired Dan on a contract-to-hire basis. The idea at the time was to
have Dan on a &amp;quot;trial&amp;quot; period, test him out, see how he fit. I didn&amp;#39;t
like how this went and I don&amp;#39;t think it was fair to Dan to hire this
way. If you are hiring for a position, hire full-time. If things aren&amp;#39;t
working out you are always within your rights to let the person go.
Whenever you are hiring someone there is always the risk that it won&amp;#39;t
work out.&lt;/p&gt;

&lt;h2&gt;Be mindful of taxes, benefits, salaries, etc...&lt;/h2&gt;

&lt;p&gt;Now that we had our first full-time on board we had to standardize
everything. The best way to describe how I was handling all of this up
until our first hire is &amp;quot;half-assed&amp;quot;. I was the only one living in
Massachusetts where it was required to have health-care so I was using
the MA Health Connector (a terrible service), we were handling time-off
as &amp;quot;whenever you want&amp;quot; which of course doesn&amp;#39;t fly well as you scale,
and taxes were a mystery to me. Let&amp;#39;s break each one down to see what
we&amp;#39;ve done:&lt;/p&gt;

&lt;h3&gt;Benefits&lt;/h3&gt;

&lt;p&gt;I went for the best health-care I could find for employees. When it
comes down to it we&amp;#39;re only talking about the difference of a few hundred
dollars each month. If we go under because of this cost then I deserve
to lose my company. If one of my employees cannot see the doctor they
need to because of sub-standard health coverage I run the risk that they
will not be back to work as quickly as they would otherwise. This risk
costs far more than the extra $$$ for the better plans.&lt;/p&gt;

&lt;p&gt;DockYard is currently covering 3/4 of the healthcare and I hope to bring
that up to 100% in 2013.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re doing 3 weeks of paid vacation per year. Employees can take off
two weeks at a time. I am also experimenting with how to handle
overtime. Because we&amp;#39;re doing client work and sometimes deadlines have
to be met I&amp;#39;ve told everyone that there will be a day when they get
Lumberged. I&amp;#39;m going to be the guy that will have to ask people to work
over a weekend, I don&amp;#39;t like it and I would be pissed if I was on the
receiving end of that. So, to compensate we&amp;#39;ll offer an added vacation
day in exchange for each weekend day. Of course employees can say &amp;quot;no&amp;quot;
to working on the weekend. I understand that there are sometimes plans
that are made well in advance.&lt;/p&gt;

&lt;h3&gt;Payroll&lt;/h3&gt;

&lt;p&gt;This is something we have struggled with. Everyone has always been paid
but sometimes it has been a day late because of mistakes on my part.
Originally I was cutting checks to everyone and mailing them myself. I
would manually enter the data into QuickBooks for our accountant. This
sucks. I eventually got it down to where it would only take me 5 minutes
to do but for a while it was pretty disruptive. We eventually moved over
Direct Deposit through QuickBooks. This was much better, and quicker. If
you are not doing Direct Deposit you should highly consider it.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve recently moved from QuickBooks to Less Accounting and Sure
Payroll. QuickBooks blows. We only used it because our accountant
suggested it. Here is some advice: don&amp;#39;t let your accountant make
software decisions for you, especially if you are a software
consultancy. Our accountant is awesome, but QuickBooks is not. We lost
an entire month of payroll, tax, and vendor payment data because a
QuickBooks file corrupted. Never again.&lt;/p&gt;

&lt;h3&gt;Salaries, taxes&lt;/h3&gt;

&lt;p&gt;One &lt;em&gt;huge&lt;/em&gt; mistake I made even before hiring Dan but continued into a
month after he was hired was not withholding taxes from paychecks. We
were losing money after our first quarterly taxes were paid and I couldn&amp;#39;t figure it out. In retrospect it is
pretty obvious what I should have been doing but keep in mind this was
my first company, I never had to deal with this before, and simply
fucked up. Things turned around after I corrected this. I didn&amp;#39;t ask for
employees to payback the money. I&amp;#39;m not trying to push this idea that
I&amp;#39;m a &amp;quot;good guy&amp;quot; but this was my screw up and I took the hit.&lt;/p&gt;

&lt;p&gt;Also, pay people well. &amp;quot;Industry average salary&amp;quot; will earn you &amp;quot;industry
average employees&amp;quot;. If it is well known that you are paying high
salaries you will attract talented people. Talented people will more
than make up the difference.&lt;/p&gt;

&lt;h2&gt;Hiring ain&amp;#39;t easy&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve heard the term &amp;quot;peak people&amp;quot; thrown around a lot recently. It
refers to the huge talent shortage that the tech industry has. It&amp;#39;s
true, it exists. You know why? Because everybody wants to hire top
talent and nobody wants to train. I think it is pretty bullshit for
companies to not train developers. Personally I would rather hire a
developer that requires training that is a quick learner than hire a
mid-level dev that is set in his/her ways. We got lucky with Dan, he
required very little ramping up. Mostly just a push here and a push
there. We&amp;#39;ve recently hired Doug Yun as a trainee. I told Doug that we
are experimenting with him, I want to establish a training program at
DockYard. So there will be ups and downs to it as we establish a
playbook. I realize we run the risk of devs training up, then bouncing
out. There are ways to address this. We can offer employment term
benefits. If you are at DockYard for a year your salary will increase by
X% every year. Let them know what the path for advancement is. We need
to get better at this and it is something I want to focus on over the next
few months. I would love to hear feedback and how others are
approaching this.&lt;/p&gt;

&lt;h2&gt;It pushes you to make things happen&lt;/h2&gt;

&lt;p&gt;The best benefit of hiring is that it personally motivates me to grow
the company. When it was just the co-founders we always had the fallback 
that a payroll period could be skipped. As I mentioned earlier that is
not a choice when you have employees. Money must come in, people must
get paid. Personally I have found this to be a good motivator for
growing DockYard.&lt;/p&gt;

&lt;h2&gt;Share your experiences!&lt;/h2&gt;

&lt;p&gt;If you agree/disagree with anything I said, have a different
perspective, or any general advice I&amp;#39;d love to hear it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rails 4.0 Sneak Peek: Asynchronous ActionMailer</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/06/26/rails-4-sneak-peek-async-actionmailer.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/06/26/rails-4-sneak-peek-async-actionmailer.html</id>
    <published>2012-06-26T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>How to send your emails using the new Rails 4.0 Queue</summary>
    <content type="html">&lt;p&gt;My previous &lt;a href="http://reefpoints.dockyard.com/ruby/2012/06/25/rails-4-sneak-peek-queueing.html"&gt;deep dive into the Rails 4.0 Queueing system&lt;/a&gt;
 was motivated by a patch to Rails I was working on while at &lt;a href="http:/railscamps.org"&gt;RailsCamp New England&lt;/a&gt; this past weekend. I&amp;#39;m happy to say that &lt;a href="https://github.com/rails/rails/pull/6839"&gt;Rails 4.0 now has an optional asynchronous ActionMailer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The API for pushing your emails to the background is very simple. If you
want to make this change application wide simply set it in your
&lt;code&gt;application.rb&lt;/code&gt; (or in any of the environment files)&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;config.action_mailer.async = &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Or if you want to only make specific mailers asynchrounous&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;WelcomeMailer&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActionMailer&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  &lt;span class="predefined-constant"&gt;self&lt;/span&gt;.async = &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it! Any messages that are being delivered will be sent as a
background job. In fact, the rendering is happening on the background as
well.&lt;/p&gt;

&lt;p&gt;You will need to take care that the arguments you are passing your
mailers can be properly marshalled. Instead of:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;WelcomeMailer&lt;/span&gt;.welcome(&lt;span class="instance-variable"&gt;@user&lt;/span&gt;).deliver
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You should do:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;WelcomeMailer&lt;/span&gt;.welcome(&lt;span class="instance-variable"&gt;@user&lt;/span&gt;.id).deliver
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then in your mailer:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;WelcomeMailer&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActionMailer&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;welcome&lt;/span&gt;(id)
    &lt;span class="instance-variable"&gt;@user&lt;/span&gt; = &lt;span class="constant"&gt;User&lt;/span&gt;.find(id)
    ...
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Switching it up&lt;/h2&gt;

&lt;p&gt;The default queueing system is &lt;code&gt;Rails.queue&lt;/code&gt;, but you can override this to use any queueing system you
want by overriding &lt;code&gt;ActionMailer::Base#queue&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;WelcomeMailer&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActionMailer&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;queue&lt;/span&gt;
    &lt;span class="constant"&gt;MyQueue&lt;/span&gt;.new
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Your custom queue should expect the jobs to respond to &lt;code&gt;#run&lt;/code&gt;, same as
&lt;code&gt;Rails.queue&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Credit&lt;/h2&gt;

&lt;p&gt;Much of the original code was cribbed (with permission) from &lt;a href="http://blog.zerosum.org"&gt;Nick
Plante&lt;/a&gt;&amp;#39;s
&lt;a href="https://github.com/zapnap/resque_mailer"&gt;resque_mailer&lt;/a&gt; gem.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rails 4.0 Sneak Peek: Queueing</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/06/25/rails-4-sneak-peek-queueing.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/06/25/rails-4-sneak-peek-queueing.html</id>
    <published>2012-06-25T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>A look at the new Queueing API</summary>
    <content type="html">&lt;p&gt;Recently a &lt;a href="https://github.com/rails/rails/commit/adff4a706a5d7ad18ef05303461e1a0d848bd662"&gt;queueing system was added to Rails&lt;/a&gt;.
Let&amp;#39;s dive in and see how to use it.&lt;/p&gt;

&lt;h2&gt;Run, baby, run!&lt;/h2&gt;

&lt;p&gt;The queueing API is very simple. You push an object on to the queue and
that object is expected to respond to a &lt;code&gt;run&lt;/code&gt; method. Let&amp;#39;s take a look:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;TestJob&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;run&lt;/span&gt;
    puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;I am running!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="constant"&gt;Rails&lt;/span&gt;.queue.push(&lt;span class="constant"&gt;TestJob&lt;/span&gt;.new)
=&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;I am running!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For most people, that is pretty much it. The queue is running in a
separate thread from the app thread, so your app shouldn&amp;#39;t notice any
response impact from an expensive job.&lt;/p&gt;

&lt;p&gt;The basic queue that comes with Rails is not a long-term solution. The
goal here is to establish a common API that more robust queueing systems
can plug themselves into. In most cases you shouldn&amp;#39;t need to change any
of your app code if you want to switch from
&lt;a href="https://github.com/defunkt/resque"&gt;Resque&lt;/a&gt; to
&lt;a href="https://github.com/mperham/sidekiq"&gt;Sidekiq&lt;/a&gt;. You should take care that
the objects you are enqueing can be properly marshalled.&lt;/p&gt;

&lt;p&gt;You can even write your own queue, let&amp;#39;s take a look at the API of a
custom queue&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;MyQueue&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;push&lt;/span&gt;(job)
    job.run
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then in your &lt;code&gt;application.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;config.queue = &lt;span class="constant"&gt;MyQueue&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This example is straight from the Rails test suite. This will define a
queue that does not run jobs asynchronously. As soon as the job is
pushed onto the queue it is run. Let&amp;#39;s make an actual queue (without relying on
the Queue class)&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;MyQueue&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@queue&lt;/span&gt; = []
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;push&lt;/span&gt;(job)
    &lt;span class="instance-variable"&gt;@queue&lt;/span&gt;.push(job)
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;pop&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@queue&lt;/span&gt;.pop
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example we have implemented a simple queue. You will next need
to tell Rails&amp;#39;s QueueConsumer to use this queue. You can do this in
&lt;code&gt;application.rb&lt;/code&gt; with an initializer block:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;intializer &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;start queue consumer&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |app|
  app.queue_consumer = config.queue_consumer.start(app.queue)
  at_exit { app.queue.consumer.shutdown }
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and if we now push to our new queue:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Rails&lt;/span&gt;.queue.push(&lt;span class="constant"&gt;TestJob&lt;/span&gt;.new)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;...we get nothing. Why? Inspect the QueueConsumer:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Rails&lt;/span&gt;.application.queue_consumer
=&amp;gt; &lt;span class="comment"&gt;#&amp;lt;Rails::Queueing::ThreadedConsumer @queue=#&amp;lt;MyQueue @queue=[]&amp;gt;, @thread=#&amp;lt;Thread dead&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So you&amp;#39;ll notice that the thread is &lt;code&gt;dead&lt;/code&gt;. We can force the queue to
process by doing:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Rails&lt;/span&gt;.application.queue_consumer.start
=&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;I am running!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s back up to understand what is going on here. First we&amp;#39;ll start by looking at &lt;code&gt;ThreadedConsumer#start&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;start&lt;/span&gt;
  &lt;span class="instance-variable"&gt;@thread&lt;/span&gt; = &lt;span class="constant"&gt;Thread&lt;/span&gt;.new &lt;span class="keyword"&gt;do&lt;/span&gt;
    &lt;span class="keyword"&gt;while&lt;/span&gt; job = &lt;span class="instance-variable"&gt;@queue&lt;/span&gt;.pop
      &lt;span class="keyword"&gt;begin&lt;/span&gt;
        job.run
      &lt;span class="keyword"&gt;rescue&lt;/span&gt; &lt;span class="constant"&gt;Exception&lt;/span&gt; =&amp;gt; e
        handle_exception e
      &lt;span class="keyword"&gt;end&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="predefined-constant"&gt;self&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So this thread is only staying alive as long as the &lt;code&gt;@queue.pop&lt;/code&gt; returns a truthy value.
It&amp;#39;s not reasonable or us to keep shoving something into the queue, so let&amp;#39;s see what is happening 
in &lt;code&gt;Queue#pop&lt;/code&gt;. For this we&amp;#39;ll look at Rubinius&amp;#39; implementation&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# Retrieves data from the queue.  If the queue is empty, the calling thread is&lt;/span&gt;
&lt;span class="comment"&gt;# suspended until data is pushed onto the queue.  If +non_block+ is true, the&lt;/span&gt;
&lt;span class="comment"&gt;# thread isn't suspended, and an exception is raised.&lt;/span&gt;
&lt;span class="comment"&gt;#&lt;/span&gt;
&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;pop&lt;/span&gt;(non_block=&lt;span class="predefined-constant"&gt;false&lt;/span&gt;)
  &lt;span class="keyword"&gt;while&lt;/span&gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@mutex&lt;/span&gt;.synchronize &lt;span class="keyword"&gt;do&lt;/span&gt;
      &lt;span class="instance-variable"&gt;@waiting&lt;/span&gt;.delete(&lt;span class="constant"&gt;Thread&lt;/span&gt;.current)
      &lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="instance-variable"&gt;@que&lt;/span&gt;.empty?
        raise &lt;span class="constant"&gt;ThreadError&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;queue empty&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;if&lt;/span&gt; non_block
        &lt;span class="instance-variable"&gt;@waiting&lt;/span&gt;.push &lt;span class="constant"&gt;Thread&lt;/span&gt;.current
        &lt;span class="instance-variable"&gt;@resource&lt;/span&gt;.wait(&lt;span class="instance-variable"&gt;@mutex&lt;/span&gt;)
      &lt;span class="keyword"&gt;else&lt;/span&gt;
        retval = &lt;span class="instance-variable"&gt;@que&lt;/span&gt;.shift
        &lt;span class="instance-variable"&gt;@resource&lt;/span&gt;.signal
        &lt;span class="keyword"&gt;return&lt;/span&gt; retval
      &lt;span class="keyword"&gt;end&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This now starts to make sense. &lt;code&gt;Queue#pop&lt;/code&gt; is an infinite loop that will wait until it has
content before each iteration. Our simple &lt;code&gt;MyQueue&lt;/code&gt; class would return &lt;code&gt;nil&lt;/code&gt; when &lt;code&gt;ThreadConsumer#start&lt;/code&gt;
is called because there is nothing in the queue and the thread would die. Even if we put something in
queue it would pop once, run the job, try to pop againg, then die.&lt;/p&gt;

&lt;p&gt;For the sake of simplicity let&amp;#39;s just have &lt;code&gt;MyQueue&lt;/code&gt; inherit from
&lt;code&gt;Queue&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;MyQueue&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Queue&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we can run&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Rails&lt;/span&gt;.queue.push(&lt;span class="constant"&gt;TestJob&lt;/span&gt;.new)
=&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;I am running!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The queue system in Rails 4.0 is a very simple solution, I&amp;#39;m looking
forward to the release and the support for it to be added to many of the
leading background job processing libraries.&lt;/p&gt;

&lt;p&gt;Keep in mind that as of this writing the master branch is still
versioned as &amp;#39;beta&amp;#39;. This API could change.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Models, Views, and Controllers, Oh My!</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/training/2012/06/21/models-views-and-controllers-oh-my.html"/>
    <id>http://reefpoints.dockyard.com/training/2012/06/21/models-views-and-controllers-oh-my.html</id>
    <published>2012-06-21T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Amanda Cheung</name>
    </author>
    <summary>Getting started in Ruby on Rails</summary>
    <content type="html">&lt;p&gt;Eight days ago, I hardly had an idea of what &amp;quot;object-oriented&amp;quot; meant. The MVC framework was beyond me, and the thought of having to go in to the Command Line? Yikes. Since joining DockYard, I have been reading &amp;quot;Agile Web Development with Rails&amp;quot; to get a grasp on both Ruby and Rails. Having only coded in HTML, CSS and a bit of JavaScript prior to starting, my bearings were a bit shaken. But since stressing out is not for me, I said to myself, &amp;quot;Everyone was a beginner at one point,&amp;quot; and chugged along. Even though I didn&amp;#39;t fully understand the lines of code as I followed along with the book, I made sure I typed out the edits so I could at least get used to the syntax. With the help of my fellow DockYarders, it is all starting to come together. Needless to say, there were several hiccups. To name a couple, install and setting up my machine wasn&amp;#39;t a breeze. There was also an update to Rails that wasn&amp;#39;t included in the book (the mass-assignment feature) where an extra line of code was needed to make the app work.&lt;/p&gt;

&lt;p&gt;For those Ruby-beginners like me, don&amp;#39;t get discouraged! Getting stuck? A great place to come for help is at &lt;a href="http://bostonrb.org/"&gt;Boston Ruby Group&amp;#39;s Project Nights&lt;/a&gt; if you are in the Boston area.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Lessons Learned: The First Six Months of Running a Software Consultancy</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/opinion/2012/06/21/lessons-learned-six-month-of-running-dockyard.html"/>
    <id>http://reefpoints.dockyard.com/opinion/2012/06/21/lessons-learned-six-month-of-running-dockyard.html</id>
    <published>2012-06-21T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Brian talks about what has worked, what has not worked, and the changes that have been made at DockYard during its first six month</summary>
    <content type="html">&lt;p&gt;Before I get into it, I&amp;#39;m writing this because when I was first setting
out with DockYard there was little to no guidance. It seems that most
agencies are hush-hush on how they work internally. Or I just suck at
the Googles. In any event, I wanted to share our experience in the hope
that others can learn and give feedback.&lt;/p&gt;

&lt;h2&gt;Clients&lt;/h2&gt;

&lt;p&gt;Be selective! If your gut tells you something is wrong listen to it. I
made a huge mistake with taking our very first client and an even bigger
mistake about re-signing with said client. It ended ugly, I always felt
it might. The client was bad (no I won&amp;#39;t say who it was) and it really
put us in a very difficult position when we were getting started. I went
back to re-sign because the first contract ended in December. It turns
out December is a &lt;em&gt;terrible&lt;/em&gt; month for finding new work. I panicked,
rookie move. Thankfully we have had great clients since. That&amp;#39;s not to
say we haven&amp;#39;t had to dodge potentially bad clients from time to time.&lt;/p&gt;

&lt;p&gt;Some clients are just bad, but many are just &amp;quot;bad for us&amp;quot;. Those two
statements are very different and recognizing the difference is
important. &amp;quot;Bad for us&amp;quot; clients might be fantasic people but the
projects aren&amp;#39;t in our wheel house, in those cases I try my best to help
those people find other consultancies/freelancers.&lt;/p&gt;

&lt;h2&gt;Employees&lt;/h2&gt;

&lt;h3&gt;Salary&lt;/h3&gt;

&lt;p&gt;DockYard started as bringing together three freelance developers. The
first mistake I made was not insisting that everyone start on fulltime
salary. We were still paying out the full hourly rates then paying taxes
on top of that. Needless to say, accounting is not my strong point. It
took 2 months before I figured out why we weren&amp;#39;t making any money.
Whoops.&lt;/p&gt;

&lt;h3&gt;Process&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ve changed from the &amp;quot;anything goes&amp;quot; type boss to the &amp;quot;I&amp;#39;m going to be
the hard-ass&amp;quot; over the past six months. Here is why: we want to balance
multiple projects. Finding a client that has enough of a budget for a 6
person team is great but not very likely if we stick with startups. So
our team sizes are small, but we need to be redundant. I tell everyone
on my team that they &amp;quot;need to be replacable&amp;quot;. Don&amp;#39;t take this statement
the wrong way, I&amp;#39;m clear that this doesn&amp;#39;t mean they&amp;#39;re getting canned
at the drop of a hat. It means that I don&amp;#39;t want to be in a position
where someone gets sick, goes on vacation, or leaves for another
opportunity and we plug someone else into that project and it takes that
person a week to ramp up because we need to figure out what the last
person was doing. &lt;em&gt;Process is very important&lt;/em&gt;, I would rather have good
developers that buy into our process than have awesome developers that
don&amp;#39;t. We function best as a team. So when someone isn&amp;#39;t buying into the
process we&amp;#39;ve been outlining I need to be the guy that says &amp;quot;no&amp;quot;. A few times this
has turned into debates, sometimes into arguments. I&amp;#39;m willing to modify
our process if something better is proposed but I&amp;#39;m not willing to
switch into the &amp;quot;just get it done&amp;quot;. At the start I avoided uncomfortable conversations, 
if something was happening that I didn&amp;#39;t think was right for DockYard I would wait it out.
This was a bad idea, the best time to correct something is now. Today I 
am jumping on these things immediately. I would rather have an airing of grievances 
when the issue is small rather than let it blow up.&lt;/p&gt;

&lt;p&gt;Here are some things that, arguably, are
&lt;a href="http://en.wikipedia.org/wiki/Parkinson&amp;#x27;s_Law_of_Triviality"&gt;bikeshedding&lt;/a&gt;
but I have been insisting on:&lt;/p&gt;

&lt;h3&gt;The trivial&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Whitespace&lt;/li&gt;
&lt;li&gt;Single quotes instead of double quotes&lt;/li&gt;
&lt;li&gt;Verbose variable names&lt;/li&gt;
&lt;li&gt;Consistency between backend model names and HTML markup class names&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;The important&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Code quality&lt;/li&gt;
&lt;li&gt;CoffeeScript&lt;/li&gt;
&lt;li&gt;File/class naming conventions and organization&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Remotes&lt;/h3&gt;

&lt;p&gt;We started as entirely remote team. Angelo in Rhode Island, Russ in
Maine, and myself in Boston. This is OK but I must admit I&amp;#39;m not a big
fan of this. We have been hiring in Boston and will continue to grow a
team here.&lt;/p&gt;

&lt;h2&gt;Rates&lt;/h2&gt;

&lt;p&gt;We originally started at $120/hour. We have since moved to a flat
$4,000/week per developer. This buys the client about 32 hours of our
time.
This has been the single best change we&amp;#39;ve made. Keeping track of every
hours sucks, and I had to be on everyone&amp;#39;s ass making sure they got
their hours in. Now it is pretty simple. The clients also prefer this
system of invoicing, especially many of the large enterprise type
clients we are looking to go after.&lt;/p&gt;

&lt;p&gt;That being said, I think our rate is below our market value. I&amp;#39;ve spoken
with many other consultancies and the average seems to be $6k - 7k per
week for full stack (which we are). We are planning on raising our rates
to $5k in September then hopefully up to $6k by next year. It&amp;#39;s not that
I don&amp;#39;t think we are technically qualified to justify those rates yet,
its that I want to build out our portfolio first.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve noticed that many people don&amp;#39;t want to talk about money. I actually
don&amp;#39;t mind it, to the point that some people might find it annoying. In
order for the market to adjust properly I think an open discussion on
rates is necessary.&lt;/p&gt;

&lt;p&gt;I have also started telling potential clients our minimum project budget
($30k) before we get into any details of the engagement. Some might find
this off-putting. Here is my perspective: the client&amp;#39;s time is valuable
and I don&amp;#39;t want to waste their time. In most cases budget is a deciding
factor, let&amp;#39;s get that out into the open immediately rather than dealing
with surprises a month from now.&lt;/p&gt;

&lt;p&gt;We have reduced our rates to work on interesting projects. We&amp;#39;re nearly
done with a real-time chat app using an EventMachine backend with a
websocket front end. That was a fun one to build, we reduced our rate by
17% because of the client&amp;#39;s limited budget.&lt;/p&gt;

&lt;h2&gt;Business Development&lt;/h2&gt;

&lt;p&gt;This is something I have learned as I go. Not to toot my own horn but I
believe one of my strengths is selling DockYard as a business to
potential clients. Finding new clients has not been easy. Here are some
things that led directly to client contact (sorted by most effective):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing blog posts&lt;/li&gt;
&lt;li&gt;Giving presentations to general tech audiences (more beginners than
experts)&lt;/li&gt;
&lt;li&gt;LinkedIn&lt;/li&gt;
&lt;li&gt;Referrals&lt;/li&gt;
&lt;li&gt;Being found on Google&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LinkedIn?? Yeah, it actually worked. But I did something incredibly
douchey. I modified my LinkedIn profile to basically be an ad for
DockYard then I went to LinkedIn&amp;#39;s &amp;quot;People you may know&amp;quot; page and
clicked on over a thousand people. I got flagged for spamming but it
worked. Yes, I know it was a huge douchebag move. However, I suspected
that people would look at my profile to see if they knew me, or wanted
to be connected. If they happened to have a development need they would
contact me, if they didn&amp;#39;t they wouldn&amp;#39;t. At the very least I was
exposing DockYard to many people. I went from less than 100 LinkedIn
connections to close to 1000 in a week. We got two contracts from doing
this, it was worth it.&lt;/p&gt;

&lt;p&gt;Here are things that have not worked for us (yet)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Running Community Events&lt;/li&gt;
&lt;li&gt;Sponsoring&lt;/li&gt;
&lt;li&gt;Open Source Development (see the comments for some interesting debate on this topic)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I organize &lt;a href="http://bostonrb.org"&gt;BostonRB&lt;/a&gt;, it is one of the largest
Ruby user groups in the world. We have awesome speakers every month.
Every now and then when I talk shop with someone about work I get the
&amp;quot;I&amp;#39;m sure running BostonRB doesn&amp;#39;t hurt&amp;quot; with a wink. I find this
annoying. I&amp;#39;ve gone out of my way to make sure BostonRB doesn&amp;#39;t get
co-opted by any one company for promotional purposes. There is another
&amp;quot;Boston Rails Meetup&amp;quot; in Newton, MA that is essentially used to boost
SEO for another consultancy. I think this is bullshit. I&amp;#39;ll say it right
now: We have never been contacted by a client because of running
BostonRB. I&amp;#39;m not saying I would turn any down, but in my experience
running a user group is not driving clients to us.&lt;/p&gt;

&lt;p&gt;Now that I&amp;#39;m getting off my soapbox in the upcoming months DockYard will
be listed as a Sponsor for BostonRB, along with every other company that
is donating time, pizza, meeting space, etc...&lt;/p&gt;

&lt;p&gt;I&amp;#39;m a huge advocate for Open Source Development, but it also has very
poor ROI if your goal is to get clients. I believe there is a threshold
for this, if you&amp;#39;re on a certain tier (i.e. core committer to a popular
framework) it might be different.&lt;/p&gt;

&lt;h2&gt;Targeting Startups&lt;/h2&gt;

&lt;p&gt;On any given day people will hear me complain about startups. By their
very definition startups don&amp;#39;t have money. As a consultancy we are
looking to make money by engaging clients. If anybody tells you they&amp;#39;re
consulting because it is their passion or work with startups, they are
full of shit. This is a cash game. Demand is at an all time high, there
is a lot of opportunity to do well and work for yourself. While some of
the technology challenges startups present are very interesting I am
also running a business. This is why we have begun to favor enterprise.
We can get longer term contracts and these companies pay on time. The
downside is the technology is not terribly interesting.&lt;/p&gt;

&lt;p&gt;We are striving to find a balance here. I would be interested in hearing
others experience.&lt;/p&gt;

&lt;h2&gt;Doing Too Much&lt;/h2&gt;

&lt;p&gt;Right now I&amp;#39;m the guy wearing all of the hats. On any given day I&amp;#39;m
doign the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Biz development&lt;/li&gt;
&lt;li&gt;Marketing&lt;/li&gt;
&lt;li&gt;Lead Development&lt;/li&gt;
&lt;li&gt;Project Management&lt;/li&gt;
&lt;li&gt;Paying bills&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thankfully I haven&amp;#39;t burnt out yet but this cannot continue much longer.
The biggest mistake I have made over the first six months was not making
an early hire to take some of this load off. I must admit, this one
stumps me. I know how to hire a good developer, I know how to hire a
good designer. I have no idea how to hire for non-tech positions. We
have already hired a accountant to handle some of the larger items but
I&amp;#39;m still responsible for every day invoicing and book keeping. In my
mind, here are the priority hires:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Business developer. I have had light feelers out for this position
over the past few months. We really need someone focused on this
fulltime. Ideally someone that wants to hook into the startup community
in Boston or has existing sales relationships in the enterprise world.
Or if you happen to be in DC and have existing connection in the
political world we&amp;#39;d love to talk. &lt;a href="mailto:contact@dockyard.com"&gt;Contact
us&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Office manager. We will be moving into our own space in the Fall. At
that time we will be looking to fill this position.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More developers and designers.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Our Process&lt;/h2&gt;

&lt;p&gt;We have modified how to engage clients. This is what we are currently
doing&lt;/p&gt;

&lt;h3&gt;Initial Engagement&lt;/h3&gt;

&lt;p&gt;Phone call, get to know the client. Determine if we are a good fit. If
so and the client is happy with references, rate, etc... we move
forward.&lt;/p&gt;

&lt;h3&gt;Kick off&lt;/h3&gt;

&lt;p&gt;We charge for this. Currently it is $1000. We will sit down the client and
will run through what they want soup to nuts. We&amp;#39;ll have development and
design on hand for this meeting.&lt;/p&gt;

&lt;h3&gt;Design Phase&lt;/h3&gt;

&lt;p&gt;We originally combined development and design after the kickoff. This
was a mistake. There is a lot to be learned by doing an upfront design
phase. It helps us make informed estimations. The clients are happier
when we can deliver what we estimate. This phase we generally go for
wireframes and workflow. Nothing polished. We like to wireframe in
HTML/CSS.&lt;/p&gt;

&lt;h3&gt;Development Phase&lt;/h3&gt;

&lt;p&gt;Now that we have the general design worked out we begin development.
There will also be design done during this phase as well.&lt;/p&gt;

&lt;p&gt;I would love to hear about other processes. What works, what doesn&amp;#39;t
work.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope some peope find this information useful. Please feel free to ask
any questions or if you need me to elaborate on anything. If you feel
I&amp;#39;m off the mark or have suggestions feel free to comment as well. We&amp;#39;re
always looking to improve.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>postgres_ext: Adding Postgres data types to Rails</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/06/18/postgres_ext-adding-postgres-data-types-to-active-record.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/06/18/postgres_ext-adding-postgres-data-types-to-active-record.html</id>
    <published>2012-06-18T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>Announcing postgres_ext, a gem that adds support for PostgreSQL data types to ActiveRecord</summary>
    <content type="html">&lt;p&gt;Over the past few weeks, I have been working on a new gem which adds
support to Rail&amp;#39;s ActiveRecord for PostgreSQL&amp;#39;s native data types. I am
happy to announce that I have released the
&lt;a href="https://github.com/dockyard/postgres_ext"&gt;postgres_ext&lt;/a&gt; gem.&lt;/p&gt;

&lt;p&gt;postgres_ext supports for ActiveRecord version 3.2 and above (at this
time). Parallel to my development, I plan to submit pull request to
Rails master, so that postgres_ext will not be needed in Rails 4.0.&lt;/p&gt;

&lt;h2&gt;Features&lt;/h2&gt;

&lt;h3&gt;Migration/Schema support&lt;/h3&gt;

&lt;p&gt;postgres_ext adds migration and &lt;code&gt;schema.rb&lt;/code&gt; support for the following
PostgresSQL type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;INET&lt;/li&gt;
&lt;li&gt;CIDR&lt;/li&gt;
&lt;li&gt;MACADDR&lt;/li&gt;
&lt;li&gt;UUID&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can create columns with the following migration methods:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;create_table &lt;span class="symbol"&gt;:examples&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
  t.inet &lt;span class="symbol"&gt;:ip_address&lt;/span&gt;
  &lt;span class="comment"&gt;# INET Column&lt;/span&gt;

  t.cidr &lt;span class="symbol"&gt;:subnet&lt;/span&gt;
  &lt;span class="comment"&gt;# CIDR Column&lt;/span&gt;

  t.macaddr &lt;span class="symbol"&gt;:mac_address&lt;/span&gt;
  &lt;span class="comment"&gt;# MACADDR Column&lt;/span&gt;

  t.uuid &lt;span class="symbol"&gt;:unique_id&lt;/span&gt;
  &lt;span class="comment"&gt;# UUID Column&lt;/span&gt;

  t.integer &lt;span class="symbol"&gt;:int_array&lt;/span&gt;, &lt;span class="symbol"&gt;:array&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  &lt;span class="comment"&gt;# Integer[] Column&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;These migrations will be captured in your &lt;code&gt;schema.rb&lt;/code&gt; file, so you don&amp;#39;t
have to use the &lt;code&gt;structure.sql&lt;/code&gt; file if these types are your only reason. In
fact, if you are using these only supported types with &lt;code&gt;structure.sql&lt;/code&gt;,
including the postgres_ext gem should allow you to correctly &lt;code&gt;rake
db:schema:dump&lt;/code&gt; your database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/dockyard/postgres_ext#migrationschemarb-support"&gt;Migration/Schema.rb support documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Type Casting&lt;/h3&gt;

&lt;p&gt;postgres_ext converts INET and CIDR values to
&lt;a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/ipaddr/rdoc/IPAddr.html"&gt;IPAddr&lt;/a&gt; instances,
 and coverts arrays to array objects of the column type (integer arrays
are cast as an array of integers, INET arrays to are cast to an array of
IPAddrs).&lt;/p&gt;

&lt;h3&gt;INET Type Casting example&lt;/h3&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;create_table &lt;span class="symbol"&gt;:inet_examples&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
  t.inet &lt;span class="symbol"&gt;:ip_address&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;InetExample&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

inetExample = &lt;span class="constant"&gt;InetExample&lt;/span&gt;.new
inetExample.ip_address = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;127.0.0.0/24&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
inetExample.ip_address
&lt;span class="comment"&gt;# =&amp;gt; #&amp;lt;IPAddr: IPv4:127.0.0.0/255.255.255.0&amp;gt;&lt;/span&gt;
inetExample.save

inet_2 = &lt;span class="constant"&gt;InetExample&lt;/span&gt;.first
inet_2.ip_address
&lt;span class="comment"&gt;# =&amp;gt; #&amp;lt;IPAddr: IPv4:127.0.0.0/255.255.255.0&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Array Type Casting example&lt;/h3&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;create_table &lt;span class="symbol"&gt;:people&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
  t.integer &lt;span class="symbol"&gt;:favorite_numbers&lt;/span&gt;, &lt;span class="symbol"&gt;:array&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Person&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

person = &lt;span class="constant"&gt;Person&lt;/span&gt;.new
person.favorite_numbers = [&lt;span class="integer"&gt;1&lt;/span&gt;,&lt;span class="integer"&gt;2&lt;/span&gt;,&lt;span class="integer"&gt;3&lt;/span&gt;]
person.favorite_numbers
&lt;span class="comment"&gt;# =&amp;gt; [1,2,3]&lt;/span&gt;
person.save

person_2 = &lt;span class="constant"&gt;Person&lt;/span&gt;.first
person_2.favoite_numbers
&lt;span class="comment"&gt;# =&amp;gt; [1,2,3]&lt;/span&gt;
person_2.favoite_numbers.first.class
&lt;span class="comment"&gt;# =&amp;gt; Fixnum&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://github.com/dockyard/postgres_ext#type-casting-support"&gt;Type casting documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Another gem born out of necessity&lt;/h2&gt;

&lt;p&gt;I have also released
&lt;a href="https://github.com/dockyard/pg_array_parser"&gt;pg_array_parser&lt;/a&gt;, a C
extension which parses PostgreSQL array values and returns an array of
strings.  This gem is used by postgres_ext to retrieve the array values
before casting them to the required type.&lt;/p&gt;

&lt;h2&gt;Plans for postgres_ext&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://reefpoints.dockyard.com/ruby/2012/05/18/rails-4-sneak-peek-expanded-activerecord-support-for-postgresql-datatype.html"&gt;INET, CIDR and MACADDR support has already been added to Rails 4.&lt;/a&gt;
My next step is to submit a pull request to add UUID migration support
and Array support to Rails master.  Then I plan to backport Rails 4&amp;#39;s
hstore support back to postgres_ext. After adding support for the other
PostgreSQL types, I plan to add support to arel for PostgreSQL type
specific where clauses (ie ANY for array comparison, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; for
INET and CIDR comparisons.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Amanda Cheung is a DockYarder!</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2012/06/14/amanda-cheung-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2012/06/14/amanda-cheung-is-a-dockyarder.html</id>
    <published>2012-06-14T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>DockYard welcomes Amanda Cheung</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/amanda-cheung.jpg" alt="Amanda Cheung"&gt;&lt;/p&gt;

&lt;p&gt;Yesterday was Amanda&amp;#39;s first day with DockYard, she joins our growing
team as a designer with a desire to develop. She brings excellent design
skills and much needed illustration skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://acacheung.com"&gt;Please take a moment to check out her portfolio&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>BostonRB Goes Live</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/06/11/bostonrb-goes-live.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/06/11/bostonrb-goes-live.html</id>
    <published>2012-06-11T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Live streaming and expansion comes to BostonRB</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/bostonrb.png" alt="BostonRB"&gt;&lt;/p&gt;

&lt;p&gt;Starting tomorrow night (June 12th, 2012) &lt;a href="http://bostonrb.org"&gt;The Boston Ruby Group&lt;/a&gt;
will be streaming its monthly meeting live via &lt;a href="http://googleblog.blogspot.com/2012/05/google-hangouts-on-air-broadcast-your.html"&gt;Google Hangouts on Air&lt;/a&gt;
The streaming will start at 6:45 PM US Eastern Time and the meeting itself will start at 7pm or a few minutes after. The meeting should run until 9pm.&lt;/p&gt;

&lt;p&gt;This will allow those that cannot attend the meeting to watch the raw
stream live from anywhere in the world on &lt;a href="http://youtube.com"&gt;YouTube&lt;/a&gt;.
We will also reserve a few seats in the Google Hangout itself for other
user groups in the New England area to join. Questions will be allowed from
these user groups after each presentation just as any
audience member will be able to.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re very excited about using this technology to expand
&lt;a href="http://bostonrb.org"&gt;BostonRB&lt;/a&gt;. If things go well we will want to
invite more user groups to virtually attend our meetings in the future.
If you are an organizer of a small local group and have difficulty
pulling in some of the larger names in the Ruby community for
presentations we want you to leverage BostonRB.&lt;/p&gt;

&lt;p&gt;In addition, even though Boston is a great tech-hub we still are far
enough away where it is difficult for some presenters to travel. We
would like to invite presenters to BostonRB to present their material
via Google Hangouts.&lt;/p&gt;

&lt;p&gt;In the coming months we plan on using the Google Hangouts technology in
new ways to reach out to our community. Imagine having live office hours
where local expert Ruby devs can answer questions. Or online classes
where students can follow along. We understand that getting to some of our
events can be difficult or even intimidating. Now we can eliminate that
barrier.&lt;/p&gt;

&lt;p&gt;So please follow the &lt;a href="http://twitter.com/BostonRB"&gt;BostonRB Twitter Account&lt;/a&gt;. Tomorrow night
we&amp;#39;ll tweet the link to the live stream. We&amp;#39;ll also embed the YouTube player
onto the BostonRB homepage. In the future we&amp;#39;ll be making other very
cool announcements as well.&lt;/p&gt;

&lt;p&gt;As always, if you are in Boston we &lt;a href="http://guestlistapp.com/events/107814"&gt;invite you come to the meeting&lt;/a&gt;
and if you are not in Boston or cannot make it you now have a new
option.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Chris Gill is a DockYarder</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2012/06/01/chris-gill-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2012/06/01/chris-gill-is-a-dockyarder.html</id>
    <published>2012-06-01T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>DockYard welcomes Chris Gill</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/chris-gill.png" alt="Chris Gill"&gt;&lt;/p&gt;

&lt;p&gt;Today I&amp;#39;m happy to announce that Chris Gill is joining our team!
Chris and I worked together at the &lt;a href="http://dnc.org"&gt;DNC&lt;/a&gt; and I credit
him with sparking my interest in &lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chris&amp;#39; pragmatic approach to software development and his years of
experience in politics is a huge addition to our growing team. He is
located in DC and we hope to soon build out a team in that area.&lt;/p&gt;

&lt;p&gt;Welcome aboard Chris!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/gilltots"&gt;Follow Chris on Twitter&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rails 4.0 Sneak Peek: Expanded ActiveRecord Support for PostgreSQL Datatypes</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/05/18/rails-4-sneak-peek-expanded-activerecord-support-for-postgresql-datatype.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/05/18/rails-4-sneak-peek-expanded-activerecord-support-for-postgresql-datatype.html</id>
    <published>2012-05-18T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>Support added to ActiveRecord for INET, CIDR and MACADDR types for PostgreSQL</summary>
    <content type="html">&lt;p&gt;This week, I had a &lt;a href="https://github.com/rails/rails/commit/835df6f3ed9b1575fd6a1fb62516d8ebeffbf114#diff-0"&gt;pull request accepted&lt;/a&gt;
into Rails which adds support for
&lt;a href="http://www.postgresql.org/docs/current/static/datatype-net-types.html"&gt;PostgreSQL&amp;#39;s MACADDR, INET, and CIDR datatypes&lt;/a&gt;.
In Rails 4.0, the following migration will be supported:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;create_table &lt;span class="symbol"&gt;:network_types&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
  t.cidr &lt;span class="symbol"&gt;:cidr_address&lt;/span&gt;
  t.inet &lt;span class="symbol"&gt;:ip_address&lt;/span&gt;
  t.macaddr &lt;span class="symbol"&gt;:mac_address&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Also, the schema dumper supports these types as well (previously they
would appear as &lt;code&gt;string&lt;/code&gt; types in the schema.rb file).&lt;/p&gt;

&lt;p&gt;ActiveRecord will also cast the values of the INET and CIDR types to
Ruby&amp;#39;s &lt;a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/ipaddr/rdoc/IPAddr.html"&gt;IPAddr&lt;/a&gt;,
while MACADDR will continue to be converted to a string.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sleep helper for your request tests</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/05/01/simple-sleeper-for-request-testing.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/05/01/simple-sleeper-for-request-testing.html</id>
    <published>2012-05-01T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>A clean helper for giving visual feedback on long sleeps in your request tests</summary>
    <content type="html">&lt;p&gt;We have been using &lt;a href="http://github.com/thoughtbot/capybara-webkit"&gt;capybara-webkit&lt;/a&gt; quite a bit.
Because of the async nature of JavaScript you sometimes have to use
&lt;a href="http://rubydoc.org/stdlib/core/1.9.2/Kernel#sleep-instance_method"&gt;sleeps&lt;/a&gt; in your tests if the action is taking longer than the default
Capybara 2 second timeout.&lt;/p&gt;

&lt;p&gt;Lately I have had the need to sleep for up to 30
seconds for certain actions and I wanted a clean visual indicator of how
much time was remaining. So I whipped up the following:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;sleep_for&lt;/span&gt;(sleep_time, message = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Sleeping...&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
  sleep_time.times &lt;span class="keyword"&gt;do&lt;/span&gt; |i|
    print_message = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;message&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;sleep_time - i&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; seconds remaining&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    print print_message
    sleep &lt;span class="integer"&gt;1&lt;/span&gt;
    print [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="char"&gt;\b&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="char"&gt;\b&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;].map { |c| c * print_message.length }.join
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I hope others find this useful!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using Backbone Views With Rails jQuery-ujs</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/javascript/2012/04/16/using-backbone-views-with-rails-jquery-ujs.html"/>
    <id>http://reefpoints.dockyard.com/javascript/2012/04/16/using-backbone-views-with-rails-jquery-ujs.html</id>
    <published>2012-04-16T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Russ Jones</name>
    </author>
    <summary>Throwing them together in a way that makes sense.</summary>
    <content type="html">&lt;p&gt;I often meet Rails developers that have unwittingly jumped on the unobtrusive javascript bandwagon. 
They throw &amp;#39;:remote =&amp;gt; true&amp;#39; on a form and benefit from its conventions, but don&amp;#39;t know how to make it really work for them. 
They&amp;#39;re probably still inclined to write out procedural jQuery code the same way they were doing it before &lt;a href="https://github.com/rails/jquery-ujs"&gt;jquery-ujs&lt;/a&gt; became popular. 
There&amp;#39;s a helpful &lt;a href="https://github.com/rails/jquery-ujs/wiki/ajax"&gt;wiki page&lt;/a&gt; that describes its custom events and how to use them, but they probably don&amp;#39;t know about it.&lt;/p&gt;

&lt;p&gt;Maybe they&amp;#39;ve worked on improving some client side code with Backbone recently, and maybe they&amp;#39;re trying to do things the Backbone way but don&amp;#39;t know how to tie that together with existing Rails views. 
Here&amp;#39;s a quick example of how Backbone views can listen for jquery-ujs custom events. You can view a working fiddle &lt;a href="http://jsfiddle.net/codeofficer/mpyXT/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
56
57
58
59
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; FormView = Backbone.View.extend({
  &lt;span class="key"&gt;el&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#form&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,

  &lt;span class="key"&gt;events&lt;/span&gt;: {
    &lt;span class="comment"&gt;// Fired automatically when a file-type input is detected with a&lt;/span&gt;
    &lt;span class="comment"&gt;// non-blank value. You can use this hook to implement a handler that&lt;/span&gt;
    &lt;span class="comment"&gt;// will deal with those non-blank file inputs. Returning false will&lt;/span&gt;
    &lt;span class="comment"&gt;// disallow standard form submission.&lt;/span&gt;
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajax:aborted:file&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;     : &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajaxAbortedFile&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,

    &lt;span class="comment"&gt;// Fired when there are required inputs which have been left blank.&lt;/span&gt;
    &lt;span class="comment"&gt;// You can use this handler to deal with those blank required inputs.&lt;/span&gt;
    &lt;span class="comment"&gt;// Returning false will submit the form anyway.&lt;/span&gt;
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajax:aborted:required&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; : &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajaxAbortedRequired&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,

    &lt;span class="comment"&gt;// First event fired for any remote enabled form. Stopping this event&lt;/span&gt;
    &lt;span class="comment"&gt;// will cancel the ajax request&lt;/span&gt;
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajax:before&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;           : &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajaxBefore&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,

    &lt;span class="comment"&gt;// Fired before the ajax request is sent. Stopping this event will&lt;/span&gt;
    &lt;span class="comment"&gt;// cancel the ajax request. Commonly used to customize certain request&lt;/span&gt;
    &lt;span class="comment"&gt;// headers&lt;/span&gt;
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajax:beforeSend&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;       : &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajaxBeforeSend&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,

    &lt;span class="comment"&gt;// Fired after completion, if the HTTP response was a success&lt;/span&gt;
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajax:success&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;          : &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajaxSuccess&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,

    &lt;span class="comment"&gt;// Fired after completion, if the server returned an error&lt;/span&gt;
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajax:error&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;            : &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajaxError&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,

    &lt;span class="comment"&gt;// Fired after the request has been completed, no matter what outcome&lt;/span&gt;
    &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajax:complete&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;         : &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ajaxComplete&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  },

  &lt;span class="function"&gt;ajaxAbortedFile&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(e, elements){
  },

  &lt;span class="function"&gt;ajaxAbortedRequired&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(e, elements){
  },

  &lt;span class="function"&gt;ajaxBefore&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(e){
  },

  &lt;span class="function"&gt;ajaxBeforeSend&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(e, xhr, settings){
  },

  &lt;span class="function"&gt;ajaxSuccess&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(e, data, status, xhr){
  },

  &lt;span class="function"&gt;ajaxError&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(e, xhr, status, error){
  },

  &lt;span class="function"&gt;ajaxComplete&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(e, xhr, status){
  }
});

&lt;span class="predefined"&gt;$&lt;/span&gt;(&lt;span class="keyword"&gt;function&lt;/span&gt;(){
    window.view = &lt;span class="keyword"&gt;new&lt;/span&gt; FormView();
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight text "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;lt;form id=&amp;quot;form&amp;quot; action=&amp;quot;#&amp;quot; method=&amp;quot;POST&amp;quot; data-remote=&amp;quot;true&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; value=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Continue &amp;amp;rarr;&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Tmux, for fun and profit</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/04/10/tmux-for-fun-and-profit.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/04/10/tmux-for-fun-and-profit.html</id>
    <published>2012-04-10T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>Pair programming at distance</summary>
    <content type="html">&lt;h2&gt;Screen - the gateway drug&lt;/h2&gt;

&lt;p&gt;I had been using &lt;a href="http://www.gnu.org/software/screen"&gt;screen&lt;/a&gt; for a while to multiplex my terminal when
working on Ruby projects.  I would have a tab for
&lt;a href="http://git-scm.org"&gt;git&lt;/a&gt; (was using &lt;a href="http://code.google.com/p/macvim/"&gt;MacVim&lt;/a&gt;), on for &lt;code&gt;rails s&lt;/code&gt; or &lt;code&gt;tail
log/development.log&lt;/code&gt;, one for running tests (now using &lt;code&gt;guard&lt;/code&gt; or
&lt;code&gt;autotest&lt;/code&gt;), one for &lt;code&gt;rails c&lt;/code&gt; and lastly one for &lt;code&gt;rails db&lt;/code&gt;. Detaching
from a screen session allowed me to have a full environment running
until my next reboot, I could switch back into the project quickly, and
I had configured my &lt;code&gt;.screenrc&lt;/code&gt; to open these tabs everytime I started
screen.&lt;/p&gt;

&lt;p&gt;I also utilized screen to keep sessions open on a remote server between
SSH connects. Instantiating a screen session on the remote server
would keep processes running even when my SSH connection would get
killed. This would prevent an &lt;code&gt;apt-get upgrade&lt;/code&gt; from fragging the system
incase I disconnected, or allow me to drop the connection during a long
running process.&lt;/p&gt;

&lt;p&gt;As much as I used it, I was still a screen newb, as my &lt;code&gt;.screenrc&lt;/code&gt; was
pretty vanilla. I hadn&amp;#39;t taken the time to read the man
pages/tutorials out there to understand some of the more subtle
features.&lt;/p&gt;

&lt;h2&gt;Tmux and Brian P. Hogan&amp;#39;s &amp;#39;tmux&amp;#39; book&lt;/h2&gt;

&lt;p&gt;I had noticed that &lt;a href="http://tmux.sourceforge.net"&gt;tmux&lt;/a&gt; was getting a decent amount of attention, so
when I started at DockYard, I told myself I would only use tmux.  I also
switched from MacVim to terminal vim, which works better when pair
programming.  &lt;a href="http://www.bphogan.com"&gt;Brian P. Hogan&lt;/a&gt; recently wrote
&lt;a href="http://pragprog.com/book/bhtmux/tmux"&gt;tmux: Productive Mouse-Free Development&lt;/a&gt; for Pragmatic Programmers.  After reading his book, I have a solid &lt;code&gt;.tmux.conf&lt;/code&gt; and a great understanding of tmux.&lt;/p&gt;

&lt;h2&gt;Tmux and Pair Programming&lt;/h2&gt;

&lt;p&gt;The one disadvantage of everyone at DockYard working remotely is that you can&amp;#39;t
just turn around and ask someone to come to your desk to pair up. Tmux
allows multiple users to connect to a specific session.  With a bit of
&lt;a href="http://en.wikipedia.org/wiki/Dynamic_DNS"&gt;dynamic DNS&lt;/a&gt; magic, port forwarding, and ssh tunneling, multiple people
can connect to the same tmux session, work in the same vim window, and
see the same development server.&lt;/p&gt;

&lt;p&gt;The first step is dynamic DNS and port forwarding, which I won&amp;#39;t cover
here, since everyone has different modems and routers. You want to
forward port 22 through your router/firewall to your development
machine. Using dynamic DNS, you can connect to your coworkers via a
domain like &lt;code&gt;dan.example.com&lt;/code&gt; instead of figuring out your IP and
sending that to your partner.&lt;/p&gt;

&lt;p&gt;We use the following ssh command to forward connection on our local
machine to the other person&amp;#39;s&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ssh dan.example.com -L 3000:127.0.0.1:3000
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above command forwards any request on port 3000 on my machine the
one to which I am connected. That way, I can see what my partner sees
when we edit files on his machine.  Once connected, I just attach to my
partner&amp;#39;s tmux session.  At this point, we are programming in the same
terminal session, and we can both see the edits as we make them.  We use
a Google+ Hangout to communicate while we pair program.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;With a tmux, ssh port forwarding, and Google+ Hangout, you can create a
useful pair programming environment with your remote coworkers.  We find
this setup very effective and use it often to work together and tackle
an issue.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Use Association Extensions to Build Join Attributes on a HMT</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/04/03/use-association-extensions-to-build-join-attributes-on-a-hmt.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/04/03/use-association-extensions-to-build-join-attributes-on-a-hmt.html</id>
    <published>2012-04-03T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Russ Jones</name>
    </author>
    <summary>Russ lays down a use case for ActiveRecord association extensions</summary>
    <content type="html">&lt;p&gt;It&amp;#39;s common in Rails to use a &lt;code&gt;has_many :through&lt;/code&gt; relationship to model User/Group Memberships. 
Sometimes we have extra data in the join that we would like to make use of, but getting that 
data in there can be combersome depending on our approach. For example, given the
following diagram and schema:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/diagram.png" alt="Diagram"&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Schema&lt;/span&gt;.define(&lt;span class="symbol"&gt;:version&lt;/span&gt; =&amp;gt; &lt;span class="integer"&gt;20120324170519&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
  create_table &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;groups&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:force&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
    t.string   &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    t.datetime &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;created_at&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:null&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;false&lt;/span&gt;
    t.datetime &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;updated_at&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:null&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;false&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  create_table &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;memberships&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:force&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
    t.integer  &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;user_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    t.integer  &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;group_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    t.string   &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;role&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    t.datetime &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;created_at&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:null&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;false&lt;/span&gt;
    t.datetime &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;updated_at&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:null&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;false&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  create_table &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:force&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt; |t|
    t.string   &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    t.datetime &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;created_at&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:null&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;false&lt;/span&gt;
    t.datetime &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;updated_at&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:null&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;false&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We might deal directly with the join table to assign our additonal data.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="instance-variable"&gt;@user&lt;/span&gt; = &lt;span class="constant"&gt;User&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;User 1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="instance-variable"&gt;@user&lt;/span&gt; = &lt;span class="constant"&gt;Group&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Group 1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="instance-variable"&gt;@membership&lt;/span&gt; = &lt;span class="constant"&gt;Membership&lt;/span&gt;.create &lt;span class="keyword"&gt;do&lt;/span&gt; |m|
  m.user = &lt;span class="instance-variable"&gt;@user&lt;/span&gt;
  m.group = &lt;span class="instance-variable"&gt;@group&lt;/span&gt;
  m.role = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;admin&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="instance-variable"&gt;@user&lt;/span&gt;.admin? &lt;span class="comment"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class="instance-variable"&gt;@user&lt;/span&gt;.editor? &lt;span class="comment"&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There&amp;#39;s a better way to pull this off ...&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="instance-variable"&gt;@group&lt;/span&gt;.admins &amp;lt;&amp;lt; &lt;span class="instance-variable"&gt;@user&lt;/span&gt;
&lt;span class="instance-variable"&gt;@user&lt;/span&gt;.admin? &lt;span class="comment"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class="instance-variable"&gt;@user&lt;/span&gt;.editor? &lt;span class="comment"&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And this is how it&amp;#39;s done ...&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;User&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  has_many &lt;span class="symbol"&gt;:memberships&lt;/span&gt;
  has_many &lt;span class="symbol"&gt;:groups&lt;/span&gt;, &lt;span class="symbol"&gt;:through&lt;/span&gt; =&amp;gt; &lt;span class="symbol"&gt;:memberships&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;admin?&lt;/span&gt;
    memberships.where(&lt;span class="symbol"&gt;:role&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;admin&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).first
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;editor?&lt;/span&gt;
    memberships.where(&lt;span class="symbol"&gt;:role&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;editor&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).first
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Membership&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  belongs_to &lt;span class="symbol"&gt;:group&lt;/span&gt;
  belongs_to &lt;span class="symbol"&gt;:user&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Group&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  has_many &lt;span class="symbol"&gt;:memberships&lt;/span&gt;
  has_many &lt;span class="symbol"&gt;:users&lt;/span&gt;, &lt;span class="symbol"&gt;:through&lt;/span&gt; =&amp;gt; &lt;span class="symbol"&gt;:memberships&lt;/span&gt;

  has_many &lt;span class="symbol"&gt;:admins&lt;/span&gt;, &lt;span class="symbol"&gt;:through&lt;/span&gt; =&amp;gt; &lt;span class="symbol"&gt;:memberships&lt;/span&gt;, &lt;span class="symbol"&gt;:source&lt;/span&gt; =&amp;gt; &lt;span class="symbol"&gt;:user&lt;/span&gt;,
    &lt;span class="symbol"&gt;:conditions&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;memberships.role = 'admin'&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
      &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;&amp;lt;&amp;lt;&lt;/span&gt;(admin)
        proxy_association.owner.memberships.create(&lt;span class="symbol"&gt;:role&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;admin&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:user&lt;/span&gt; =&amp;gt; admin)
      &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  has_many &lt;span class="symbol"&gt;:editors&lt;/span&gt;, &lt;span class="symbol"&gt;:through&lt;/span&gt; =&amp;gt; &lt;span class="symbol"&gt;:memberships&lt;/span&gt;, &lt;span class="symbol"&gt;:source&lt;/span&gt; =&amp;gt; &lt;span class="symbol"&gt;:user&lt;/span&gt;,
    &lt;span class="symbol"&gt;:conditions&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;memberships.role = 'editor'&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
      &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;&amp;lt;&amp;lt;&lt;/span&gt;(editor)
        proxy_association.owner.memberships.create(&lt;span class="symbol"&gt;:role&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;editor&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:user&lt;/span&gt; =&amp;gt; editor)
      &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We&amp;#39;re defining an extension on our group&amp;#39;s &lt;code&gt;has_many&lt;/code&gt; association which overrides
the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; method on that collection. We then tell the proxy association&amp;#39;s owner
(which is our group object) to create the user/group join record, but with an additional
role assignment of &amp;#39;admin&amp;#39;.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="instance-variable"&gt;@group&lt;/span&gt;.admins &amp;lt;&amp;lt; &lt;span class="instance-variable"&gt;@user&lt;/span&gt;
&lt;span class="instance-variable"&gt;@user&lt;/span&gt;.admin? &lt;span class="comment"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class="instance-variable"&gt;@user&lt;/span&gt;.editor? &lt;span class="comment"&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Pretty expressive, thanks to ActiveRecord!&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test_helper&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;GroupTest&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveSupport&lt;/span&gt;::&lt;span class="constant"&gt;TestCase&lt;/span&gt;
  setup &lt;span class="keyword"&gt;do&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@user_1&lt;/span&gt; = &lt;span class="constant"&gt;User&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;User 1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="instance-variable"&gt;@user_2&lt;/span&gt; = &lt;span class="constant"&gt;User&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;User 2&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="instance-variable"&gt;@user_3&lt;/span&gt; = &lt;span class="constant"&gt;User&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;User 3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="instance-variable"&gt;@group&lt;/span&gt; = &lt;span class="constant"&gt;Group&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Group 1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  test &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;No Memberships&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    assert_equal &lt;span class="instance-variable"&gt;@user_1&lt;/span&gt;.memberships.count, &lt;span class="integer"&gt;0&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  test &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;@group.users &amp;lt;&amp;lt; @user_1 sets nil role on membership&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@group&lt;/span&gt;.users &amp;lt;&amp;lt; &lt;span class="instance-variable"&gt;@user_1&lt;/span&gt;
    assert_equal &lt;span class="instance-variable"&gt;@user_1&lt;/span&gt;.memberships.count, &lt;span class="integer"&gt;1&lt;/span&gt;
    assert_equal &lt;span class="instance-variable"&gt;@user_1&lt;/span&gt;.memberships.first.role, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  test &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;@group.admins &amp;lt;&amp;lt; @user_2 sets 'admin' role on membership&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@group&lt;/span&gt;.admins &amp;lt;&amp;lt; &lt;span class="instance-variable"&gt;@user_2&lt;/span&gt;
    assert_equal &lt;span class="instance-variable"&gt;@user_2&lt;/span&gt;.memberships.count, &lt;span class="integer"&gt;1&lt;/span&gt;
    assert_equal &lt;span class="instance-variable"&gt;@user_2&lt;/span&gt;.memberships.first.role, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;admin&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  test &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;@group.editors &amp;lt;&amp;lt; @user_3 sets 'editor' role on membership&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@group&lt;/span&gt;.editors &amp;lt;&amp;lt; &lt;span class="instance-variable"&gt;@user_3&lt;/span&gt;
    assert_equal &lt;span class="instance-variable"&gt;@user_3&lt;/span&gt;.memberships.count, &lt;span class="integer"&gt;1&lt;/span&gt;
    assert_equal &lt;span class="instance-variable"&gt;@user_3&lt;/span&gt;.memberships.first.role, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;editor&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  teardown &lt;span class="keyword"&gt;do&lt;/span&gt;
    &lt;span class="constant"&gt;User&lt;/span&gt;.delete_all
    &lt;span class="constant"&gt;Group&lt;/span&gt;.delete_all
    &lt;span class="constant"&gt;Membership&lt;/span&gt;.delete_all
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Our Continuous Integration Setup</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/03/05/our-ci-setup.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/03/05/our-ci-setup.html</id>
    <published>2012-03-05T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Dan McClain</name>
    </author>
    <summary>What we are doing to keep our developers honest with their tests</summary>
    <content type="html">&lt;p&gt;When I started at DockYard, Brian tasked me with setting up a continous
integration (CI) server so that we could keep an eye on our RSpec test
suite. We went with Jenkins since we are writing client code, so
&lt;a href="http://travis-ci.org"&gt;travis-ci.org&lt;/a&gt; is out of the question (for now).&lt;/p&gt;

&lt;p&gt;Our CI server is running on Ubuntu 10.04. We are using nginx as a
reverse proxy infront of our Jenkins server. Our basic setup is the same
as &lt;a href="http://bostonrb.org/presentations/jenkins-rails"&gt;the presentation I gave at Boston RB in January&lt;/a&gt;.
There are a few upgrades I have made since then.  First, I set up the
GitHub authentication plugin. The other plugin I installed was the
Campfire notification plugin. Since we are all remote, we use Campfire
as our main line of communication. Having Jenkins notify us in Campfire
allows us to see when new code is pushed to master, and when someone
breaks the build.&lt;/p&gt;

&lt;h2&gt;RSpec HTML formatter + Jenkins = Every Build is successful (even when it isn&amp;#39;t)&lt;/h2&gt;

&lt;p&gt;As we found out the hard way, using the RSpec HTML formatter from within
jenkins is not the best idea.  The problem is the HTML formatter returns
the same exit code regardless of whether or not the suite passes. This
is a huge problem, as you end up with false positives.&lt;/p&gt;

&lt;h2&gt;Enter ci_reporter&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/nicksieger/ci_reporter"&gt;ci_reporter&lt;/a&gt; gem provides a rake
task that generates a set of xml reports that Jenkins can interpret and
give us a more complete picture of our test suite. Jenkins will plot the
number of failure over time, display test duration, and provide a number 
of other stats you can utilize. &lt;/p&gt;

&lt;h2&gt;Capybara-webkit + Xvfb + headless = Javascript without opening a browser&lt;/h2&gt;

&lt;p&gt;We are using capybara to run our &lt;a href="http://railscasts.com/episodes/257-request-specs-and-capybara"&gt;request
specs&lt;/a&gt;.
When our request spec needs javascript, we use 
&lt;a href="https://github.com/thoughtbot/capybara-webkit"&gt;Capybara-webkit&lt;/a&gt; as our
javascript driver. Capybara-webkit is a
webkit capybara driver, allowing you to run javascript in a headless
webkit instance.  It accomplishes this by using QtWebKit. On Ubuntu, to
utilize capybara-webkit, you need an X Server running when you run your
test.  To accomplish this, I installed Xvfb, which will create a
virtual framebuffer.  To instantiate xvfb, I used the headless
gem, which is a ruby wrapper for xvfb.  With headless, I don&amp;#39;t have to
do any bash scripting to get a framebuffer ready before we run our
tests. &lt;/p&gt;

&lt;p&gt;I added the following code to our &lt;code&gt;spec_helper.rb&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;config.before(&lt;span class="symbol"&gt;:suite&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
  &lt;span class="instance-variable"&gt;@headless&lt;/span&gt; = &lt;span class="constant"&gt;Headless&lt;/span&gt;.new
  &lt;span class="instance-variable"&gt;@headless&lt;/span&gt;.start
&lt;span class="keyword"&gt;end&lt;/span&gt;

config.after(&lt;span class="symbol"&gt;:suite&lt;/span&gt;) &lt;span class="keyword"&gt;do&lt;/span&gt;
  &lt;span class="instance-variable"&gt;@headless&lt;/span&gt;.destroy
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above spippet creates the headless instance and creates the
framebuffer at the beginning of the test suite, and destorys it
afterwards.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall, I&amp;#39;m pretty happy with our set up as it is. The one issue I have
with it is the way ci_reporter and jenkins interact. Since Jenkins was
origianlly built for Java, builds are BROKEN when they don&amp;#39;t build, but
UNSTABLE when their tests fail.  UNSTABLE builds are seen as successful.
I would rather an UNSTABLE build be seen as a failure, since the
campfire notification plugin plays the same sound for successful and
unstable builds.  I may poke around with the plugin or ci_reporter to
have jenkins notify us of builds in a way that makes more sense.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Dan McClain is a DockYarder</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2012/02/27/dan-mcclain-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2012/02/27/dan-mcclain-is-a-dockyarder.html</id>
    <published>2012-02-27T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>DockYard welcomes Dan McClain</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/dan-mcclain.png" alt="Dan McClain"&gt;&lt;/p&gt;

&lt;p&gt;Today I&amp;#39;m happy to announce that Dan McClain is joining our team! I&amp;#39;ve
gotten to know Dan over the past few months through
&lt;a href="http://bostonrb.org"&gt;BostonRB&lt;/a&gt;. He&amp;#39;s been &lt;a href="https://github.com/bostonrb/bostonrb/commits/master?author=danmcclain"&gt;building out some features for
the BostonRB site&lt;/a&gt;, specifically adding
the start of an admin interface (which is huge for me as I was doing all
data entry through the Rails console) and setting BostonRB up on
&lt;a href="http://travis-ci.org/#!/bostonrb/bostonrb"&gt;TravisCI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the past few weeks Dan has been working as a contract-to-hire for
us. Already he&amp;#39;s made a big impact by setting up a company instance
of Jenkins and keeping us honest with our test suites.&lt;/p&gt;

&lt;p&gt;Welcome aboard Dan!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/_danmcclain"&gt;Follow Dan on Twitter&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rails Engines and Monkey Patching</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/02/20/rails-engines-and-monkey-patching.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/02/20/rails-engines-and-monkey-patching.html</id>
    <published>2012-02-20T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>A simple pattern for extending your Rails Engines in your app</summary>
    <content type="html">&lt;p&gt;We&amp;#39;ve started extracting simple behavior into Rails Engines lately. An
example of this is our
&lt;a href="https://github.com/dockyard/invitable"&gt;Invitable&lt;/a&gt; engine. As you may
have guessed, it adds invitation request support to an existing app.
It&amp;#39;s about 50% complete right now but for the purposes of this post it
will act as the example.&lt;/p&gt;

&lt;p&gt;As an engine it has a very slim &lt;code&gt;Invitation&lt;/code&gt; model that only
expects an &lt;code&gt;email&lt;/code&gt; attribute. A client app we&amp;#39;re currently
building requires two additional attributes to be gathered: &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;zipcode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is no need to overwrite the model, I just want to extend it. The cleanest 
thing to do is just monkey patch it.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s start with writing the spec of where I want the model to be (I am
using &lt;a href="https://github.com/bcardarella/valid_attribute"&gt;ValidAttribute&lt;/a&gt; if
the specs don&amp;#39;t look familiar, I suggest you try it test spec your
validations)&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;spec_helper&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

describe &lt;span class="constant"&gt;Invitable&lt;/span&gt;::&lt;span class="constant"&gt;Invitation&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  it { should     have_valid(&lt;span class="symbol"&gt;:name&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Henry Ford&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
  it { should_not have_valid(&lt;span class="symbol"&gt;:name&lt;/span&gt;).when(&lt;span class="predefined-constant"&gt;nil&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
  it { should     have_valid(&lt;span class="symbol"&gt;:zipcode&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;02115&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
  it { should_not have_valid(&lt;span class="symbol"&gt;:zipcode&lt;/span&gt;).when(&lt;span class="predefined-constant"&gt;nil&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;hello&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;0211&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;021156&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To make this spec green there are two things that I have to do&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;zipcode&lt;/code&gt; columsn to the correct table&lt;/li&gt;
&lt;li&gt;Open up the class and add the proper validations on those attributes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first is simple. I just create a new migration and add the columns
to &lt;code&gt;invitable_invitations&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second is not so straight forward. If I open up the class in the client app and
attempt to add the validations like so:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;module&lt;/span&gt; &lt;span class="class"&gt;Invitable&lt;/span&gt;
  &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Invitation&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:name&lt;/span&gt;, &lt;span class="symbol"&gt;:zipcode&lt;/span&gt;, &lt;span class="symbol"&gt;:presence&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:zipcode&lt;/span&gt;, &lt;span class="symbol"&gt;:format&lt;/span&gt; =&amp;gt; &lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="content"&gt;^&lt;/span&gt;&lt;span class="char"&gt;\d&lt;/span&gt;&lt;span class="content"&gt;{5}$|^&lt;/span&gt;&lt;span class="char"&gt;\d&lt;/span&gt;&lt;span class="content"&gt;{5}-&lt;/span&gt;&lt;span class="char"&gt;\d&lt;/span&gt;&lt;span class="content"&gt;{4}$&lt;/span&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The app will raise a &lt;code&gt;NoMethodError&lt;/code&gt; exception complaining that
&lt;code&gt;validates&lt;/code&gt; is undefined. In the load path there are two
&lt;code&gt;app/models/invitable/invitation.rb&lt;/code&gt; files and the one in the app takes precendence
over the one in the engine. This is fine because you might want to
overwrite the model entirely, but in this case I want to extend it. So
you must explicitly require the engine&amp;#39;s model at the top of the app&amp;#39;s model.&lt;/p&gt;

&lt;p&gt;Thankfully the engine itself has a nice helper &lt;code&gt;called_from&lt;/code&gt; that tracks its full path
on the file system. In this example we access it with
&lt;code&gt;Invitable::Engine.called_from&lt;/code&gt;. This will point to the &lt;code&gt;lib/invitable&lt;/code&gt; directory
in the gem itself. Here is what I ended up with in the model:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="constant"&gt;File&lt;/span&gt;.expand_path(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;../../app/models/invitable/invitation&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="constant"&gt;Invitable&lt;/span&gt;::&lt;span class="constant"&gt;Engine&lt;/span&gt;.called_from)

&lt;span class="keyword"&gt;module&lt;/span&gt; &lt;span class="class"&gt;Invitable&lt;/span&gt;
  &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Invitation&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:name&lt;/span&gt;, &lt;span class="symbol"&gt;:zipcode&lt;/span&gt;, &lt;span class="symbol"&gt;:presence&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:zipcode&lt;/span&gt;, &lt;span class="symbol"&gt;:format&lt;/span&gt; =&amp;gt; &lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="content"&gt;^&lt;/span&gt;&lt;span class="char"&gt;\d&lt;/span&gt;&lt;span class="content"&gt;{5}$|^&lt;/span&gt;&lt;span class="char"&gt;\d&lt;/span&gt;&lt;span class="content"&gt;{5}-&lt;/span&gt;&lt;span class="char"&gt;\d&lt;/span&gt;&lt;span class="content"&gt;{4}$&lt;/span&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#39;s verbose and this could be better so let&amp;#39;s clean that up.&lt;/p&gt;

&lt;p&gt;In my engine I&amp;#39;ve added a spec to &lt;code&gt;spec/lib/invitable/engine_spec.rb&lt;/code&gt;
with the following (I&amp;#39;m using &lt;a href="https://github.com/floehopper/mocha"&gt;Mocha&lt;/a&gt; for the stubbing)&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;spec_helper&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

describe &lt;span class="constant"&gt;Invitable&lt;/span&gt;::&lt;span class="constant"&gt;Engine&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  before { &lt;span class="constant"&gt;Invitable&lt;/span&gt;::&lt;span class="constant"&gt;Engine&lt;/span&gt;.stubs(&lt;span class="symbol"&gt;:called_from&lt;/span&gt;).returns(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/lib/invitable&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }

  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;.app_path&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;returns the path to the engine app directory&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
      &lt;span class="constant"&gt;Invitable&lt;/span&gt;::&lt;span class="constant"&gt;Engine&lt;/span&gt;.app_path.should eq &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/app&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller_path&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;returns the path to the named engine controller&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
      &lt;span class="constant"&gt;Invitable&lt;/span&gt;::&lt;span class="constant"&gt;Engine&lt;/span&gt;.controller_path(&lt;span class="symbol"&gt;:test_controller&lt;/span&gt;).should eq &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/app/controllers/invitable/test_controller.rb&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;helper_path&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;returns the path to the named engine helper&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
      &lt;span class="constant"&gt;Invitable&lt;/span&gt;::&lt;span class="constant"&gt;Engine&lt;/span&gt;.helper_path(&lt;span class="symbol"&gt;:test_helper&lt;/span&gt;).should eq &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/app/helpers/invitable/test_helper.rb&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;mailer_path&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;returns the path to the named engine mailer&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
      &lt;span class="constant"&gt;Invitable&lt;/span&gt;::&lt;span class="constant"&gt;Engine&lt;/span&gt;.mailer_path(&lt;span class="symbol"&gt;:test_mailer&lt;/span&gt;).should eq &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/app/mailers/invitable/test_mailer.rb&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;model_path&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;returns the path to the named engine model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
      &lt;span class="constant"&gt;Invitable&lt;/span&gt;::&lt;span class="constant"&gt;Engine&lt;/span&gt;.model_path(&lt;span class="symbol"&gt;:test_model&lt;/span&gt;).should eq &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/app/models/invitable/test_model.rb&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This looks good enough to me. Now to make it green I added the following
to &lt;code&gt;lib/invitable/engine.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="predefined-constant"&gt;self&lt;/span&gt;.&lt;span class="function"&gt;app_path&lt;/span&gt;
  &lt;span class="constant"&gt;File&lt;/span&gt;.expand_path(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;../../app&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, called_from)
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="string"&gt;&lt;span class="delimiter"&gt;%w{&lt;/span&gt;&lt;span class="content"&gt;controller helper mailer model&lt;/span&gt;&lt;span class="delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;.each &lt;span class="keyword"&gt;do&lt;/span&gt; |resource|
  class_eval &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;lt;&amp;lt;-RUBY&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="content"&gt;
    def self.&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;resource&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;_path(name)
      File.expand_path(&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;resource.pluralize&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;/invitable/&lt;/span&gt;&lt;span class="char"&gt;\#&lt;/span&gt;&lt;span class="content"&gt;{name}.rb&amp;quot;, app_path)
    end&lt;/span&gt;&lt;span class="delimiter"&gt;
  RUBY&lt;/span&gt;&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And now in the app model I can do the following&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="constant"&gt;Inivitable&lt;/span&gt;::&lt;span class="constant"&gt;Engine&lt;/span&gt;.model_path &lt;span class="symbol"&gt;:invitation&lt;/span&gt;

&lt;span class="keyword"&gt;module&lt;/span&gt; &lt;span class="class"&gt;Invitable&lt;/span&gt;
  &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Invitation&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:name&lt;/span&gt;, &lt;span class="symbol"&gt;:zipcode&lt;/span&gt;, &lt;span class="symbol"&gt;:presence&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:zipcode&lt;/span&gt;, &lt;span class="symbol"&gt;:format&lt;/span&gt; =&amp;gt; &lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="content"&gt;^&lt;/span&gt;&lt;span class="char"&gt;\d&lt;/span&gt;&lt;span class="content"&gt;{5}$|^&lt;/span&gt;&lt;span class="char"&gt;\d&lt;/span&gt;&lt;span class="content"&gt;{5}-&lt;/span&gt;&lt;span class="char"&gt;\d&lt;/span&gt;&lt;span class="content"&gt;{4}$&lt;/span&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Nice and clean!&lt;/p&gt;

&lt;p&gt;This simple pattern can be applied to the controllers, mailers, etc... any class you want to actually
extend from the engine instead of overwrite entirely.&lt;/p&gt;

&lt;p&gt;Finally, I&amp;#39;d like the address a question I&amp;#39;m sure some of you have. Why
not subclass? For this engine the &lt;code&gt;Invitable::InvitationsController&lt;/code&gt; is
expecting a class of &lt;code&gt;Invitation&lt;/code&gt; within the context of the &lt;code&gt;Invitable&lt;/code&gt;
module. So if I were to subclass&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Inivtation&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Inivitable&lt;/span&gt;::&lt;span class="constant"&gt;Invitation&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You would then have to subclass the controller&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;InvitationsController&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Invitable&lt;/span&gt;::&lt;span class="constant"&gt;InvitationsController&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And because the &lt;code&gt;InvitationsController&lt;/code&gt; is referencing
&lt;code&gt;InvitationMailer&lt;/code&gt; within the context of the &lt;code&gt;Invitable&lt;/code&gt; module you
would have to subclass the mailer&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;InvitationMailer&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Invitable&lt;/span&gt;::&lt;span class="constant"&gt;InvitationMailer&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, because you&amp;#39;ve subclassed the controller the mount in
&lt;code&gt;routes.rb&lt;/code&gt; becomes meaningless. If you head down the subclass path you
defeat the purpose of using the engine in the first place.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Single quotes or double quotes?</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/02/16/single-quotes-or-double-quotes.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/02/16/single-quotes-or-double-quotes.html</id>
    <published>2012-02-16T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>An opinion on when to use the different quoting styles with some performance notes</summary>
    <content type="html">&lt;p&gt;I have a simple rule when it comes to strings: I always start out with
single quotes&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hello world!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When I need to interpolate in the string or add an escaped character it
is time to upgrade to double quotes&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Hello &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;planet&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;To: John Adamsn&lt;/span&gt;&lt;span class="char"&gt;\n&lt;/span&gt;&lt;span class="content"&gt;From: Thomas Jefferson&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now what happens when the string style is part of that string itself?
For example, I don&amp;#39;t need to interpolate and the only escaped character
needed is a single quote. This is when I&amp;#39;ve been using &lt;a href="http://web.njit.edu/all_topics/Prog_Lang_Docs/html/ruby/syntax.html#string"&gt;string
expressions&lt;/a&gt;.
A string literal of &lt;code&gt;%q&lt;/code&gt; is the equivalent of a single quote string and
a &lt;code&gt;%Q&lt;/code&gt; is the equivalent of a double quote string. The string literals
are contained withing a non-alphanumeric delimiter.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# single quote&lt;/span&gt;
&lt;span class="string"&gt;&lt;span class="delimiter"&gt;%q{&lt;/span&gt;&lt;span class="content"&gt;Wayne's world!&lt;/span&gt;&lt;span class="delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;

&lt;span class="comment"&gt;# double quote&lt;/span&gt;
&lt;span class="string"&gt;&lt;span class="delimiter"&gt;%Q{&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;'s world!&lt;/span&gt;&lt;span class="delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;

&lt;span class="comment"&gt;# ZOMG also a double quote!&lt;/span&gt;
&lt;span class="string"&gt;&lt;span class="delimiter"&gt;%{&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;name&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;'s world!&lt;/span&gt;&lt;span class="delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I try to follow this rule. I don&amp;#39;t think it saves anything other than it
just looks nicer to me. A very simple (and completely unscientific)
benchmark shows that the difference between the two is a wash&lt;/p&gt;

&lt;p&gt;** Update: These benchmarks may be wrong, please see the comments for more information **&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;benchmark&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="constant"&gt;Benchmark&lt;/span&gt;.measure { &lt;span class="integer"&gt;1&lt;/span&gt;..&lt;span class="integer"&gt;10_000_000&lt;/span&gt;.times { a = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;hey now&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; } }
&lt;span class="comment"&gt;# =&amp;gt;   1.960000   0.000000   1.970000 (  1.958126)&lt;/span&gt;

&lt;span class="constant"&gt;Benchmark&lt;/span&gt;.measure { &lt;span class="integer"&gt;1&lt;/span&gt;..&lt;span class="integer"&gt;10_000_000&lt;/span&gt;.times { a = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;hey now&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; } }
&lt;span class="comment"&gt;# =&amp;gt;   1.980000   0.010000   1.980000 (  1.988363)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Any given run of this and the times would flip. The string is probably
just being optimized somewhere so this benchmark is not very good. At the 
very least it shows that execution time is similar. Let&amp;#39;s see what happens 
when interpolating:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Benchmark&lt;/span&gt;.measure { &lt;span class="integer"&gt;1&lt;/span&gt;..&lt;span class="integer"&gt;10_000_000&lt;/span&gt;.times { |i| a = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;hey now &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;i&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; } }
&lt;span class="comment"&gt;# =&amp;gt;   6.110000   0.010000   6.120000 (  6.111669)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we can see a significant jump in time. (over 3 times longer) Why does this take so much longer?
A clue as to what is happening can be seen when we compare this benchmark to string concatenation using single quotes&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Benchmark&lt;/span&gt;.measure { &lt;span class="integer"&gt;1&lt;/span&gt;..&lt;span class="integer"&gt;10_000_000&lt;/span&gt;.times { |i| a = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;hey now &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + i.to_s } }
&lt;span class="comment"&gt;# =&amp;gt;   6.490000   0.020000   6.510000 (  6.502408)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This ends up being about the same execution time as string interpolation.
Before we answer the previous question let&amp;#39;s take a look at one more option&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;benchmark&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="constant"&gt;Benchmark&lt;/span&gt;.measure { &lt;span class="integer"&gt;1&lt;/span&gt;..&lt;span class="integer"&gt;10_000_000&lt;/span&gt;.times { |i| a = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;hey now &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &amp;lt;&amp;lt; i } }
&lt;span class="comment"&gt;#  =&amp;gt;   2.990000   0.010000   3.000000 (  2.986346)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Whoa, this is much faster, more than 50% faster than interpolation and
concatenation. Why? What is happening here?&lt;/p&gt;

&lt;p&gt;What we are seeing is the difference between creating a new object and
modifying an existing object. It is not immediately obvious with string
interpolation as it is with concatenation. With the append we are actually 
modyfing the object so there is no need to do any memory allocation.&lt;/p&gt;

&lt;p&gt;There are several differences between the two styles, they aren&amp;#39;t
always interchangable. Most of the time the decision comes down to a
styling preference but there are certain use cases where it can make a
difference. String interpolation is in Ruby as a nice convenience but if
you&amp;#39;re doing anything that is relying upon interpolation quite heavily
you may want to consider other options.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Get those instance variables out of my specs!</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/02/15/get-those-instance-variables-out-of-my-specs.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/02/15/get-those-instance-variables-out-of-my-specs.html</id>
    <published>2012-02-15T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Clean up your specs with let and subject</summary>
    <content type="html">&lt;p&gt;If you&amp;#39;ve been writing &lt;a href="https://www.relishapp.com/rspec"&gt;RSpec&lt;/a&gt; for any
period of time I&amp;#39;m sure you&amp;#39;ve come across &lt;a href="https://www.relishapp.com/rspec/rspec-core/v/2-8/docs/helper-methods/let-and-let"&gt;let&lt;/a&gt; and &lt;a href="https://www.relishapp.com/rspec/rspec-core/v/2-8/docs/subject/explicit-subject"&gt;subject&lt;/a&gt;. (please take a moment to check out the links if you have no idea what I&amp;#39;m talking about) In most cases you can write the same specs with instance variables. For example:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;.find_good_cars&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  before &lt;span class="keyword"&gt;do&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@car_1&lt;/span&gt; = Factory(&lt;span class="symbol"&gt;:good_car&lt;/span&gt;)
    &lt;span class="instance-variable"&gt;@car_2&lt;/span&gt; = Factory(&lt;span class="symbol"&gt;:good_car&lt;/span&gt;)
    &lt;span class="instance-variable"&gt;@car_3&lt;/span&gt; = Factory(&lt;span class="symbol"&gt;:bad_car&lt;/span&gt;)
    &lt;span class="instance-variable"&gt;@good_cars&lt;/span&gt; = &lt;span class="constant"&gt;Car&lt;/span&gt;.find_good_cars
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;only finds good cars&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@good_cars&lt;/span&gt;.should eq [&lt;span class="instance-variable"&gt;@car_1&lt;/span&gt;, &lt;span class="instance-variable"&gt;@car_2&lt;/span&gt;]
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here is what it looks like when using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;subject&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;.find_good_cars&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  let!(&lt;span class="symbol"&gt;:car_1&lt;/span&gt;) { Factory(&lt;span class="symbol"&gt;:good_car&lt;/span&gt;) }
  let!(&lt;span class="symbol"&gt;:car_2&lt;/span&gt;) { Factory(&lt;span class="symbol"&gt;:good_car&lt;/span&gt;) }
  let!(&lt;span class="symbol"&gt;:car_3&lt;/span&gt;) { Factory(&lt;span class="symbol"&gt;:bad_car&lt;/span&gt;)  }
  subject      { &lt;span class="constant"&gt;Car&lt;/span&gt; }
  its(&lt;span class="symbol"&gt;:find_good_cars&lt;/span&gt;) { should eq [car_1, car_2] }
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Maybe it is just me but this &lt;em&gt;feels&lt;/em&gt; cleaner. I treat instance
variables in my specs as a smell and you should too.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Love Your lib Directory</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/02/14/love-your-lib-directory.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/02/14/love-your-lib-directory.html</id>
    <published>2012-02-14T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Patterns for happy hacking</summary>
    <content type="html">&lt;p&gt;&lt;a href="http://blog.codeclimate.com/blog/2012/02/07/what-code-goes-in-the-lib-directory"&gt;Be sure to check out Bryan Helmkamp&amp;#39;s blog post on the same topic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;lib/&lt;/code&gt; directory is the Red Headed Stepchild of your Rails
application. Let&amp;#39;s discuss some conventions for keeping it clean and
what should and shouldn&amp;#39;t go in there.&lt;/p&gt;

&lt;h2&gt;It&amp;#39;s not a dump&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/dump.jpg" alt="Dump"&gt;&lt;/p&gt;

&lt;p&gt;Does this look familiar? It does to me. This is what my &lt;code&gt;lib/&lt;/code&gt; directory
looked like before I got fed up with it. That truck, that was me dumping more
code into &lt;code&gt;lib/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In my experience there is one outstanding reason why code ends up
getting dumped into the lib/ directory: A poor understanding of what a
model is. Rails has this way of reinforcing bad habits. Perhaps because
it is so easy to get going some developers never bother to learn that a
model does not in any way need to be attached to a persitence layer.
(i.e. ActiveRecord)&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s all agree to the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All Business Logic Goes Into A Model&lt;/li&gt;
&lt;li&gt;All Models Go Into &lt;code&gt;app/models&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When we say &amp;quot;Business Logic&amp;quot; we are of course talking about &amp;quot;Application
Specific Business Logic&amp;quot;. There is always the case of something you&amp;#39;re
working on that is so generic it can be shared with other applications
you are (or will be) working on. Or, even better, with the community in
general as Open Source. That brings me to the next point.&lt;/p&gt;

&lt;h2&gt;Understanding the load path&lt;/h2&gt;

&lt;p&gt;If you have written a Rubygem, or at the very least, looked through one,
you know that the &lt;code&gt;lib/&lt;/code&gt; directory is special. The short version of the
story is that Rubygems iterates over all of the libraries you have
installed as a gem, and appends any &lt;code&gt;lib/&lt;/code&gt; directories onto Ruby&amp;#39;s Load
Path. This is basically how Ruby gem files are exposed, so when you as
do a gem require it will iterate through every path in the load path and
give you the first match.&lt;/p&gt;

&lt;p&gt;This is also true with Rails. After all of your gems are loaded and your
application is up Rails will append &lt;code&gt;./lib/&lt;/code&gt; to your load path. Any
files you put in there can now be required the exact same way gems are.
This gives us an excellent path to extracting general functionality out
into. You can even play tricks with this, in your &lt;code&gt;application.rb&lt;/code&gt; file
put the following at the top:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="global-variable"&gt;$:&lt;/span&gt;.unshift(&lt;span class="constant"&gt;File&lt;/span&gt;.expand_path(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;../../lib&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;__FILE__&lt;/span&gt;))
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now in your lib directory create an &amp;#39;active_record&amp;#39; directory and add a
file called &amp;#39;base.rb&amp;#39;. Inside that file add the following:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;raise &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;ZOMG I BROKE RAILS!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Load up your Rails app and watch it throw an exception. Why? Because
your app&amp;#39;s &lt;code&gt;lib/&lt;/code&gt; directory was prepended to the load paths and when the
lookup for &lt;code&gt;active_record/base&lt;/code&gt; happened the first match was in your
app&amp;#39;s &lt;code&gt;lib/&lt;/code&gt; instead of in the proper gem. This of course is more of an interesting hack than anything really
useful. But it does do a good job of demonstrating how Rubygems&amp;#39; lookup
happens.&lt;/p&gt;

&lt;h2&gt;Use initializers for initializing, that is all&lt;/h2&gt;

&lt;p&gt;I have seen developers dump code into initializers that has no business
being there. Yes, it loads and it works. That is not the point. We have
conventions for a reason. Any code that you feel needs to go into an
initializer and has nothing to do with actually setting preferences or
something of that manner almost always should go into the &lt;code&gt;lib/&lt;/code&gt;
directory. If you &lt;strong&gt;must&lt;/strong&gt; monkey patch. Put it into the &lt;code&gt;lib/&lt;/code&gt;
directory. If you are creating a new class or module that has no
business being in &lt;code&gt;app/models&lt;/code&gt; put it in to the &lt;code&gt;lib/&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2&gt;Using lib/ to extend core, stlib, or a gem&lt;/h2&gt;

&lt;p&gt;Far too often I&amp;#39;ve needed to extend a class that is being defined
outside of my project. There are a few ways to deal with this. You can
use a &lt;a href="http://en.wikipedia.org/wiki/Composite_pattern"&gt;Composite&lt;/a&gt; to
define a new class that you can then play around with. The downside to
this is that I sometimes want to modify a class that is being inherited
by other classes. This is when I think it is appropriate to &lt;a href="http://en.wikipedia.org/wiki/Monkey_patch"&gt;Monkey
Patch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The pattern I have fallen upon is to define a &lt;code&gt;gem_ext/&lt;/code&gt; directory and a
&lt;code&gt;gem_ext.rb&lt;/code&gt; file in lib. I then make sure the extensions are loaded up
using an initializer. For lack of a better term I call this
&lt;code&gt;lib_loader.rb&lt;/code&gt;. Lets start with the loader.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# config/initializers/lib_loader.rb&lt;/span&gt;

require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;gem_ext&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Simple enough. Now for this example I&amp;#39;ll use a &lt;a href="http://haml-lang.com/"&gt;Haml&lt;/a&gt; custom filter I wrote.
This filter allows me to write &lt;a href="http://handlebarsjs.com"&gt;Handlebars&lt;/a&gt;
templates in my views like so:&lt;/p&gt;
&lt;div class="highlight haml "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;-&lt;span class="comment"&gt;# app/views/home/show.html.haml&lt;/span&gt;

&lt;span class="comment"&gt;:handlebars&lt;/span&gt;&lt;span class="comment"&gt;
  // handlebars code goes here&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now I can easily add handlebar templates to any haml file. This is how I
did it.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;lib/gem_ext&lt;/code&gt; I defined a &lt;code&gt;haml/&lt;/code&gt; directory and a &lt;code&gt;haml.rb&lt;/code&gt; file. Then I defined &lt;code&gt;haml/custom_filters.rb&lt;/code&gt; and inside that file
I added&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# lib/gem_ext/haml/custom_filters.rb&lt;/span&gt;

&lt;span class="keyword"&gt;module&lt;/span&gt; &lt;span class="class"&gt;Haml::Filters&lt;/span&gt;
  &lt;span class="keyword"&gt;module&lt;/span&gt; &lt;span class="class"&gt;Handlebars&lt;/span&gt;
    include &lt;span class="constant"&gt;Base&lt;/span&gt;

    &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;render_with_options&lt;/span&gt;(text, options)
      type = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt; type=&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;options[&lt;span class="symbol"&gt;:attr_wrapper&lt;/span&gt;]&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;options[&lt;span class="symbol"&gt;:attr_wrapper&lt;/span&gt;]&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;lt;&amp;lt;-END&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="content"&gt;
&amp;lt;script&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;type&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;&amp;gt;
//&amp;lt;![CDATA[
  &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;text.rstrip.gsub(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="char"&gt;\n&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="char"&gt;\n&lt;/span&gt;&lt;span class="content"&gt;    &lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;
//]]&amp;gt;
&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class="delimiter"&gt;
      END&lt;/span&gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now in &lt;code&gt;haml.rb&lt;/code&gt; I added&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# lib/gem_ext/haml.rb&lt;/span&gt;

require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;gem_ext/haml/custom_filters&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And finally in &lt;code&gt;gem_ext.rb&lt;/code&gt; I added&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# lib/gem_ext.rb&lt;/span&gt;

require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;gem_ext/haml&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This gives me a very clean approach to extending classes without
worrying about muddying up the load path with name collisions or other
surprises. In addition this pattern can
be repeated for &lt;code&gt;Core&lt;/code&gt; and &lt;code&gt;Stdlib&lt;/code&gt; classes in &lt;code&gt;core_ext&lt;/code&gt; and &lt;code&gt;stdlib_ext&lt;/code&gt;
respectively.&lt;/p&gt;

&lt;h2&gt;Using lib/ as a pattern to extracting Rubygems&lt;/h2&gt;

&lt;p&gt;A pattern I have fallen upon when wanting to extract functionality out
of an app into a Rubygem has been to first extract that code into the
&lt;code&gt;lib/&lt;/code&gt; directoy. From there I have a nice way to test the code in
isolation. I am also forced to write the code as a class independent
from my app. After I am satisfied with what I have I can think about
extracting that into an external gem.&lt;/p&gt;

&lt;p&gt;A great example of this is something that &lt;a href="http://p-rob.me"&gt;Patrick Robertson&lt;/a&gt; wrote for
&lt;a href="http://bostonrb.org"&gt;BostonRB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We wanted to show the next upcoming event at the top of the website. All
of our events are stored in a Google Calendar. Unfortunately most of the
Google Calendar gems out there are crap. Patrick decided to roll his
own.&lt;/p&gt;

&lt;p&gt;You can see that the &lt;a href="https://github.com/bostonrb/bostonrb/blob/master/lib/boston_rb_calendar.rb"&gt;boston&lt;em&gt;rb&lt;/em&gt;calendar.rb&lt;/a&gt;
is requiring several files just like any Gem would. Because of the
isolation &lt;a href="https://github.com/bostonrb/bostonrb/blob/master/spec/lib/boston_rb_calendar_spec.rb"&gt;he was able to test the class very easily&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From here, if Patrick wanted to release this as a gem it wouldn&amp;#39;t take
too much effort. Some renaming of classes would be required but he has
all of the major parts in place.&lt;/p&gt;

&lt;h2&gt;Go forth and show some &amp;lt;3&amp;lt;3&amp;lt;3&amp;lt;3&lt;/h2&gt;

&lt;p&gt;Keeping your code clean pays itself forward in many way. The team you
are apart of or the team you are handing off to will thank you. Heck,
your future self might thank you. The patterns I&amp;#39;ve described here are
ones that I have found success with. If you have noticed other patterns
concerning the &lt;code&gt;lib/&lt;/code&gt; directory please feel free to comment!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Authenticating multiple models with a strategy</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/02/13/authenticating-multiple-models-with-a-strategy.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/02/13/authenticating-multiple-models-with-a-strategy.html</id>
    <published>2012-02-13T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Using the Strategy Pattern to clean up multiple login paths</summary>
    <content type="html">&lt;p&gt;A current project requires that there be multiple models that can sign
in and each one must use the same sign in form. The original
&lt;code&gt;SessionsController#create&lt;/code&gt; action looked like the following:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;create&lt;/span&gt;
  &lt;span class="keyword"&gt;if&lt;/span&gt; user = (&lt;span class="constant"&gt;Owner&lt;/span&gt;.authenticate(params[&lt;span class="symbol"&gt;:user&lt;/span&gt;]) || &lt;span class="constant"&gt;Employee&lt;/span&gt;.authenticate(params[&lt;span class="symbol"&gt;:user&lt;/span&gt;]))
    session[&lt;span class="symbol"&gt;:user_id&lt;/span&gt;]    = user.id
    session[&lt;span class="symbol"&gt;:user_class&lt;/span&gt;] = user.class
    redirect_to dashboard_path
  &lt;span class="keyword"&gt;else&lt;/span&gt;
    render &lt;span class="symbol"&gt;:action&lt;/span&gt; =&amp;gt; &lt;span class="symbol"&gt;:new&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We&amp;#39;re using &lt;code&gt;has_secure_password&lt;/code&gt; and rolling our own authentication.
Considering that, the above was good enough. But... looking down
the line for this app it is likely we will have to support authentication
for more than just two models on the same form. I also don&amp;#39;t like having
logic in my controllers. So I decided to break this logic out and I
chose the &lt;a href="http://en.wikipedia.org/wiki/Strategy_pattern"&gt;Strategy Pattern&lt;/a&gt; to help.&lt;/p&gt;

&lt;p&gt;I like putting all of my strategies into
&lt;code&gt;app/strategies&lt;/code&gt;. This required me to add this directory to the Rails
&lt;code&gt;autoload_paths&lt;/code&gt;. Simply open up &lt;code&gt;config/application.rb&lt;/code&gt;
(not necessary in Rails 3.1+, thanks Artur Roszczyk)&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;config.autoload_paths += &lt;span class="string"&gt;&lt;span class="delimiter"&gt;%W(&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;config.root&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;/app/strategies&lt;/span&gt;&lt;span class="delimiter"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next I wrote up a simple spec, thankfully I already had the logic from
the controller so there wasn&amp;#39;t much work to be done here. This went into
&lt;code&gt;spec/strategies/authentication_strategy_spec.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;spec_helper&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

describe &lt;span class="constant"&gt;AuthenticationStrategy&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  context &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;authenticating an owner&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    let(&lt;span class="symbol"&gt;:owner&lt;/span&gt;) { mock(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Owner&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    before &lt;span class="keyword"&gt;do&lt;/span&gt;
      owner.stubs(&lt;span class="symbol"&gt;:authenticate&lt;/span&gt;).returns(owner)
      &lt;span class="constant"&gt;Owner&lt;/span&gt;.stubs(&lt;span class="symbol"&gt;:where&lt;/span&gt;).returns([owner])
    &lt;span class="keyword"&gt;end&lt;/span&gt;
    it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;returns an owner&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
      &lt;span class="constant"&gt;AuthenticationStrategy&lt;/span&gt;.run(&lt;span class="symbol"&gt;:email&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;owner@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:password&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;password&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).should eq owner
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  context &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;authenticating an employee&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    let(&lt;span class="symbol"&gt;:employee&lt;/span&gt;) { mock(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Employee&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    before &lt;span class="keyword"&gt;do&lt;/span&gt;
      employee.stubs(&lt;span class="symbol"&gt;:authenticate&lt;/span&gt;).returns(employee)
      &lt;span class="constant"&gt;Employee&lt;/span&gt;.stubs(&lt;span class="symbol"&gt;:where&lt;/span&gt;).returns([employee])
    &lt;span class="keyword"&gt;end&lt;/span&gt;
    it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;returns an employee&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
      &lt;span class="constant"&gt;AuthenticationStrategy&lt;/span&gt;.run(&lt;span class="symbol"&gt;:email&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;employee@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:password&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;password&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).should eq employee
    &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;end&lt;/span&gt;

  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;failing to authenticate&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    context &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;with no attributes&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
      it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;returns nil&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
        &lt;span class="constant"&gt;AuthenticationStrategy&lt;/span&gt;.run.should be_nil
      &lt;span class="keyword"&gt;end&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;
    context &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;with no match for owner or employee&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
      it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;returns nil&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
        &lt;span class="constant"&gt;AuthenticationStrategy&lt;/span&gt;.run(&lt;span class="symbol"&gt;:email&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="symbol"&gt;:password&lt;/span&gt; =&amp;gt; &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;password&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).should be_nil
      &lt;span class="keyword"&gt;end&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now it was time to make these specs green! The strategy file goes into
&lt;code&gt;app/strategies/authentication_strategy.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;AuthenticationStrategy&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="predefined-constant"&gt;self&lt;/span&gt;.&lt;span class="function"&gt;run&lt;/span&gt;(attributes = &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;)
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="predefined-constant"&gt;nil&lt;/span&gt; &lt;span class="keyword"&gt;if&lt;/span&gt; (attributes.nil? || attributes[&lt;span class="symbol"&gt;:email&lt;/span&gt;].blank? || attributes[&lt;span class="symbol"&gt;:password&lt;/span&gt;].blank?)
    &lt;span class="constant"&gt;Owner&lt;/span&gt;.authenticate(attributes) || &lt;span class="constant"&gt;Employee&lt;/span&gt;.authenticate(attributes)
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And finally to clean up the controller&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;create&lt;/span&gt;
  &lt;span class="keyword"&gt;if&lt;/span&gt; user = &lt;span class="constant"&gt;AuthenticationStrategy&lt;/span&gt;.run(params[&lt;span class="symbol"&gt;:user&lt;/span&gt;])
    session[&lt;span class="symbol"&gt;:user_id&lt;/span&gt;]    = user.id
    session[&lt;span class="symbol"&gt;:user_class&lt;/span&gt;] = user.class
    redirect_to dashboard_path
  &lt;span class="keyword"&gt;else&lt;/span&gt;
   render &lt;span class="symbol"&gt;:action&lt;/span&gt; =&amp;gt; &lt;span class="symbol"&gt;:new&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the end this may appear to be more work than is necessary. Keep in
mind that app requirements will expand to support more models. The wins should be obvious
considering that context. If the requirements grow to 5 or 6 models perhaps at that point it makes sense to
actually break the authentication up into &lt;a href="http://en.wikipedia.org/wiki/Identity_management"&gt;Identities&lt;/a&gt; with a &lt;a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations"&gt;polymorphic
association&lt;/a&gt; to the different models.
But we&amp;#39;ll cross that road when we get there.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Russ Jones is a DockYarder!</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2012/02/10/russ-jones-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2012/02/10/russ-jones-is-a-dockyarder.html</id>
    <published>2012-02-10T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>DockYard welcomes Russ Jones as a partner</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/russ-jones.png" alt="Russ Jones"&gt;&lt;/p&gt;

&lt;p&gt;Russ and I met during the first &lt;a href="http://railscamps.com"&gt;Rails Camp New
England&lt;/a&gt;. Over the past few years we&amp;#39;ve gotten to know one another and have been looking to collaborate as developers. Last March Russ, myself, and a few others, got together to talk about the possibility of starting our own consultancy. Since getting a bunch of freelancers on the same schedule is difficult, it wasn&amp;#39;t until 8 months later that I was finally able to bring Russ in on a project.&lt;/p&gt;

&lt;p&gt;Russ has been developing in Rails since 2006, but has been focusing most of his recent development efforts on the client. When we joined up he immediately took ownership of a mobile web application, bringing some sanity to a combination of Phonegap, jQueryMobile and Backbone. He&amp;#39;s already released a few open source projects for DockYard: &lt;a href="https://github.com/dockyard/jquerymobile-backbone"&gt;jquery-backbone&lt;/a&gt; and &lt;a href="https://github.com/dockyard/ember-jasmine-standalone"&gt;ember-jasmine-standalone&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m very happy to announce that Russ has agreed to come on board as a
partner.&lt;/p&gt;

&lt;p&gt;Now I just have to get him to write some blog posts...&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/codeofficer"&gt;Follow Russ on Twitter&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Angelo Simeoni is a DockYarder!</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/announcement/2012/02/10/angelo-simeoni-is-a-dockyarder.html"/>
    <id>http://reefpoints.dockyard.com/announcement/2012/02/10/angelo-simeoni-is-a-dockyarder.html</id>
    <published>2012-02-10T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>DockYard welcomes Angelo Simeoni as a partner</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/angelo-simeoni.png" alt="Angelo Simeoni"&gt;&lt;/p&gt;

&lt;p&gt;I first met Angelo when we both worked at &lt;a href="http://zendesk.com"&gt;zendesk&lt;/a&gt; two years ago. I had heard about him before this as he had done some redesigns for &lt;a href="http://bostonrb.org"&gt;The Boston Ruby Group&lt;/a&gt; website. Over the few months that zendesk was in Boston we got to be friends, and when we both left zendesk I knew this was someone I wanted to work with again in the future. That opportunity came when I moved back to Boston in the summer of 2010. For the past year Angelo and I have been collaborating on several projects and I&amp;#39;m happy to announce that he has agreed to come on as a partner for DockYard.&lt;/p&gt;

&lt;p&gt;Angelo has been working in Rails for a few years now, and is a master of
all things CSS. His love for typefaces has influenced me quite a bit in
how I approach web design.&lt;/p&gt;

&lt;p&gt;You can view a lot of Angelo&amp;#39;s work over at his personal site:
&lt;a href="http://cssboy.com"&gt;CSSBoy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/cssboy"&gt;Follow Angelo on Twitter&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ClientSideValidations goes modular</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2012/01/22/client-side-validations-goes-modular.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2012/01/22/client-side-validations-goes-modular.html</id>
    <published>2012-01-22T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Brian summarizes the changes to come in ClientSideValidations 3.2.0</summary>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/bcardarella/client_side_validations"&gt;ClientSideValidations&lt;/a&gt; has been gaining popularity over the past few
months as it is nearing 1000 watchers on Github. With the release of
Rails 3.2.0 I&amp;#39;ve decided to start extracting out all of the non-Rails
components, such as SimpleForm support and Mongoid support, into their
own gems. I want to disucss my reasons for doing this as I believe this
path of modularity is going to mean better gem maintenance, more frequent
releases, and the opportunity for the community to really get involved.&lt;/p&gt;

&lt;p&gt;Last night I released ClientSideValidations-3.2.0.beta.1 and I have extracted the following into their own gems:&lt;/p&gt;

&lt;h5&gt;ORMs&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dockyard/client_side_validations-mongoid"&gt;ClientSideValidations-Mongoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dockyard/client_side_validations-mongo_mapper"&gt;ClientSideValidations-MongoMapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;FormBuilders&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dockyard/client_side_validations-formtastic"&gt;ClientSideValidations-Formtastic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dockyard/client_side_validations-simple_form"&gt;ClientSideValidations-SimpleForm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Going Modular&lt;/h2&gt;

&lt;p&gt;The problem with keeping support for the many different ORMs and
FormBuilders in the ClientSideValidations gem is that there are just too
many dependencies doing different things. A great example is with
Mongoid and &lt;a href="https://github.com/bcardarella/client_side_validations/issues/253"&gt;ClientSideValidations Issue #253&lt;/a&gt;.
Mongoid &lt;code&gt;2.4.0&lt;/code&gt; added a &lt;a href="https://github.com/mongoid/mongoid/blob/2.4.0-stable/lib/mongoid/validations/presence.rb"&gt;PresenceValidator&lt;/a&gt; instead of using
the ActiveModel version. This caused translations to fail as they were
being served up directly from Mongoid instead of ActiveModel. I could
have fixed this easily in ClientSideValidations but now this means all
future releases would require anyone using a version of Mongoid previous
to this change to upgrade. There are many reason why you may not want to
upgrade Mongoid, none of which are my business.&lt;/p&gt;

&lt;p&gt;Pulling the Mongoid code out into its own plugin allows this bug to be
fixed there and I can continue to do bug fixes/feature development in
ClientSideValidations that everyone can benefit from.&lt;/p&gt;

&lt;h2&gt;More than just SemVer&lt;/h2&gt;

&lt;p&gt;The versions of the plugins now matter. I&amp;#39;ve decided to
match the library they are supporting&amp;#39;s Major and Minor version. For
example, with Mongoid the current version is &lt;code&gt;2.4.x&lt;/code&gt; so the current
version of &lt;a href="https://github.com/dockyard/client_side_validations-mongoid"&gt;ClientSideValidations-Mongoid&lt;/a&gt;
is &lt;code&gt;2.4.0&lt;/code&gt;. All bug fixes for this version will only bump the patch
version. We can then go back and add a &lt;code&gt;2.3.0&lt;/code&gt; version that does not
expect a Mongoid PresenceValidator and you won&amp;#39;t need to change the
version of ClientSideValidations. Simple enough stuff, but it gives the
library a lot of flexibility.&lt;/p&gt;

&lt;h2&gt;Community Support&lt;/h2&gt;

&lt;p&gt;I won&amp;#39;t go back and cover every single Major/Minor
release of the different gems. I&amp;#39;m starting with the current versions
and going to look to the community to send pull-requests to fill in the
gaps.&lt;/p&gt;

&lt;p&gt;With these ORM and FormBuilder gems the community should have a good
starting point for writing their own ClientSideValidations plugins.&lt;/p&gt;

&lt;p&gt;If someone is looking for a good starting point to build a gem you can
start with NestedForm as this is a gem that I did not extract and its
support was dropped.&lt;/p&gt;

&lt;p&gt;In addition, I&amp;#39;m looking for help. It would be nice to get some
maintainers on the plugins but I&amp;#39;m also looking for someone to lend a
hand with ClientSideValidations.&lt;/p&gt;

&lt;h2&gt;When will it be released?&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve got a bunch of &lt;a href="https://github.com/bcardarella/client_side_validations/issues"&gt;issues in
ClientSideValidations&lt;/a&gt; I want to fix, I&amp;#39;m
guessing maybe a week or two to get through all of these. I&amp;#39;ll go
through a few &lt;code&gt;beta&lt;/code&gt; gems then a release candidate or two. I am always open to community contributions. If you want to help, please do!&lt;/p&gt;

&lt;p&gt;You can start using this today with the beta version. All of the plugins
require the beta version of ClientSideValidations 3.2.0.&lt;/p&gt;

&lt;h2&gt;The Future&lt;/h2&gt;

&lt;p&gt;Rails &lt;code&gt;3.2.0&lt;/code&gt; will be the last &lt;code&gt;3.x&lt;/code&gt; version of Rails, and so this will
also be the last &lt;code&gt;3.x&lt;/code&gt; version of ClientSideValidations. Work is already
underway on the &lt;code&gt;4.x&lt;/code&gt; version. One of the biggest changes is going to
happen on the JavaScript side. Client-side model validations will be the
goal. As well as compostite views for the error rendering. Ideally I
would like ClientSideValidations to be able to hook into the popular
JavaScript MVC frameworks.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>It's Not A Vacation Follow Up</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2012/01/04/its-not-a-vacation-follow-up.html"/>
    <id>http://reefpoints.dockyard.com/2012/01/04/its-not-a-vacation-follow-up.html</id>
    <published>2012-01-04T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary/>
    <content type="html">&lt;p&gt;We have been pretty busy here at DockYard and I haven&amp;#39;t had a chance to
follow up on the &lt;a href="/2011/12/04/its-not-a-vacation.html"&gt;previous post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To recap: DockYard is a distributed team, we decided to switch it up for
a week and go to the same city and work our asses off.&lt;/p&gt;

&lt;p&gt;Result: We kicked ass.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/20120104/danandruss.jpg" alt="Dan Pickett &amp;amp; Russ Jones"&gt;&lt;/p&gt;

&lt;p&gt;The city we chose to work from for the week is Providence, RI. It was
close enough most of the team to not be expensive to travel to yet far
enough away to necessitate not going home each night. On top of that,
Providence is a very affordable city and it has a tech scene that is
starting to take off.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/20120104/tazza.jpg" alt="Tazza Cafe"&gt;&lt;/p&gt;

&lt;p&gt;For the week we worked from &lt;a href="http://tazzacaffe.com"&gt;Tazza Cafe&lt;/a&gt; and I
have only the highest praise for the atmosphere, the food, and the
staff. Free wi-fi, never too crowded, amazing food selection, and some
of the friendliest wait staff I&amp;#39;ve ever seen at anywhere. If you in the
area, or just passing through, I highly recommend stopping in.&lt;/p&gt;

&lt;p&gt;The progress we made during the week was pretty amazing. This type of
work is only possible with a great team. We were
fortuante enough to be joined by &lt;a href="http://enlightsolutions.com"&gt;Dan
Pickett&lt;/a&gt; along with the DockYard regulars
of &lt;a href="http://cssboy.com"&gt;Angelo Simeoni&lt;/a&gt;, &lt;a href="http://codeofficer.com"&gt;Russ
Jones&lt;/a&gt;, and myself.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/20120104/downtownprovidence.jpg" alt="Downtown Providence"&gt;&lt;/p&gt;

&lt;p&gt;During the week we got to meet many from the local tech scene. Monday
night we crashed a &lt;a href="http://betaspring"&gt;Betaspring&lt;/a&gt; event and Thursday we
hosted our own Providence Pub Crawl hitting &lt;a href="http://as220.org/"&gt;AS220&lt;/a&gt;,
&lt;a href="http://www.trinitybrewhouse.com"&gt;Trinity Brewhouse&lt;/a&gt;, Union Station
Brewery, &lt;a href="http://www.trinitybrewhouse.com"&gt;Rira&lt;/a&gt;, and ending up at
Tazza. It was a great way to end a great week. We&amp;#39;ll be doing this again
in the future.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>It's Not A Vacation</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2011/12/04/its-not-a-vacation.html"/>
    <id>http://reefpoints.dockyard.com/2011/12/04/its-not-a-vacation.html</id>
    <published>2011-12-04T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary/>
    <content type="html">&lt;h3&gt;DockYard is invading The Ocean State!&lt;/h3&gt;

&lt;p&gt;&lt;img src="/images/ocean_state.jpg" alt="Ocean State"&gt;&lt;/p&gt;

&lt;p&gt;There is one annoying issue working with a remote team:
Everybody is remote. There is something lost when you don&amp;#39;t get to see the people you&amp;#39;re working with.
Apps like Skype have made a difference how remote work is done. We&amp;#39;re
not any less productive, but it&amp;#39;s difficult to grab drinks with co-workers
when they&amp;#39;re 2 hours away.&lt;/p&gt;

&lt;p&gt;To that end we&amp;#39;ve decided to work from a city for a week once every
few months. We&amp;#39;ll pack up, grab a hotel, and lock ourselves in a coffee
shop to get a crazy amount of work done. Our girlfriends and wives
might disagree but we&amp;#39;re calling this: &lt;strong&gt;It&amp;#39;s Not A Vacation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;re very serious about this, the entire week is a dedicated work week.
We&amp;#39;ve set some ambitious goals for our client applications and we&amp;#39;re
all pretty fired up to get going. There is something interesting that
happens to productivity with you shake things up.&lt;/p&gt;

&lt;p&gt;This is of course all experimental so I&amp;#39;ll write a follow up at the end
of the week on how things went.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Convert Ruby Regexp to JavaScript RegExp</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/ruby/2011/11/18/convert-ruby-regexp-to-javascript-regex.html"/>
    <id>http://reefpoints.dockyard.com/ruby/2011/11/18/convert-ruby-regexp-to-javascript-regex.html</id>
    <published>2011-11-18T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>A simple extraction from ClientSideValidations</summary>
    <content type="html">&lt;p&gt;This has a very limited use case, but I needed it for
&lt;a href="http://github.com/bcardarella/client_side_validations"&gt;ClientSideValidations&lt;/a&gt;. It took a while
to track down some of the possible conversion issues, I figure someone
else might find this useful.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Regexp&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;to_javascript&lt;/span&gt;
    &lt;span class="constant"&gt;Regexp&lt;/span&gt;.new(inspect.sub(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="char"&gt;\\&lt;/span&gt;&lt;span class="content"&gt;A&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;^&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).sub(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="char"&gt;\\&lt;/span&gt;&lt;span class="content"&gt;Z&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;$&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).sub(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="char"&gt;\\&lt;/span&gt;&lt;span class="content"&gt;z&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;$&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).sub(&lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="content"&gt;^&lt;/span&gt;&lt;span class="char"&gt;\/&lt;/span&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;/span&gt;,&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).sub(&lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="char"&gt;\/&lt;/span&gt;&lt;span class="content"&gt;[a-z]*$&lt;/span&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;/span&gt;,&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).gsub(&lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="char"&gt;\(&lt;/span&gt;&lt;span class="char"&gt;\?&lt;/span&gt;&lt;span class="content"&gt;#.+&lt;/span&gt;&lt;span class="char"&gt;\)&lt;/span&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).gsub(&lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="char"&gt;\(&lt;/span&gt;&lt;span class="char"&gt;\?&lt;/span&gt;&lt;span class="content"&gt;-&lt;/span&gt;&lt;span class="char"&gt;\w&lt;/span&gt;&lt;span class="content"&gt;+:&lt;/span&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;/span&gt;,&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;(&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;), &lt;span class="predefined-constant"&gt;self&lt;/span&gt;.options).inspect
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When you render it to the client simply instantiate a new &lt;code&gt;RegExp&lt;/code&gt;
object with the resulting string:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;new&lt;/span&gt; RegExp(regexpStringFromRuby);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If there are any edge-cases that won&amp;#39;t convert cleanly please report
them in the comments.&lt;/p&gt;

&lt;p&gt;See how it is being used in &lt;code&gt;ClientSideValidations&lt;/code&gt; &lt;a href="https://github.com/bcardarella/client_side_validations/blob/master/lib/client_side_validations/core_ext/regexp.rb"&gt;to_json&lt;/a&gt;
&lt;a href="https://github.com/bcardarella/client_side_validations/blob/master/test/core_ext/cases/test_core_ext.rb"&gt;tests cases&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>GitHub Is One Commit Away From Being The Ultimate Blog Engine</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2011/11/14/github-is-one-commit-away-from-being-the-ultimate-blog-engine.html"/>
    <id>http://reefpoints.dockyard.com/2011/11/14/github-is-one-commit-away-from-being-the-ultimate-blog-engine.html</id>
    <published>2011-11-14T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary/>
    <content type="html">&lt;p&gt;This past August &lt;a href="https://github.com/blog/905-edit-like-an-ace"&gt;GitHub released file editing using the Ace code
editor&lt;/a&gt;. It&amp;#39;s pretty damn
awesome if you haven&amp;#39;t tried it. Basically, you get
&lt;a href="http://macromates.com"&gt;TextMate&lt;/a&gt; in your
browser. Here at &lt;a href="http://dockyard.com"&gt;DockYard&lt;/a&gt; we&amp;#39;ve been using
&lt;a href="http://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; to host this blog. The posts
are written in &lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt;. So we&amp;#39;re
doing all of our post creation and editing locally.&lt;/p&gt;

&lt;h2&gt;The Dream&lt;/h2&gt;

&lt;p&gt;It would be great if GitHub allowed us to create new &lt;a href="http://book.git-scm.com/1_the_git_object_model.html"&gt;blobs&lt;/a&gt; from the web interface.
At that point GitHub would be a full-service blog engine. Think about it, they already do the
hosting, version tracking, and editing of files through the web
interface. If file creation was added that&amp;#39;s pretty much all I would
want. (&lt;a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter"&gt;Jekyll has a way to track drafts by setting the &lt;code&gt;published&lt;/code&gt;
flag&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;So if anybody at GitHub is reading, can we please have this feature?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Mobile Web Apps Still Have Some Major Hurdles</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2011/11/10/mobile-web-apps.html"/>
    <id>http://reefpoints.dockyard.com/2011/11/10/mobile-web-apps.html</id>
    <published>2011-11-10T00:00:00Z</published>
    <updated>2013-11-25T10:20:31-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary>Brian summarizes DockYard's experience thus far with mobile web apps and some of the existing challenges to compete with native</summary>
    <content type="html">&lt;p&gt;Over the past 24 hours I&amp;#39;ve seen several articles (&lt;a href="http://venturebeat.com/2011/11/09/mobile-web/"&gt;1&lt;/a&gt;,&lt;a href="http://www.guardian.co.uk/technology/blog/2011/nov/03/will-html5-replace-native-apps"&gt;2&lt;/a&gt;) on &lt;a href="http://news.ycombinator.com"&gt;Hacker News&lt;/a&gt;
predicting that in the near future mobile web apps are going to
replace their native counterparts. Here at DockYard we really hope this
happens. We believe in the mobile web and have decided forego regular
web application development in favor of focusing on mobile web
application development. However, experience has told us the future is not as nigh as we
all hope.&lt;/p&gt;

&lt;p&gt;Native applications (iOS, Android, etc.) still have and will continue
to have some significant advantages over mobile web apps. Let&amp;#39;s start
with the obvious...&lt;/p&gt;

&lt;h3&gt;Native functionality&lt;/h3&gt;

&lt;p&gt;Having access to mobile hardware such as the camera, microphone, and
storage (file system, internal datbases, etc...) is important. There is also the issue
of running the application in the background. None of this is currently
possible in a mobile web application. Immediately the scope of a mobile
web application is much smaller.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://www.w3.org/TR/html-media-capture/"&gt;W3C has a working draft of what a media capture API should
be&lt;/a&gt;. It may be a
matter of time until we see mobile browsers begin to provide access to
this native functionality. Personally, I would like to see this API
developed further. In its current form it is simply a delegator API to
the camera and microphone applications. We hand off application control and wait for a
callback that has the list of media just captured. This is not good
enough. How can a mobile web application compete with the many
different native camera applications that exist with custom camera
functionality if there is no way to
customize the camera experience? Simple: it can&amp;#39;t. Augmented reality
mobile web application? Nope. What about something as simple as skinning
the camera? Not with the current working draft of the MediaCapture API.&lt;/p&gt;

&lt;p&gt;Most mobile web browsers implement the HTML canvas element. So mobile
web gaming is possible. But what we really want is hardware accelerated
WebGL. It&amp;#39;s not here yet. We&amp;#39;re still waiting for the desktop
canvas apps to close the gap between their native desktop counterparts.
Mobile web gaming will not be competing with native mobile gaming
anytime soon.&lt;/p&gt;

&lt;h3&gt;Performance&lt;/h3&gt;

&lt;p&gt;Native is the clear winner here but with each new generation of phone
hardware the lead is becoming less noticeable. In fact, I&amp;#39;m going to
predict that in the 2nd half of 2012 (iPhone5, assuming Apple goes back
to the previous iPhone release cycle) for everything
except gaming, the difference will be negligible.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re getting closer and closer to the point of convergence. Hardware is
getting faster, JavaScript VMs are getting faster. Native and mobile web
apps will never be equally as fast, native will &lt;strong&gt;always&lt;/strong&gt; be faster.
With each generation of mobile hardware we will care less because the gap will continue to get asymptotically
smaller.&lt;/p&gt;

&lt;p&gt;This current performance gap can be felt most with &lt;a href="http://jquerymobile.com"&gt;jQuery
Mobile&lt;/a&gt;. We use jQuery Mobile, we believe in
it. On the latest iPhone 4S there is still a noticeable lag when
doing page trasitions, even on mobile web applications that have very few
pages of low complexity. The page enhancement algorithm does &lt;strong&gt;a lot&lt;/strong&gt; of
DOM manipulation and hoop jumping. Elements are pulled out of the DOM,
wrapped, reinserted. In the end it allows us to
provide very little markup and get some beautiful results.&lt;/p&gt;

&lt;p&gt;As of this writing jQuery Mobile is in 1.0 Release Candidate 2. On the bucket
list for 1.0 Gold is a &lt;a href="https://github.com/jquery/jquery-mobile/issues/2853"&gt;performance boost for page enhancement&lt;/a&gt;.
&lt;a href="https://twitter.com/#!/jquerymobile/status/133670336318291969"&gt;Most likely this will only have an effect upon very complex pages&lt;/a&gt;.
Closing the performance gap on jQuery Mobile is going to be a watershed
moment for mobile web application development.&lt;/p&gt;

&lt;h3&gt;Distribution&lt;/h3&gt;

&lt;p&gt;Nothing beats the web as a distribution platform. Every time I use a web
app I am on the latest version of that app. If there are any business
critical updates they are immediately available for everybody. Native
mobile applications are at a clear disadvantage here. We&amp;#39;re comparing a
passive opt-in system to an active apt-in system.&lt;/p&gt;

&lt;p&gt;One disadvantage (for now) that mobile web applications have is
accessibility after distribution. Native apps default to installing on
your phone, mobile web applications do not. Yes, you can save links to
the mobile web app and make it appear you have it installed. But what
about off-line mode?&lt;/p&gt;

&lt;h3&gt;Discovery&lt;/h3&gt;

&lt;p&gt;I&amp;#39;m going to argue that native applications win here. Finding a native
mobile application is easier than finding a mobile web application.
Google has made a large dent for the web with Chrome&amp;#39;s Omnibar. (btw,
why hasn&amp;#39;t everybody copied the omnibar? This should be the default for mobile
web browsers, screen real estate is already at a premium.)&lt;/p&gt;

&lt;p&gt;That being said, discovery for native is not great. We&amp;#39;ve
all see the studies where the Top 10 apps have a significantly skewed
download rate compared to the below Top 10. This is be expected. I don&amp;#39;t
understand why the mobile app stores have not put more effort into
perfecting discovery. I&amp;#39;m more likely to purchase an application that I
like if I can find it easily.&lt;/p&gt;

&lt;h3&gt;PhoneGap (Apache Callback)&lt;/h3&gt;

&lt;p&gt;If you&amp;#39;ve made it this far you&amp;#39;ve probably been yelling at your screen
&amp;quot;&lt;strong&gt;PhoneGap!&lt;/strong&gt;&amp;quot; to several of the points I&amp;#39;ve made above. Yes, PhoneGap solves many of these problems. But how do
we define a PhoneGap application? The technology stack I&amp;#39;m using is that
of a mobile web application: HTML, CSS, JavaScript. However, the
distribution and discovery systems I am using are that of a native
application. PhoneGap application straddle the fence between the two
worlds.&lt;/p&gt;

&lt;p&gt;For those that don&amp;#39;t know, PhoneGap extends a WebUI. It will add certain
functionality to the JavaScript API. Access to the camera, microphone,
file system &lt;a href="http://docs.phonegap.com/en/1.2.0/index.html"&gt;as well as many other wonderful features&lt;/a&gt;.
The PhoneGap developers were smart, they saw the W3C&amp;#39;s proposed API for
some of this and modeled the PhoneGap API after it. In fact, PhoneGap
should acts as a polyfill if certain functionality already exists.&lt;/p&gt;

&lt;p&gt;From a developer&amp;#39;s point of view, PhoneGap in most cases should be a no
brainer. I am most likely developing a web site alongside the mobile
application. The website is likely going to be sharing the
functionality of the mobile application. It makes sense if my
mobile application can share a technology stack with my web application.
I don&amp;#39;t have to employ a separate team to develop the mobile
application, and if you want to target more than one mobile platform
you&amp;#39;ll most likely have to employ more than one team.&lt;/p&gt;

&lt;p&gt;From our perspective PhoneGap gives us a
huge advantage. Why pay two teams to develop the same application when you
pay us once? Then when we hand off the team maintaining and developing
your website can also maintain and develop the mobile application. It&amp;#39;s
a no-brainer. In most cases.&lt;/p&gt;

&lt;p&gt;There are some serious issues with the PhoneGap project. The first of
which is the difficulty in reporting errors. This will hopefully change
now that the project is under Apache (as &lt;a href="http://wiki.phonegap.com/w/page/46311152/apache-callback-proposal"&gt;Apache Callback&lt;/a&gt;)
but the project has been split into different Github repos for each
platform. So there is one for &lt;a href="https://github.com/phonegap/phonegap-iphone"&gt;iOS&lt;/a&gt;, &lt;a href="https://github.com/phonegap/phonegap-android"&gt;Android&lt;/a&gt;, &lt;a href="https://github.com/phonegap/phonegap-wp7"&gt;Windows Phone 7&lt;/a&gt;, &lt;a href="https://github.com/phonegap/phonegap-blackberry-webworks"&gt;BlackBerry&lt;/a&gt;, &lt;a href="https://github.com/phonegap/phonegap-webos"&gt;WebOS&lt;/a&gt;, etc... they are all under separate development with very dedicated teams. If I find a common problem that affects all platforms (for example, &lt;a href="https://github.com/phonegap/phonegap-iphone/issues/280"&gt;a suggestion I proposed on how PhoneGap currently implements its File API&lt;/a&gt;) I have to report this issue individually on each platform. This is a very inefficient process.&lt;/p&gt;

&lt;p&gt;The second is the same issue stated above with the camera. While PhoneGap does give us the access to the camera we are still stuck
with the same experience we will have with the W3C MediaCapture API: no
camera customization, this is just a delegation with a callback. You can
hack together the camera experience you want if decide to write some
native code.&lt;/p&gt;

&lt;p&gt;The third is lack of any background processing. When I throw my PhoneGap
app into the background it does nothing. It would be nice if we could
get a callback in the PhoneGap API that allowed us to kick off function
if the app is sent to the background. When it is up front again give us
another callback to halt the previous function.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wiki.phonegap.com/w/page/36752779/PhoneGap%20Plugins"&gt;Check out the &amp;quot;Limitations&amp;quot; section on the PhoneGap wiki for some
others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PhoneGap is fantastic (despite some of the criticism I&amp;#39;ve stated). We have
high hopes for the project now that it is accepted into Apache.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Perhaps &lt;a href="http://techland.time.com/2011/11/09/mobile-flash-abandoned-for-html5-adobe-surrenders-apple-wins/?iid=tl-main-lede"&gt;Adobe&amp;#39;s announcement that they are abandoning Flash in
favor of HTML5 for mobile&lt;/a&gt; will be seen as the turning point when
mobile web application development begins to be a serious contender to
native. Or maybe it is just a coincidence that this buzz is happening
all at once. Either way, we&amp;#39;re happy
people are talking about this. Discussions, arguments, and all of the
attention in between are the best way to push this technology into the
future we all know is just a matter of time.&lt;/p&gt;

&lt;p&gt;As my friend &lt;a href="http://twitter.com/cykod"&gt;Pascal Rettig&lt;/a&gt; says: It is a great time to be a web developer.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>DockYard is launched!</title>
    <link rel="alternate" href="http://reefpoints.dockyard.com/2011/08/24/launch.html"/>
    <id>http://reefpoints.dockyard.com/2011/08/24/launch.html</id>
    <published>2011-08-24T00:00:00Z</published>
    <updated>2013-11-26T22:10:12-05:00</updated>
    <author>
      <name>Brian Cardarella</name>
    </author>
    <summary/>
    <content type="html">&lt;p&gt;DockYard has officially launched!&lt;/p&gt;

&lt;p&gt;Hoo-ray!&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/hooraybeer.jpg" alt="Hoo-ray!"&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
