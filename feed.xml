<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-36116f6c.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-06-27T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Ember Macros for DRY and Testable Code</title>
    <link rel="alternate" href="/2014/06/27/ember-macros-for-DRY-and-testable-code.html"/>
    <id>/2014/06/27/ember-macros-for-DRY-and-testable-code.html</id>
    <published>2014-06-27T00:00:00Z</published>
    <updated>2014-06-27T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h3&gt;Intro&lt;/h3&gt;

&lt;p&gt;This post in going to explore the idea of writing your own Ember macros
as a strategy for DRYing up and creating more modular Ember code. 
As you&amp;#39;ll see, besides the maintainability and flexibility benefits gained by DRYing
up and decoupling code, isolated code is significantly easier to test.
We&amp;#39;ll be using a sample application to illustrate refactoring some code
into a macro.&lt;/p&gt;

&lt;h3&gt;What is a Computed Property Macro?&lt;/h3&gt;

&lt;p&gt;A computed property macro can really be thought of as a function that returns the
definition of a computed property. Essentially, we are creating a function that will
define computed properties for us. They look something like this:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Defining a computed property macro&lt;/span&gt;
&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;greeting&lt;/span&gt;(dependentKey, greeting) {
  &lt;span class="keyword"&gt;return&lt;/span&gt; Ember.computed(dependentKey, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; greeting + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;, &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + dependentKey;
  });
}

&lt;span class="comment"&gt;// Consuming a computed property macro&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; Greeter = Ember.Object.extend({
  &lt;span class="key"&gt;user&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;englishGreeting&lt;/span&gt;: greeting(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hello&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;spanishGreeting&lt;/span&gt;: greeting(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hola&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

&lt;span class="keyword"&gt;var&lt;/span&gt; concierge = Greeter.create({ &lt;span class="key"&gt;user&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Narwin&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
concierge.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;englishGreeting&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="comment"&gt;// =&amp;gt; 'Hello, Narwin'&lt;/span&gt;
concierge.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;spanishGreeting&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="comment"&gt;// =&amp;gt; 'Hola, Narwin'&lt;/span&gt;

concierge.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Boomer&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
concierge.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;englishGreeting&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="comment"&gt;// =&amp;gt; 'Hello, Boomer'&lt;/span&gt;
concierge.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;spanishGreeting&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="comment"&gt;// =&amp;gt; 'Hola, Boomer'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So, why not just use a standard computed property? Macros give us the
ability to take common chunks of functionality and share them throughout
our code, allowing us to avoid re-writing the logic every time we need
it. &lt;/p&gt;

&lt;p&gt;Ember provides us with a bunch of useful computed macros
right out of the box. If you&amp;#39;re not familiar with them, you should
definitely &lt;a href="http://emberjs.com/api/#method_computed"&gt;check them out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we&amp;#39;ve covered our bases, lets move on to the sample app.&lt;/p&gt;

&lt;h3&gt;Sample App&lt;/h3&gt;

&lt;p&gt;The goal of our sample application is to track financial transactions
and to provide an overview of income and expenses for a given time frame.
Our app has a &lt;code&gt;Month&lt;/code&gt; model which has many &lt;code&gt;transactions&lt;/code&gt;. A &lt;code&gt;Month&lt;/code&gt; also
has &lt;code&gt;incomeTransactions&lt;/code&gt; (transactions with positive amounts) and
&lt;code&gt;expenseTransactions&lt;/code&gt; (transactions with negative amounts). Below are
tests and code for our &lt;code&gt;Month&lt;/code&gt; and &lt;code&gt;Transaction&lt;/code&gt; models.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/models/month.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; hasMany = DS.hasMany;
&lt;span class="keyword"&gt;var&lt;/span&gt; filter = Ember.computed.filter;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;transactions&lt;/span&gt;: hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="key"&gt;incomeTransactions&lt;/span&gt;: filter(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(transaction) {
      &lt;span class="comment"&gt;// Grab all transactions with a positive amount.&lt;/span&gt;
      &lt;span class="keyword"&gt;return&lt;/span&gt; transaction.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &amp;gt; &lt;span class="integer"&gt;0&lt;/span&gt;;
    }
  ),

  &lt;span class="key"&gt;expenseTransactions&lt;/span&gt;: filter(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(transaction) {
      &lt;span class="comment"&gt;// Grab all transactions with a negative amount.&lt;/span&gt;
      &lt;span class="keyword"&gt;return&lt;/span&gt; transaction.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &amp;lt; &lt;span class="integer"&gt;0&lt;/span&gt;;
    }
  )
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tests/unit/models/month-test.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; { test, moduleForModel } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; store, month, transactions, tran1, tran2, tran3, tran4;

moduleForModel(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;month&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Unit - Month Model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="key"&gt;needs&lt;/span&gt;: [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;model:transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;],

  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(container) {
    store = container.lookup(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;store:main&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

    month = &lt;span class="local-variable"&gt;this&lt;/span&gt;.subject({
      &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;June&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    });

    Ember.run(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
      tran1 = store.createRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;100&lt;/span&gt; });
      tran2 = store.createRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;200&lt;/span&gt; });
      tran3 = store.createRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;300&lt;/span&gt; });
      tran4 = store.createRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;400&lt;/span&gt; });

      transactions = [tran1, tran2, tran3, tran4];

      month.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).addObjects(transactions);
    });
  }
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTransactions returns positive transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; results = month.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  deepEqual(results, [tran1, tran2]);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTransactions returns negative transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; results = month.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  deepEqual(results, [tran3, tran4]);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;app/models/transaction.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; attr = DS.attr;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;amount&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;number&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The month controller will handle computing the &lt;code&gt;incomeTotal&lt;/code&gt; and
&lt;code&gt;expenseTotal&lt;/code&gt; for the month.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/controllers/month.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; computed = Ember.computed;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.ObjectController.extend({
  &lt;span class="key"&gt;incomeTotal&lt;/span&gt;: computed(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTransactions.[]&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// Get the amount for each transaction in incomeTransactions.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; amounts = &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).mapBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

    &lt;span class="comment"&gt;// Sum the amounts&lt;/span&gt;
    &lt;span class="keyword"&gt;return&lt;/span&gt; amounts.reduce(&lt;span class="keyword"&gt;function&lt;/span&gt;(previousValue, currentValue) {
      &lt;span class="keyword"&gt;return&lt;/span&gt; previousValue += currentValue;
    }, &lt;span class="integer"&gt;0&lt;/span&gt;);
  }),

  &lt;span class="key"&gt;expenseTotal&lt;/span&gt;: computed(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTransactions.[]&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// Get the amount for each transaction in expenseTransactions.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; amounts = &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).mapBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

    &lt;span class="comment"&gt;// Sum the amounts&lt;/span&gt;
    &lt;span class="keyword"&gt;return&lt;/span&gt; amounts.reduce(&lt;span class="keyword"&gt;function&lt;/span&gt;(previousValue, currentValue) {
      &lt;span class="keyword"&gt;return&lt;/span&gt; previousValue += currentValue;
    }, &lt;span class="integer"&gt;0&lt;/span&gt;);
  })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tests/unit/controllers/month-test.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
56
57
58
59
&lt;strong&gt;60&lt;/strong&gt;
61
62
63
64
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; { test, moduleFor } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; set = Ember.set;

&lt;span class="keyword"&gt;var&lt;/span&gt; monthController, incomeTransactions, expenseTransactions;

moduleFor(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller:month&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Unit - Month Controller&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    incomeTransactions = [
      { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;100&lt;/span&gt; },
      { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;200&lt;/span&gt; }
    ];

    expenseTransactions = [
      { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;300&lt;/span&gt; },
      { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;400&lt;/span&gt; }
    ];

    monthController = &lt;span class="local-variable"&gt;this&lt;/span&gt;.subject({
      &lt;span class="key"&gt;incomeTransactions&lt;/span&gt;: incomeTransactions,
      &lt;span class="key"&gt;expenseTransactions&lt;/span&gt;: expenseTransactions
    });
  }
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTotal returns the total of all incomeTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; result = monthController.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTotal&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  equal(result, &lt;span class="integer"&gt;300&lt;/span&gt;);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTotal recomputes when an incomeTransaction is added&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; newTransaction = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;500&lt;/span&gt; };

  monthController.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).addObject(newTransaction);

  &lt;span class="keyword"&gt;var&lt;/span&gt; result = monthController.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTotal&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  equal(result, &lt;span class="integer"&gt;800&lt;/span&gt;);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTotal returns the total of all expenseTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; result = monthController.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTotal&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  equal(result, -&lt;span class="integer"&gt;700&lt;/span&gt;);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTotal recomputes when an expenseTransaction is added&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; newTransaction = { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;600&lt;/span&gt; };

  monthController.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).addObject(newTransaction);

  &lt;span class="keyword"&gt;var&lt;/span&gt; result = monthController.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTotal&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  equal(result, -&lt;span class="integer"&gt;1300&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If your spidey senses are tingling, they should be. There is a lot of
duplication going on in above code. In fact, the only difference between &lt;code&gt;incomeTotal&lt;/code&gt; and
&lt;code&gt;expenseTotal&lt;/code&gt; is which set of transactions they are working with (incomeTransactions
or expenseTransactions). Similarly, the only difference between &lt;code&gt;incomeTransactions&lt;/code&gt; and &lt;code&gt;expenseTransactions&lt;/code&gt;
is whether the amount is a positive or negative number. Let&amp;#39;s write a couple of macros to DRY up this code.&lt;/p&gt;

&lt;h3&gt;Creating custom Ember Macros&lt;/h3&gt;

&lt;p&gt;Both &lt;code&gt;incomeTotal&lt;/code&gt; and &lt;code&gt;expenseTotal&lt;/code&gt; have almost exactly the same
logic. The goal of each is to take an array of objects and return the
sum of a specific property on each object. Let&amp;#39;s create a &lt;code&gt;sumBy&lt;/code&gt; macro
with the goal of being able to write something like: &lt;code&gt;sumBy(&amp;#39;array&amp;#39;, &amp;#39;property&amp;#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/utils/sum-by.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; &lt;span class="keyword"&gt;function&lt;/span&gt;(collection, property) {
  &lt;span class="keyword"&gt;return&lt;/span&gt; Ember.reduceComputed(collection, {
    &lt;span class="key"&gt;initialValue&lt;/span&gt;: &lt;span class="float"&gt;0.0&lt;/span&gt;,

    &lt;span class="function"&gt;addedItem&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(accumulatedValue, item){
      &lt;span class="keyword"&gt;return&lt;/span&gt; accumulatedValue + Ember.get(item, property);
    },

    &lt;span class="function"&gt;removedItem&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(accumulatedValue, item){
      &lt;span class="keyword"&gt;return&lt;/span&gt; accumulatedValue - Ember.get(item, property);
    }
  });
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tests/utils/sum-by.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; { test } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; sumBy from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;../../../utils/sum-by&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; set = Ember.set;

&lt;span class="keyword"&gt;var&lt;/span&gt; bankAccount, transactions, tran1, tran2, tran3, tran4;

module(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Unit - SumBy&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    tran1 = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt; };
    tran2 = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt; };
    tran3 = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt; };
    tran4 = { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;4&lt;/span&gt; };

    transactions = [tran1, tran2, tran3, tran4];

    bankAccount = Ember.Object.extend({
      &lt;span class="key"&gt;transactions&lt;/span&gt;: transactions,
      &lt;span class="key"&gt;totalAmount&lt;/span&gt;: sumBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
    }).create();
  }
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;returns the sum of property for all objects in collection&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; actual = bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;totalAmount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  deepEqual(actual, &lt;span class="integer"&gt;2&lt;/span&gt;);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;recomputes when a new object is added to the collection&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;2&lt;/span&gt;);
  deepEqual(bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;totalAmount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;), &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;precondition&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; newTrans = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;10&lt;/span&gt; };

  bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).addObject(newTrans);

  &lt;span class="keyword"&gt;var&lt;/span&gt; actual = bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;totalAmount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  deepEqual(actual, &lt;span class="integer"&gt;12&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;incomeTransactions&lt;/code&gt; and &lt;code&gt;expenseTransactions&lt;/code&gt; could also use some
DRYing up. The only difference between the two is whether they are
filtering by positive of negative numbers. Let&amp;#39;s write a &lt;code&gt;filterBySign&lt;/code&gt;
macro with the goal of being able to write something like: 
&lt;code&gt;filterBySign(&amp;#39;array&amp;#39;, &amp;#39;property&amp;#39;, &amp;#39;+&amp;#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/utils/filter-by-sign.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; get = Ember.get;
&lt;span class="keyword"&gt;var&lt;/span&gt; filter = Ember.computed.filter;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; &lt;span class="keyword"&gt;function&lt;/span&gt;(collection, property, sign) {
  &lt;span class="keyword"&gt;return&lt;/span&gt; filter(collection, &lt;span class="keyword"&gt;function&lt;/span&gt;(object) {
    &lt;span class="keyword"&gt;return&lt;/span&gt; (sign + &lt;span class="integer"&gt;1&lt;/span&gt;) * get(object, property) &amp;gt; &lt;span class="integer"&gt;0&lt;/span&gt;;
  });
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tests/unit/utils/filter-by-sign-test.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; { test } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; filterBySign from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;../../../utils/filter-by-sign&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; bankAccount, transactions, tran1, tran2, tran3, tran4;

module(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Unit - filterBySign&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    tran1 = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt; };
    tran2 = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt; };
    tran3 = { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;3&lt;/span&gt; };
    tran4 = { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;4&lt;/span&gt; };

    transactions = [tran1, tran2, tran3, tran4];

    bankAccount = Ember.Object.extend({
      &lt;span class="key"&gt;transactions&lt;/span&gt;: transactions,
      &lt;span class="key"&gt;positiveTransactions&lt;/span&gt;: filterBySign(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;+&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
      &lt;span class="key"&gt;negativeTransactions&lt;/span&gt;: filterBySign(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;-&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
    }).create();
  }
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;'+' returns all objects with positive property values&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; actual = bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;positiveTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; expected = [tran1, tran2];

  deepEqual(actual, expected);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;'-' returns all objects with negative property values&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; actual = bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;negativeTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; expected = [tran3, tran4];

  deepEqual(actual, expected);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;recomputes when a new object is added to the dependent array&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
&lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;2&lt;/span&gt;);
  deepEqual(bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;positiveTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;), [tran1, tran2]);

  &lt;span class="keyword"&gt;var&lt;/span&gt; newTrans = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;1000&lt;/span&gt; };
  bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).addObject(newTrans);

  &lt;span class="keyword"&gt;var&lt;/span&gt; actual = bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;positiveTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; expected = [tran1, tran2, newTrans];

  deepEqual(actual, expected);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When reading through the tests for &lt;code&gt;filterBySign&lt;/code&gt;, note how much easier the setup is compared
to our original tests for the same functionality on the &lt;code&gt;Month&lt;/code&gt; model. Because
we&amp;#39;re testing the code in isolation, we&amp;#39;re able to use POJOs
and arrays to test our code. This allows us to avoid having to work
around the &lt;code&gt;Month&lt;/code&gt; model&amp;#39;s relationships, creating records with the
store and wrapping our setup code in an &lt;code&gt;Ember.run&lt;/code&gt; to handle async
behavior. Much nicer!&lt;/p&gt;

&lt;h3&gt;Refactoring the Month Model and Controller&lt;/h3&gt;

&lt;p&gt;We can now refactor our month model and controller to use our new
macros.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/model/month.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; filterBySign from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;../utils/filter-by-sign&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; hasMany = DS.hasMany;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;transactions&lt;/span&gt;: hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="key"&gt;incomeTransactions&lt;/span&gt;: filterBySign(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;+&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;expenseTransactions&lt;/span&gt;: filterBySign(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;-&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;app/controllers/month.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; sumBy from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;../utils/sum-by&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.ObjectController.extend({
  &lt;span class="key"&gt;incomeTotal&lt;/span&gt;: sumBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;expenseTotal&lt;/span&gt;: sumBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The refactored model and controller are nice and concise while still
maintaining their readability. We can now delete our old unit tests on
our &lt;code&gt;Month&lt;/code&gt; model and controller as they now overlap with our macro tests.
The net result is trimming down the code we have to maintain by about
half.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re thinking about writing a macro or just want to see what other macros
are out there, check out &lt;a href="https://github.com/jamesarosen/ember-cpm"&gt;ember-cpm&lt;/a&gt;. 
It&amp;#39;s a library of non-core macros that you can plug in to you Ember app.
If you can&amp;#39;t find what you&amp;#39;re looking for there, take a shot at writing
your own macro and send in a pull request to share it with the
community!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Introducing Ember CLI Addons</title>
    <link rel="alternate" href="/2014/06/24/introducing_ember_cli_addons.html"/>
    <id>/2014/06/24/introducing_ember_cli_addons.html</id>
    <published>2014-06-24T00:00:00Z</published>
    <updated>2014-06-24T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Distribution of reusable Ember.js libraries has been a pain point for quite a while. During application development we have frequently wished for a silver bullet for the sharing of concepts/code from one project to another.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/stefanpenner/ember-cli"&gt;Ember CLI&lt;/a&gt; has given us the opportunity to set the conventions for sharing that we have been searching for.&lt;/p&gt;

&lt;p&gt;Over the last few weeks we have been focusing our efforts on the Ember CLI Addon story, and current support the following scenarios out of the box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Performing operations on the &lt;code&gt;EmberApp&lt;/code&gt; created in the consuming applications &lt;code&gt;Brocfile.js&lt;/code&gt;. The most common things this would be used to call &lt;code&gt;app.import&lt;/code&gt; (see &lt;a href="http://iamstef.net/ember-cli/#managing-dependencies"&gt;Ember CLI - Managing Dependencies&lt;/a&gt; for more details) or process the various options provided by the consuming application. Examples: &lt;a href="https://github.com/rjackson/ember-cli-pretender"&gt;ember-cli-pretender&lt;/a&gt;, &lt;a href="https://github.com/firebase/emberFire"&gt;emberFire&lt;/a&gt;, and &lt;a href="https://github.com/rjackson/ember-cli-ic-ajax"&gt;ember-cli-ic-ajax&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adding preprocessors to the default registry. This allows us to use a custom preprocessor to handle our templates, JavaScript, and/or styles. Example: &lt;a href="https://github.com/rjackson/ember-cli-esnext"&gt;ember-cli-esnext&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Providing a custom application tree to be merged with the consuming application. This allows you to distribute anything that might need to be imported in the consuming application; including components, templates, routes, mixins, helpers, etc. Example: &lt;a href="https://github.com/rondale-sc/ember-cli-super-number"&gt;ember-cli-super-number&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Providing custom express middlewares. This allows for an addon to completely customize the development servers behaviors, making things like automated mock Ember Data API&amp;#39;s actually possible. This is currently only available on master (will be available in  0.0.37 and higher).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the design goals that the current crop of example addons follow is that they can all be installed and used simply via:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm install --save-dev &amp;lt;package name&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Details&lt;/h2&gt;

&lt;h3&gt;Discovery&lt;/h3&gt;

&lt;p&gt;Ember CLI detects the presence of an addon by inspecting each of your applications dependencies and searching their &lt;code&gt;package.json&lt;/code&gt; files for the presence of &lt;code&gt;ember-addon&lt;/code&gt; in the keywords section. &lt;/p&gt;

&lt;h3&gt;Creation&lt;/h3&gt;

&lt;p&gt;Once the available addons are detected, Ember CLI will require the addon.  By default it will use standard Node.js require rules (see &lt;a href="http://nodejs.org/api/modules.html#modules_all_together"&gt;here&lt;/a&gt; for a breakdown), but you can provide a custom entry point by specifying a &lt;code&gt;ember-addon-main&lt;/code&gt; property in your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Either way you go, during the various commands that cause a new build to be done (&lt;code&gt;ember server&lt;/code&gt;, &lt;code&gt;ember test&lt;/code&gt;, &lt;code&gt;ember build&lt;/code&gt;, etc) Ember CLI will create a new instance of the class that your addon returns passing it the &lt;code&gt;Project&lt;/code&gt; instance for the current project. The &lt;code&gt;Project&lt;/code&gt; model has a few functions that might be useful to your addon. You can see a full list by inspecting the &lt;a href="https://github.com/stefanpenner/ember-cli/blob/master/lib/models/project.js"&gt;source&lt;/a&gt;, but to name a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;require&lt;/code&gt; -- Lets you require files or packages from the consuming application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config&lt;/code&gt; -- Returns the configuration for the provided environment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resolve&lt;/code&gt; -- Looks up a file from the root of the project using standard Node require semantics, but with the projects root as the base directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Build Process Inclusion&lt;/h3&gt;

&lt;p&gt;When the consuming application&amp;#39;s &lt;code&gt;Brocfile.js&lt;/code&gt; is processed by Ember CLI to build/serve/etc the addon&amp;#39;s &lt;code&gt;included&lt;/code&gt; function is called passing the &lt;code&gt;EmberApp&lt;/code&gt; instance. You can use this to access the options provided (for configuration of your addon for example).&lt;/p&gt;

&lt;h3&gt;Intra Build Hooks&lt;/h3&gt;

&lt;p&gt;There are a few other points in the build process that your addon can hook into via the &lt;code&gt;treeFor&lt;/code&gt; function. &lt;code&gt;treeFor&lt;/code&gt; is called to setup the final build output for a few specific points in the build process. The addons &lt;code&gt;treeFor&lt;/code&gt; function will be called with an argument that signifies which tree is being asked for.&lt;/p&gt;

&lt;p&gt;Currently, the following trees can be customized by the addon:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app&lt;/code&gt; -- The tree returned by your addon for the &lt;code&gt;app&lt;/code&gt; tree will be merged with that of the application. This is an excellent place to add custom initializers for your addon, add routes/controllers/views/components/templates/etc (anything that goes in &lt;code&gt;app/&lt;/code&gt; really). For additional information read through the &lt;a href="http://hashrocket.com/blog/posts/building-ember-addons"&gt;blog post&lt;/a&gt; describing how &lt;code&gt;ember-cli-super-number&lt;/code&gt; was turned into an addon.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;styles&lt;/code&gt; -- The tree returned by your addon for the &lt;code&gt;styles&lt;/code&gt; tree will be merged with your applications styles (generally &lt;code&gt;app/styles/&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vendor&lt;/code&gt; -- The tree returned by your addon for the &lt;code&gt;vendor&lt;/code&gt; tree will be merged with your applications vendor tree (generally &lt;code&gt;vendor/&lt;/code&gt;). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the trees returned by addons are merged into the corresponding tree in the application. The application&amp;#39;s direct trees are always last so they will always override any files from an addon. This actually makes a wonderful place for application specific customization: your addon could provide a good default template, and the application can override by simply placing their own template in the same path.&lt;/p&gt;

&lt;h2&gt;Future&lt;/h2&gt;

&lt;p&gt;Many things are still planned for the &amp;quot;Addon Story&amp;quot; in Ember CLI. A few of them below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow addons to specify preferred ordering (before or after another addon). Similar in concept (and stolen from) the Ember initializer ordering. This is implemented on master and will be included in 0.0.37.&lt;/li&gt;
&lt;li&gt;Allow addons to provide a &lt;code&gt;blueprintPaths&lt;/code&gt; function that will return addition paths for blueprints to be looked up. This will allow an addon to override internal blueprints or add their own.&lt;/li&gt;
&lt;li&gt;Allow more than one preprocessor to be used at once. Currently, it is only possible to have a single preprocessor, but this is a limitation if you want both SCSS and plain CSS (for example).&lt;/li&gt;
&lt;li&gt;Expose post-processed stages. This will allow for better customization of the final output which things like &lt;a href="https://github.com/ai/autoprefixer"&gt;autoprefixer&lt;/a&gt; would be able to take advantage of.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Call To Arms&lt;/h2&gt;

&lt;p&gt;This API is still very fluid and not set in stone. We need as much feedback as possible to truly solidify things.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>KAPOW! Writing prototypes with Framer</title>
    <link rel="alternate" href="/2014/06/23/kapow-using-framer.html"/>
    <id>/2014/06/23/kapow-using-framer.html</id>
    <published>2014-06-23T00:00:00Z</published>
    <updated>2014-06-23T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;#39;ve finally used &lt;a href="http://framerjs.com/"&gt;Framer&lt;/a&gt; on a client project and couldn&amp;#39;t be happier with the result. I normally use &lt;a href="http://www.invisionapp.com/"&gt;InVision&lt;/a&gt; and highly recommend it, but Framer is the obvious choice when we need the experience to feel significantly more real.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.cooper.com/journal/2013/07/designers-toolkit-proto-testing-for-prototypes"&gt;Every tool has its pros and cons&lt;/a&gt;, however, so it won&amp;#39;t &lt;em&gt;always&lt;/em&gt; be the best choice for you.&lt;/p&gt;

&lt;p&gt;Let me start with Framer&amp;#39;s big con: you must write JavaScript to knit a prototype together. The code itself is very easy to learn, but understanding how the Framer script interacts with your PSD&amp;#39;s groups and layer organization is like flying blind. With practice you can get past this and work gets much, much faster.&lt;/p&gt;

&lt;p&gt;The one other con is that their documentation is made more for developers than designers. So if you&amp;#39;re not used to digging into developer docs you will likely be overwhelmed and unsure what you&amp;#39;re looking for. Looking elsewhere won&amp;#39;t help you either, there doesn&amp;#39;t seem to be much community around this (yet).&lt;/p&gt;

&lt;p&gt;Someone with less coding experience will find Framer difficult and more intimidating than it has to be. I&amp;#39;d recommend dealing with the learning curve by practicing on a few side projects before you put anything important on the line (not that side projects aren&amp;#39;t important).&lt;/p&gt;

&lt;p&gt;Where Framer really shines bright: you won&amp;#39;t have to verbalize (or make embarrassing gestures) for how your app should feel, because you define that with enormous control. Oddly enough, the biggest con is your ally here, as writing custom JavaScript is what makes this control possible.&lt;/p&gt;

&lt;p&gt;Framer supports clicks and taps just the same, supports many animation options, is highly configurable, and runs very, very smoothly on all (of my) devices. I&amp;#39;ve tested it on iPhone, iPad, and a Mac. Because of this control and variability of use, your prototypes will feel much more real to the user in a testing scenario. This is especially good when your interactions help communicate state and position.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;ve used Framer before, let me know how you like it. There&amp;#39;s only so much time in the world to play with prototyping tools, but my next experiment will be with &lt;a href="http://facebook.github.io/origami/"&gt;Origami&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Bonus!&lt;/h2&gt;

&lt;p&gt;While doing user testing sessions, you may want the testee to work on the actual device. To do so you can use &lt;a href="http://anvilformac.com/"&gt;Anvil&lt;/a&gt; to create a local web address using &lt;a href="http://pow.cx/"&gt;Pow&lt;/a&gt;. This will give you an address (something like &lt;code&gt;http://yourappname.youripaddress.xip.io/&lt;/code&gt;) that you may access on your device.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Goodbye Heroku</title>
    <link rel="alternate" href="/2014/06/23/goodbye-heroku.html"/>
    <id>/2014/06/23/goodbye-heroku.html</id>
    <published>2014-06-23T00:00:00Z</published>
    <updated>2014-06-23T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;#39;ve been a Heroku user since the beginning. And I understand they have
had their ups and downs but over the past 2 years the service has been
degrading and today was the last straw for me. Allow me to elaborate.&lt;/p&gt;

&lt;h2&gt;Downtime&lt;/h2&gt;

&lt;p&gt;Today Heroku had a &amp;quot;Scheduled Maintenance at 2pm EST&amp;quot;. First of all,
this is just stupid. Don&amp;#39;t schedule a maintenance period at 2pm EST for
&lt;strong&gt;anything&lt;/strong&gt;. That period of time has to be one of the most heavily
trafficked timeslots on the web. Its an hour after everyone on the East
Coast has come back from lunch. It is an hour before lunch on the West
Coast. This, to me, demonstrates a lack of judgement on Heroku&amp;#39;s part. I
know the counter-argument is going to be &amp;quot;we&amp;#39;ve done plenty of other
scheduled maintenances at 2pm EST without incident&amp;quot;. My reply is that
this counter-argument is &lt;em&gt;bullshit&lt;/em&gt;. Just because you got away without
problems previously doesn&amp;#39;t mean they won&amp;#39;t happen in the future. Things
go wrong, people screw up. When Heroku has control over when those
screwups occur and they choose to push that risk at 2pm EST that is a
problem.&lt;/p&gt;

&lt;h2&gt;Reporting of Downtime&lt;/h2&gt;

&lt;p&gt;I am convinced their Status team just sits on Twitter all day and waits
for enough people to bitch and complain that Heroku is down before they
update the status page. I don&amp;#39;t care what data they provide to the
contrary. Why is the updated status page important? When our customers
email us during our vacation pissed off that we are not around and we
have &lt;em&gt;nothing&lt;/em&gt; to show to them to prove that this is Heroku&amp;#39;s fault and
not ours, to me that status page being updated immediately &lt;strong&gt;before&lt;/strong&gt;
our customers discover on their own is very important.&lt;/p&gt;

&lt;h2&gt;Price&lt;/h2&gt;

&lt;p&gt;It has been heavily reported that AWS has cut their pricing quite a bit
over the past few years. Yet, how many times has Heroku reduced its
price? (Heroku resells AWS) To my knowledge &lt;strong&gt;zero&lt;/strong&gt;. So everytime Amazon
reduces EC2 pricing Heroku just pockets the difference and gives a &amp;quot;fuck
you very much!&amp;quot; to all of its customers.&lt;/p&gt;

&lt;h2&gt;Fixes for All&lt;/h2&gt;

&lt;p&gt;The major downside to hosted devops is that when something goes wrong
that affects everyone you usually have to wait until they make the fix
for &lt;strong&gt;everyone&lt;/strong&gt; before your app comes back up. What should probably be
a 5 minute downtime &lt;em&gt;at most&lt;/em&gt; turns into a 30 minute downtime &lt;strong&gt;at least&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Buildpacks&lt;/h2&gt;

&lt;p&gt;Buildpacks are just terrible.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I get that I&amp;#39;m ranting and I&amp;#39;m pretty pissed off. But mistakes like
today&amp;#39;s are completely avoidable yet Heroku chose to expose everyone to
this increased risk for no good reason that I can see.&lt;/p&gt;

&lt;p&gt;We will no longer be starting any new customers on Heroku. And we will
recommend to our current customers to move off of Heroku. We&amp;#39;re big fans
of Digital Ocean so we&amp;#39;re likely to land there as our preferred hosting
service.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Making the DIY conference badges</title>
    <link rel="alternate" href="/2014/06/21/making-the-diy-badges.html"/>
    <id>/2014/06/21/making-the-diy-badges.html</id>
    <published>2014-06-21T00:00:00Z</published>
    <updated>2014-06-21T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;What are badges for, anyway? At any professional event with more than fifteen people, we wear some sort of name tag.&lt;/p&gt;

&lt;h2&gt;The current situation with badges:&lt;/h2&gt;

&lt;p&gt;If it&amp;#39;s a smaller or low budget event, you get a shipping label and write your name with a sharpie, then stick to your shirt and hope it holds. (I always stick mine to a pant leg just because.) &lt;/p&gt;

&lt;p&gt;A step up would be vinyl stickers or shipping labels with something like the conference name printed on them, but again attendees must write their name. &lt;/p&gt;

&lt;p&gt;At the highest level of badge, you arrive an event and receive a fully branded badge on a colorful lanyard with your name and photo printed on both sides, to prevent you from lending your $800 conference pass to a friend.&lt;/p&gt;

&lt;h2&gt;Three things badges do best:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Prove that you&amp;#39;ve paid for your ticket&lt;/li&gt;
&lt;li&gt;Help brand the event&lt;/li&gt;
&lt;li&gt;Help you meet people&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our focus for the badges was mostly to help people meet and talk, and if we get to show off the Wicked Good Conferences brand - that&amp;#39;s cool too. We did not rely on the badges for ticketing because the event is relatively small, and held in a single location. There were no repeated check-ins at the door or strangers walking in off the relatively low traffic street.&lt;/p&gt;

&lt;p&gt;This allowed me the freedom to experiment with the badges. The only restriction was the budget; we wanted to make about 200 customizable name badges with a budget range of $20–$50. This is not a realistic budget for high quality &amp;quot;professionally&amp;quot; printed badges (decent custom lanyards alone are at least $1 each).&lt;/p&gt;

&lt;h2&gt;No printed names&lt;/h2&gt;

&lt;p&gt;We decided to skip printing people&amp;#39;s names altogether, and ask them to write names instead. This also allowed people to put a twitter handle and other useful information on the badges, and be funny with them. I am an introvert, so I appreciate any excuse to start a conversation. Stickers, twitter handles and stick figures on badges helped make interaction easier.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/post-assets/maria/DIY-badges-01.jpg" alt=""&gt;&lt;/p&gt;

&lt;h2&gt;No printed lanyards&lt;/h2&gt;

&lt;p&gt;Custom printed lanyards, in the quality we wanted, were way above our budget. Instead, we tried a few DIY ideas: string, ribbon, rope and strips of jersey fabric. The fabric turned out to be the most comfortable to wear. Knit jersey (&amp;quot;tee-shirt&amp;quot;) fabric will roll into a soft string if you cut 1&amp;quot; wide strips and stretch them out. We used about 2.5 yards of 52&amp;quot; wide fabric to make the 200 strips. We could make the strips a half to a third of the width of the fabric, depending on how long we wanted the strips to be.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/post-assets/maria/DIY-badges-02.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;An added benefit of using fabric is a much better selection of colors compared to lanyards. We managed to get a near-perfect match to our attendee shirts!&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/post-assets/maria/DIY-badges-03.jpg" alt=""&gt;&lt;/p&gt;

&lt;h2&gt;Actually, no printed anything&lt;/h2&gt;

&lt;p&gt;To make a color impression at a low cost we used a rubber stamp with a purple ink pad. We did not commit to placing any sponsor logos on the badges, so I had complete freedom with this design. We ordered a rubber stamp of the Wicked Good Conferences logo by itself so we can reuse it for the next conferences. To make the badge itself, we stamped and punched a hole in standard 3×5&amp;quot; index cards.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/post-assets/maria/DIY-badges-04.jpg" alt=""&gt;
&lt;img src="/images/post-assets/maria/DIY-badges-05.jpg" alt=""&gt;&lt;/p&gt;

&lt;h2&gt;Budget breakdown&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1×2&amp;quot; Custom rubber stamp&amp;quot;: $12 + shipping&lt;/li&gt;
&lt;li&gt;Purple ink pad: $3.50&lt;/li&gt;
&lt;li&gt;Index cards, 2 packs of 100: ~$7&lt;/li&gt;
&lt;li&gt;Single hole punch: ~$5&lt;/li&gt;
&lt;li&gt;Jersey fabric (we already had it, but if you need to buy it cost about $5/yard): free or $15&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Lessons learned&lt;/h2&gt;

&lt;p&gt;The badges felt about right for the event, not too formal, not too shabby. Some lanyards turned out a bit short, but people were creative with placement, wearing them not only around the neck but on a sleeve, on the hat, tying them to the belt loop or a shirt button, and even wearing as a soft choker.
Next time around we can also experiment with other paper types and have the paper cut to size, to allow for a sturdier badge in a wider range of colors.&lt;/p&gt;

&lt;p&gt;Were you at WGE? Let us know what you thought of the DIY badges!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Swift and JavaScript</title>
    <link rel="alternate" href="/2014/06/15/swift-and-javascript.html"/>
    <id>/2014/06/15/swift-and-javascript.html</id>
    <published>2014-06-15T00:00:00Z</published>
    <updated>2014-06-15T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;You might have already heard about a new language from Apple, &lt;a href="https://developer.apple.com/swift/"&gt;Swift&lt;/a&gt;.
If you haven&amp;#39;t, make sure to check it out. This is the language that is going to replace &lt;a href="https://en.wikipedia.org/wiki/Objective-C"&gt;Objective-C&lt;/a&gt; in the future.&lt;/p&gt;

&lt;p&gt;So why should a JavaScript developer be excited about a language like Swift?
Because semicolons are optional in Swift, too.&lt;/p&gt;

&lt;h3&gt;Variables&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s declare a variable in &lt;code&gt;JavaScript&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; country = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Argentina&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s how the same declaration looks like in Swift:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;var country: String = &amp;quot;Argentina&amp;quot;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, the same statement can be rewritten as such:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;var country = &amp;quot;Argentina&amp;quot;; // inferred as String
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Swift uses type inference. It looks on the right hand side of the assignment
to figure out the type of the variable.&lt;/p&gt;

&lt;p&gt;Swift is type safe language. It performs type checks during compilation time
and informs you if there are any type mismatch errors. Unlike in JavaScript,
that means that after you defined &lt;code&gt;country&lt;/code&gt; variable and its type was
inferred to be &lt;code&gt;String&lt;/code&gt;, you can&amp;#39;t re-assign with another type:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;country = 2; // Cannot convert the expression's type to type 'String'
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Constants&lt;/h3&gt;

&lt;p&gt;JavaScript doesn&amp;#39;t have a concept of a &lt;code&gt;constant&lt;/code&gt;. All &amp;quot;constants&amp;quot; are just
variables (typically in the outer scope). You can &amp;quot;freeze&amp;quot; the object using
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"&gt;Object.freeze()&lt;/a&gt;
to prevent new properties to be added and existing properties to be removed.&lt;/p&gt;

&lt;p&gt;The next version of JavaScript is going to introduce &lt;a href="https://people.mozilla.org/%7Ejorendorff/es6-draft.html#sec-13.2.1"&gt;const&lt;/a&gt;
keyword and will support constants:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;const y = &lt;span class="integer"&gt;10&lt;/span&gt;; &lt;span class="comment"&gt;// Note that you need to specift the value of the constant&lt;/span&gt;
y = &lt;span class="integer"&gt;20&lt;/span&gt;;       &lt;span class="comment"&gt;// SyntaxError: Assignment to constant variable&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you want to define a constant in Swift, you will use &lt;code&gt;let&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;let bestCity = &amp;quot;Boston&amp;quot;;
bestCity = &amp;quot;Cape Town&amp;quot;; // Cannot assign to 'let' value 'bestCity'

// Swift allows you to use underscore as a delimiter
// to improve readability of your code
let oneMillion = 1_000_000;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Tuples&lt;/h3&gt;

&lt;p&gt;So what is a &lt;a href="http://en.wikipedia.org/wiki/Tuple"&gt;tuple&lt;/a&gt;? TL;DR it&amp;#39;s an ordered list of things.&lt;/p&gt;

&lt;p&gt;You can think of a tuple as if it&amp;#39;s an object:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; villain = {
  &lt;span class="key"&gt;name&lt;/span&gt;:     &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Magneto&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;realName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Max Eisenhardt&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;powers&lt;/span&gt;:   [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Magnetic flight&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Magnetic force fields&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;]
};

villain.name; &lt;span class="comment"&gt;// =&amp;gt; 'Magneto'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In Swift, the declaration of a tuple will look like this:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;let villain = (
  name:     &amp;quot;Magneto&amp;quot;,
  realName: &amp;quot;Max Eisenhardt&amp;quot;,
  powers:   [&amp;quot;Magnetic flight&amp;quot;, &amp;quot;Magnetic force fields&amp;quot;]
);

villain.name; // =&amp;gt; &amp;quot;Magneto&amp;quot;
villain.1;    // =&amp;gt; &amp;quot;Max Eisenhardt&amp;quot;
villain.2;    // =&amp;gt; [...]
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Tuples are useful when you want to return multiple values from a function as a single compound value (that is
exactly what we do so often in JavaScript).&lt;/p&gt;

&lt;h3&gt;Arrays and Dictionaries&lt;/h3&gt;

&lt;p&gt;Definining an array or a dictionary looks very similar.&lt;/p&gt;

&lt;p&gt;In JavaScript:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; names = [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Alex&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Rob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Dan&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;];
&lt;span class="keyword"&gt;var&lt;/span&gt; ages  = { &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Alex&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;13&lt;/span&gt;, &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Rob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt;, &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Dan&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;4&lt;/span&gt; };

names[&lt;span class="integer"&gt;0&lt;/span&gt;];     &lt;span class="comment"&gt;// =&amp;gt; 'Alex'&lt;/span&gt;
ages[&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Alex&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;]; &lt;span class="comment"&gt;// =&amp;gt; 13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In Swift:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;var names = [&amp;quot;Alex&amp;quot;, &amp;quot;Rob&amp;quot;, &amp;quot;Dan&amp;quot;];
var ages  = [&amp;quot;Alex&amp;quot;: 13, &amp;quot;Rob&amp;quot;: 5, &amp;quot;Dan&amp;quot;: 4];

names[0];     // =&amp;gt; &amp;quot;Alex&amp;quot;
ages[&amp;quot;Alex&amp;quot;]; // 13
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Generics&lt;/h3&gt;

&lt;p&gt;In a very generic, hand wavy terms &lt;code&gt;Generics&lt;/code&gt; introduce type safety and reusability of the code. They&amp;#39;re frequently used
in classes and methods that operate on them.&lt;/p&gt;

&lt;p&gt;To illustrate what &lt;code&gt;Generics&lt;/code&gt; are, let&amp;#39;s implement a &lt;a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;Queue&lt;/span&gt;() {
  &lt;span class="local-variable"&gt;this&lt;/span&gt;._queue = [];
}

Queue.prototype.&lt;span class="function"&gt;enqueue&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;(item) {
  &lt;span class="local-variable"&gt;this&lt;/span&gt;._queue.push(item);
}

Queue.prototype.&lt;span class="function"&gt;dequeue&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;() {
 &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;._queue.shift();
}

&lt;span class="keyword"&gt;var&lt;/span&gt; queue = &lt;span class="keyword"&gt;new&lt;/span&gt; Queue();

queue.enqueue(&lt;span class="integer"&gt;2&lt;/span&gt;);
queue.enqueue(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
queue.enqueue(&lt;span class="float"&gt;0.5&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now wasn&amp;#39;t that easy, eh?&lt;/p&gt;

&lt;p&gt;Note, that you don&amp;#39;t have to care about types in JavaScript that much. You just &lt;code&gt;enqueue&lt;/code&gt; a value of any type
and you&amp;#39;re all set.&lt;/p&gt;

&lt;p&gt;Swift is different. You can&amp;#39;t push objects of different types onto the array.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a &lt;code&gt;Queue&lt;/code&gt; class for &lt;code&gt;Integer&lt;/code&gt; values:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;class Queue {
  var _queue = Int[]();

  func enqueue(item: Int) {
    _queue.append(item);
  }

  func dequeue() -&amp;gt; Int {
    return _queue.removeAtIndex(0);
  }
}

var queue = Queue();

queue.enqueue(2);
queue.enqueue(3);
queue.enqueue(4);
queue.enqueue(&amp;quot;4&amp;quot;); // Cannot convert the expression's type to type 'Int'
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What if you want to create a &lt;code&gt;Queue&lt;/code&gt; class for &lt;code&gt;String&lt;/code&gt; values? You&amp;#39;re going to have copy implementation of &lt;code&gt;Queue&amp;lt;Int&amp;gt;&lt;/code&gt; class
and replace &lt;code&gt;Int&lt;/code&gt; with &lt;code&gt;String&lt;/code&gt;. A lot of code duplication. Here&amp;#39;s where &lt;code&gt;Generics&lt;/code&gt; shine.&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;class Queue&amp;lt;T&amp;gt; {
  var _queue = T[]();

  func enqueue(item: T) {
    _queue.append(item);
  }

  func dequeue() -&amp;gt; T {
    return _queue.removeAtIndex(0);
  }
}

var intQueue    = Queue&amp;lt;Int&amp;gt;();
var stringQueue = Queue&amp;lt;String&amp;gt;();

intQueue.enqueue(2);
intQueue.enqueue(3);
intQueue.enqueue(4);

stringQueue.enqueue(&amp;quot;2&amp;quot;);
stringQueue.enqueue(&amp;quot;3&amp;quot;);
stringQueue.enqueue(&amp;quot;4&amp;quot;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now you can create &lt;code&gt;Queue&lt;/code&gt; of the different types with just one &lt;code&gt;Queue&lt;/code&gt; implementation.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Swift is a step in the right direction in my opinion. They lowered the &amp;quot;language ramp up&amp;quot; time by simplifying Objective-C syntax
quite a bit without damaging the power of the language. I feel like it looks really compelling to JavaScript developers.&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgr" target="_blank" href="http://wickedgoodruby.com/">Wicked Good Ruby Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2014/06/27/ember-macros-for-DRY-and-testable-code.html"><strong>Ember Macros for DRY and Testable Code</strong><h6 class='footer-desc'></h6></a>
<a class="footer__post" href="/2014/06/24/introducing_ember_cli_addons.html"><strong>Introducing Ember CLI Addons</strong><h6 class='footer-desc'></h6></a>
<a class="footer__post" href="/2014/06/23/kapow-using-framer.html"><strong>KAPOW! Writing prototypes with Framer</strong><h6 class='footer-desc'>A look at Framer.js, a powerful prototyping tool.</h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>