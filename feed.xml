<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-84f1eb0e.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/scratch" class="work-nav-item"><strong class='work-nav-item__title'>Scratch Wireless</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/scratch" class="work-nav-item"><strong class='work-nav-item__title'>Scratch Wireless</strong><p>Never pay another penny for smartphone service.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-04-09T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>The Importance of Being Experience First</title>
    <link rel="alternate" href="/2015/04/09/the-importance-of-being-experience-first.html"/>
    <id>/2015/04/09/the-importance-of-being-experience-first.html</id>
    <published>2015-04-09T00:00:00Z</published>
    <updated>2015-04-09T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;We&amp;#39;re in the middle of a digital renaissance that has software eating the world.
Like the industrial revolution, the digital revolution might see us eventually
becoming obsolete, but that&amp;#39;s okay because that&amp;#39;s what progress looks like. To
stay relevant, we need to place the Experience First.&lt;/p&gt;

&lt;h2&gt;The architects of the digital world&lt;/h2&gt;

&lt;p&gt;The modern architect has her roots in ancient and medieval history. They
originated as artisans; master craftsmen such as stone masons and carpenters.
In ancient times, there was no clear separation between the role of the
architect and the engineer – they were seen as one and the same.&lt;/p&gt;

&lt;p&gt;In some ways, the architects of the digital world are similar to those of the
physical. There are many parallels between the two, although it&amp;#39;s important to
be aware of leaky abstractions, and that they are only &lt;em&gt;similar&lt;/em&gt;, not exactly
the same.&lt;/p&gt;

&lt;h2&gt;The craftsmens&amp;#39; renaissance&lt;/h2&gt;

&lt;p&gt;We&amp;#39;re currently living in an age of digital renaissance.
&lt;a href="http://www.wsj.com/articles/SB10001424053111903480904576512250915629460"&gt;Software is eating the world&lt;/a&gt;,
and some of us believe that we&amp;#39;re right in the middle of a great technological
revolution – the software revolution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It&amp;#39;s no longer enough to build a good product or service. The world demands
excellence, because good is the new average.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I believe it&amp;#39;s partly a symptom of how efficient manufacturing has become, that
we&amp;#39;re experiencing wide scale &lt;a href="http://www.rushkoff.com/blog/2005/9/4/commodified-vs-commoditized.html"&gt;commoditization&lt;/a&gt;
of goods and services that were historically considered luxuries. Because of
this, we&amp;#39;re also at the start of a new renaissance – one in which there is a
resurgence of an appreciation for &lt;a href="http://www.launch.co/blog/the-age-of-excellence.html/"&gt;well designed experiences&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my &lt;a href="http://confreaks.tv/videos/emberconf2015-ambitious-ux-for-ambitious-apps"&gt;EmberConf talk&lt;/a&gt;,
I defined design to mean more than aesthetics; design is how
things work, and encompasses the &lt;em&gt;entire experience&lt;/em&gt; across different mediums.
Airbnb calls this being &lt;a href="http://www.wired.com/2015/01/airbnbs-new-head-design-believes-design-led-companies-dont-work/"&gt;Experience First&lt;/a&gt;,
as opposed to Design First, which suggests that anyone who isn&amp;#39;t a designer has
their contributions take a backseat.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;That experience is essentially a story, a narrative which ultimately enjoins
us to a brand.&amp;quot; – &lt;a href="https://gigaom.com/2013/10/22/square-airbnb-and-why-experience-really-is-design/"&gt;Om Malik, Gigaom&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, it’s obvious that we place value on things that fulfill both
form and function. The popularity of beautiful user experiences, both online and
offline, are the expression of a digital renaissance that is only going to
continue growing.&lt;/p&gt;

&lt;h2&gt;The rise of website builders and what it means for us&lt;/h2&gt;

&lt;p&gt;Unlike classical portrait painters, bowling alley pinsetters and other
jobs that have become redundant, the digital creator seems to be relatively
safe.&lt;/p&gt;

&lt;p&gt;With the rise of website builders like &lt;a href="https://thegrid.io/"&gt;Wix&lt;/a&gt;,
&lt;a href="http://www.squarespace.com/"&gt;Squarespace&lt;/a&gt;, &lt;a href="https://thegrid.io"&gt;The Grid&lt;/a&gt; and
portfolio/shop builders like &lt;a href="http://www.shopify.com/"&gt;Shopify&lt;/a&gt;,
&lt;a href="https://www.bigcommerce.com/"&gt;BigCommerce&lt;/a&gt; and &lt;a href="http://virb.com/"&gt;Virb&lt;/a&gt; though,
it&amp;#39;s easier than ever for an individual or business to get a beautiful looking
website created at a fraction of the cost.&lt;/p&gt;

&lt;p&gt;The beauty of the web is that once an asset has been made, it effectively costs
nothing to clone. A designer with a copy of Sketch or Photoshop can very quickly
design a &amp;#39;theme&amp;#39;, have it converted into HTML/CSS by a &amp;quot;PSD to HTML&amp;quot; service
(as they&amp;#39;re commonly known), and then sell it on one of these site builders.
You could very easily get a beautiful looking website setup and live on the web
on Squarespace for less than $10 a month.&lt;/p&gt;

&lt;h2&gt;Why you need to place the Experience First&lt;/h2&gt;

&lt;p&gt;One thing I&amp;#39;ve learned from my time in Business School, is that humans
&lt;a href="http://freakonomics.com/2011/06/30/the-folly-of-prediction-full-transcript/"&gt;suck at predicting things&lt;/a&gt;.
Maybe we&amp;#39;re all going to be made redundant, but the ones that design the
best experiences will continue to be more relevant than ever.&lt;/p&gt;

&lt;p&gt;If creating a website or app is commoditized, so be it. After all, who&amp;#39;s going
to design and build the website builder? The fact is, designing a beautiful
experience across different mediums will never be automated, not until we
have the technology to build incredibly intelligent Sentient AIs. But by then,
we&amp;#39;d all &lt;a href="http://www.imdb.com/title/tt2209764/"&gt;be in trouble&lt;/a&gt;, so I wouldn&amp;#39;t
worry about it just yet.&lt;/p&gt;

&lt;p&gt;Because it&amp;#39;s easier than ever to build a website or app, the experience matters
more than ever as the way to differentiate your product or service from the
average. When you look to hire a developer or consultancy today, I think it&amp;#39;s
important that you seek out the ones that have honed the balance between design
and engineering, and have spent time thinking about designing truly delightful
online (and offline) experiences.&lt;/p&gt;

&lt;h2&gt;Lauren is a DockYarder&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve had a very diverse and varied experience with the web – I went to design
school, did a finance degree, and started a &lt;a href="http://www.thepricegeek.com"&gt;company&lt;/a&gt;.
Recently, I made the exhausting move from halfway across the world in Australia
to join DockYard, because we truly care about the entire experience. I&amp;#39;m very
proud to be able to call DY my new home.&lt;/p&gt;

&lt;p&gt;This is my first post on Reefpoints – I hope you&amp;#39;ve enjoyed reading! If you&amp;#39;d
like to read more of my writing, you can find more on my
&lt;a href="http://www.medium.com/@sugarpirate"&gt;Medium&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Special mention to &lt;a href="https://twitter.com/nffrenchie"&gt;@nfFrenchie&lt;/a&gt; and everyone
else who helped review this post.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Beginner's Fallacy</title>
    <link rel="alternate" href="/2015/04/09/the-beginners-fallacy.html"/>
    <id>/2015/04/09/the-beginners-fallacy.html</id>
    <published>2015-04-09T00:00:00Z</published>
    <updated>2015-04-09T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Helping onboard beginners is a hot topic right now in software
development. It is very good that this is important to people as we need
new software developers. However, I have noticed that many of these
developers are finding it difficult advancing beyond beginner. This
is especially evident when they are taken out of their current
development environment.&lt;/p&gt;

&lt;p&gt;Beginners require guidance and a set of rules to follow. This has been
shown time over time to be an effective strategy for learning. The
rules/principles/laws, whatever you want to call them, are based upon
the experience of more advanced developers that essentially boil down to 
&amp;quot;here is what you want to do &lt;em&gt;most&lt;/em&gt; of the time&amp;quot;. They are a great
substitute for experience. They also fit in very nicely with the notion
of &lt;strong&gt;Convention Over Configuration&lt;/strong&gt;. But unless you are stepping
outside of your framework the advantage of COC may turn into a career
hindering disadvantage.&lt;/p&gt;

&lt;p&gt;I am a big fan of Convention Over Configuration. I was first exposed to
it with Ruby on Rails and I like that Ember.js has been
following this path as well. However, I also believe that it can become
a crutch for beginners. The rules that they are following coupled with
the low friction environment of COC leads to a developer experience that
does not present too many obstacles to be overcome. Learning requires
challenge. You meet a challenge, you learn how to overcome that
challenge, you move on and now that experience is a tool you can wield in
the future.&lt;/p&gt;

&lt;p&gt;The market being flooded with beginners along with COC frameworks should
produce an environment that is heavily favored towards employers. (buyer&amp;#39;s market) 
In most cases these developers will be
able to accomplish most of what a very experienced developer can
accomplish. This is great for the company&amp;#39;s bottom line but not so good
for the individual developer&amp;#39;s own career growth.&lt;/p&gt;

&lt;p&gt;Instead, if you are interested in advancing beyond being a beginner,
you must get out of your comfort zone. This is going to require you to
put more time into your craft than your job necessarily allows. Try new
software languages, try old software languages. Go read
&lt;a href="https://mitpress.mit.edu/sicp/"&gt;SICP&lt;/a&gt;. Attend meetups, &lt;a href="https://github.com/papers-we-love/papers-we-love"&gt;read
papers&lt;/a&gt;,
contribute to open source. &lt;em&gt;Contribute to open source even if you think
your PR won&amp;#39;t be accepted&lt;/em&gt;. All of these things will take you out of the
comfort zone that your daily work gives you, but you&amp;#39;ll grow and become
a better (and more in demand) developer for it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Elixir: Come for the syntax, stay for everything else</title>
    <link rel="alternate" href="/2015/04/08/elixir-come-for-the-syntax-stay-for-everything-else.html"/>
    <id>/2015/04/08/elixir-come-for-the-syntax-stay-for-everything-else.html</id>
    <published>2015-04-08T00:00:00Z</published>
    <updated>2015-04-08T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I have been programming for over 20 years now. I started with Basic,
found my way to C++, and spent two years writing Assembly (MASM). Then I
found Ruby. Ruby completely changed everything for me. I loved Ruby. I
loved Ruby for a reason that many &amp;quot;elite&amp;quot; programmers tend to dismiss:
the syntax.&lt;/p&gt;

&lt;p&gt;You see, syntax is very important to me. Call it what you will,
bikeshedding, OCD, stupidity. I care about syntax. It matters to me, and
with Ruby I found a community that shared my thoughts.&lt;/p&gt;

&lt;p&gt;When Go and Rust came along I was disappointed. Clearly these two
languages were superior in performance (and in many other areas) but were a syntactic step back
from Ruby. What was their reason? Clearly Ruby, and even Python, have
proven that the masses are attracted by clear and readable syntax. New
languages should take the best of what is currently available and
improve upon them. Go seems to target the C/C++ audience, whereas Rust
seems to attract JavaScript developers. So I guess this becomes a matter
of perspective and opinion.&lt;/p&gt;

&lt;p&gt;Elixir is different. I put Elixir up there with Go and Rust as part of
the three new languages that will define the next decade of backend
software development. With Elixir I found a language that embraced
Ruby-like syntax, but also gave me much more.&lt;/p&gt;

&lt;p&gt;The syntax is only skin deep, but this is part of allure of Elixir. It
is my foot in the door. When I first saw Elixir code I thought to myself
&amp;quot;OK, this is something I can wrap my head around&amp;quot;.&lt;/p&gt;

&lt;p&gt;I think a lot of Ruby developers will find their way to Elixir. It seems
that many were attracted to Go but I suspect when they start to explore
what the Elixir language has to offer they&amp;#39;ll see the benefits.&lt;/p&gt;

&lt;p&gt;But a language needs more than just a hook, there has to be a compelling
reason to stay. For me that was Functional Programming.&lt;/p&gt;

&lt;p&gt;It seems that Functional Programming is making a come back. Every day
there is a new blog article on why you should start writing Functional
code. Let&amp;#39;s break this down into a few points:&lt;/p&gt;

&lt;h2&gt;1. Scalability&lt;/h2&gt;

&lt;p&gt;This is an Erlang trait. Elixir apps will attempt to make the best use
of all the cores in your CPU as possible. Compared to Ruby this is a big
deal. We don&amp;#39;t have to write anything special, the Erlang VM (BEAM) just
handles this for us automatically. This means we are efficiently using
our hardware. This type of approach didn&amp;#39;t make a lot of sense a few
years ago, multi-core CPUs were expensive. Now they&amp;#39;re cheap and Elixir
benefits.&lt;/p&gt;

&lt;h2&gt;2. Memory&lt;/h2&gt;

&lt;p&gt;Elixir programs are meant to be broken into many different processes.
The garbage collection strategy being used isn&amp;#39;t revolutionary but
because we are dealing with &lt;strong&gt;many&lt;/strong&gt; runtimes instead of just one the
impact on GC is negligible. In addition, you can picture how short-lived
processes might be the equivalent of objects in an OOP lanuage. We pass
messages into the process and get back a value. Each process manages its
own memory, if the process is short-lived enough GC is never even run
and the process is destroyed after it has completed its job. As opposed
to Ruby where everything lives in one world and if you stop using the
object it will get GC&amp;#39;d eventually impacting performance.&lt;/p&gt;

&lt;h2&gt;3. Immutability&lt;/h2&gt;

&lt;p&gt;Immutability got a bad rap when memory was expensive. Why would we write
applications in such a way so as to waste memory by having variables
who&amp;#39;s values couldn&amp;#39;t be mutated? Memory is now super cheap, and this is
not much of a concern. With this in mind we can evaluate immutability
within the context it was originally meant: to ensure state. When we
talk about parallel processing the state of a process becomes very
important. If we are expecting &lt;code&gt;X&lt;/code&gt; to always be a specific value but we
are writing in a language where &lt;code&gt;X&lt;/code&gt; can change this can lead to
problems.&lt;/p&gt;

&lt;h2&gt;4. Fault Tolerance&lt;/h2&gt;

&lt;p&gt;This one really impressed me when I started to dig into it. You may have
heard that Erlang was invented for telephony. How often do you get a
message from your phone company saying &amp;quot;we&amp;#39;re updating our systems so
you won&amp;#39;t get a call for a while&amp;quot;. This is the level of uptime that is
achievable with Elixir. Hot code swapping is another very cool feature.
Think &lt;strong&gt;real&lt;/strong&gt; Zero Downtime Deploys.&lt;/p&gt;

&lt;h2&gt;5. Community&lt;/h2&gt;

&lt;p&gt;This one is more personal to me. I&amp;#39;m attracted to technology that is not
centralized into one company. Go and Rust are very much just Google and
Mozilla technologies. Those languages will always be at the whim of
their corporate masters, wheras a language like Elixir that is not tied
to any one company feels like it has a more democratic process behind
its development. Let many companies develop use-cases and improve the
language. (I realize that Erlang falls into this category, but Erlang is
pretty much set in stone at this point)&lt;/p&gt;

&lt;p&gt;The community around Elixir also feels very much like the Ruby community
did early on. I said the same thing about the Ember.js community. I
guess I&amp;#39;m just chasing that Ruby dragon, trying to catch that high
again.&lt;/p&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;We&amp;#39;ve been exploring Elixir heavily over the past few months. The more I
dig into the language the more I love it. We&amp;#39;re going to bet pretty
heavily on Elixir and if you are a Ruby developer looking for a change
in pace I highly suggest you check it out. The best place to start is
with &lt;a href="https://pragprog.com/book/elixir/programming-elixir"&gt;Dave Thomas&amp;#39;
Book&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Helping Our Engineers</title>
    <link rel="alternate" href="/2015/03/31/helping-our-engineers.html"/>
    <id>/2015/03/31/helping-our-engineers.html</id>
    <published>2015-03-31T00:00:00Z</published>
    <updated>2015-03-31T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Writing Pseudo-Code as UX Developers&lt;/h2&gt;

&lt;p&gt;As a team, we are always trying to improve our process at DockYard to
make things easier for one another. I’m part of the UX development team, which
takes care of the HTML and CSS/Sass for our projects.
One thing we have found to be helpful to our Ember/back-end engineers is pseudo-coding
where loops and conditionals should go in our templates. It only takes a basic understanding of
&lt;a href="https://pine.fm/LearnToProgram/chap_06.html"&gt;flow control&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When we are in the development phase of a project, UX development usually tries to
complete HTML first. That way UX dev and engineering can work in
parallel without completion times depending on each other. What can we
do to make this process smoother? Below are two code examples of what an engineer may see given these mockups.
&lt;img alt="Has no followers"
src="https://dl.dropboxusercontent.com/u/38675407/followers--no-followers.png"&gt;
&lt;img alt="Followers shows interests"
src="https://dl.dropboxusercontent.com/u/38675407/followers--with-interests.png"&gt;&lt;/p&gt;

&lt;p&gt;Unorganized comments:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! at the beginning the user will not have any followers so show this}}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows-wrap&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows--is-empty&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;You don’t have any followers.&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{! when a user has followers show this block and not the block above}}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows-wrap&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__image&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Alfred H.&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__interests__heading&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Follows for:&lt;span class="tag"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
      &lt;span class="comment"&gt;{{! must be following for at least one interest to have a follower. when the follower is only following for one interest will not have the part that says 2 others or span below that}}&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__interest&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Tennis &lt;span class="entity"&gt;&amp;amp;amp;&lt;/span&gt; Racquet Sports,
        &lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;#&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__interest--other&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;2 others&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__modal__interests&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__modal__interest&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Photography&lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__modal__interest&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Soccer&lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Pseudo-code comments:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows-wrap&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="comment"&gt;{{! if user has followers}}&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="comment"&gt;{{! each follower / following}}&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__image&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Alfred H.&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__interests__heading&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Follows for:&lt;span class="tag"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__interest&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
            Tennis &lt;span class="entity"&gt;&amp;amp;amp;&lt;/span&gt; Racquet Sports
            &lt;span class="comment"&gt;{{! if following for more than one interest}}&lt;/span&gt;
              ,
              &lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;#&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__interest--other&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;2 others&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
              &lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__modal__interests&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__modal__interest&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Photography&lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__modal__interest&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Soccer&lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
              &lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="comment"&gt;{{!end if}}&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="comment"&gt;{{! end each}}&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="comment"&gt;{{! else}}&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows--is-empty&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;You don’t have any followers.&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="comment"&gt;{{! end if}}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The unorganized way can get out of hand with complex applications. The
pseudo-code method turns out to be slightly more work for UX developers,
but it saves our engineers a lot of time and confusion. Being able to break
things down into simple if/else statements or each loops has been much more efficient.
No more reading paragraphs of what’s supposed to go where and when, or
re-organizing the template!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pluralize Your Word(s) With ember-pluralize</title>
    <link rel="alternate" href="/2015/03/27/pluralize-your-words-with-ember-pluralize.html"/>
    <id>/2015/03/27/pluralize-your-words-with-ember-pluralize.html</id>
    <published>2015-03-27T00:00:00Z</published>
    <updated>2015-03-27T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Do you ever find yourself repeating identical pieces of code throughout
different projects? If so, that&amp;#39;s the perfect indicator for an addon
opportunity. Ember Addons allow you to quickly integrate sharable code
into different projects, without copy and pasting, via one simple command:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  ember install:addon addon-name
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On some of our most recent projects, we kept finding the need to
pluralize words based on &lt;em&gt;how many&lt;/em&gt; of each item we had. Also, since
our data is dynamic and constantly changing, the pluralization of a
word should remain in sync with our fluctuating data. And so
&lt;a href="https://github.com/rsocci/ember-pluralize"&gt;&lt;code&gt;ember-pluralize&lt;/code&gt;&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;After a quick &lt;code&gt;ember install:addon ember-pluralize&lt;/code&gt;, using the addon
is a piece of cake.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s suppose we have a model like so:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Route.extend({
  &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; Ember.A([
      Ember.Object.create({ &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Cartman&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;cheesyPoofs&lt;/span&gt;: &lt;span class="integer"&gt;20&lt;/span&gt; }),
      Ember.Object.create({ &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Stan&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;cheesyPoofs&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt; }),
      Ember.Object.create({ &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Kyle&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;cheesyPoofs&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt; }),
      Ember.Object.create({ &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Kenny&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;cheesyPoofs&lt;/span&gt;: &lt;span class="integer"&gt;0&lt;/span&gt; })
    ]);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we want to output how many Cheesy Poofs each person has. This addon
provides a helper that allows us to do the following in our template:&lt;/p&gt;
&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{{#each model as |person|}}
  {{person.name}} has {{h-pluralize person.cheesyPoofs &amp;quot;Cheesy Poof&amp;quot;}}
{{/each}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which will output&lt;/p&gt;
&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;// Cartman has 20 Cheesy Poofs
// Stan has 5 Cheesy Poofs
// Kyle has 1 Cheesy Poof
// Kenny has 0 Cheesy Poofs
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And now, as they each start throwing back some Cheesy Poofs, the counts
will start to update, as well as the word &amp;quot;Cheesy Poof&amp;quot;, according to
how many are remaining. Alternatively, if you don&amp;#39;t need to display the
actual number, passing in &lt;code&gt;omitCount=true&lt;/code&gt; as the third parameter will
exclude it from the output:&lt;/p&gt;
&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{{#each model as |person|}}
  {{person.name}}'s {{h-pluralize person.cheesyPoofs &amp;quot;Cheesy Poof&amp;quot; omitCount=true}}
{{/each}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;// Cartman's Cheesy Poofs
// Stan's Cheesy Poofs
// Kyle's Cheesy Poof
// Kenny's Cheesy Poofs
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note: If you&amp;#39;re using Ember Data, you will be provided with a built in pluralize
helper through the &lt;a href="https://github.com/stefanpenner/ember-inflector"&gt;Ember Inflector&lt;/a&gt;
library. The helper is registered for availability in the template; the
functionality is similar, but given that it takes up to two arguments
(the count and the word), you&amp;#39;re not able to solely display the pluralized
word based on a given a count.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;d like to see more on the addon, it can be found on
&lt;a href="https://github.com/rsocci/ember-pluralize"&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bringing Ember to the Desktop with NW.js</title>
    <link rel="alternate" href="/2015/03/26/bringing-ember-to-the-desktop-part.html"/>
    <id>/2015/03/26/bringing-ember-to-the-desktop-part.html</id>
    <published>2015-03-26T00:00:00Z</published>
    <updated>2015-03-26T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;One of our recent client projects at DockYard had us go in a totally new
direction in terms of technology stack. We needed to build a desktop
application that could communicate with some Arduino devices via
&lt;a href="https://developer.mozilla.org/en-US/docs/WebSockets"&gt;WebSockets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me first put this out there: I love building for the web. The mere
thought of developing native desktop applications always makes me cringe
a little, though I admit, I haven&amp;#39;t done much in that arena since those
&lt;a href="http://en.wikipedia.org/wiki/Swing_%28Java%29"&gt;Java Swing&lt;/a&gt; days from forever ago.
Nevertheless, you may find yourself at some point needing to build for the desktop.
Thankfully, you don&amp;#39;t have to put your fuzzy little Tomster away.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nwjs/nw.js"&gt;NW.js&lt;/a&gt;, formerly known as Node WebKit, is a runtime
built on top of Chromium and Node/IO.js that lets you develop native applications
using the web technologies that you love. You can essentially build an Ember app, and
also invoke Node modules all within the browser, then package it up as
a Mac OS X application or Windows &lt;code&gt;exe&lt;/code&gt; file when you&amp;#39;re ready to distribute.&lt;/p&gt;

&lt;h2&gt;Demo&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s a screenshot from a NW.js app built with Ember for demonstration
purposes:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://cloud.githubusercontent.com/assets/1691398/6768192/536a6fde-d033-11e4-9375-e2f506c1c8c7.png" alt="screenshot"&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s a simple GitHub-flavored Markdown Editor that lets you create and preview
Markdown documents, and save them to disk.&lt;/p&gt;

&lt;p&gt;You can try it for yourself. Just download the application from the
following links for your platform, unzip, then double-click on &lt;code&gt;Markdown
Editor.app&lt;/code&gt; (Mac) or &lt;code&gt;Markdown Editor.exe&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mac OS X: &lt;a href="https://s3.amazonaws.com/dockyard-general/ember-nw-demo/markdown-editor-osx64.zip"&gt;markdown-editor-osx64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Windows:
&lt;a href="https://s3.amazonaws.com/dockyard-general/ember-nw-demo/markdown-editor-win64.zip"&gt;markdown-editor-win64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/brzpegasus/ember-nw-markdown"&gt;Source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a touch of user friendliness, the app even ships with your favorite
mascot:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mac:&lt;/em&gt;
&lt;img alt="Mac Icon" src="https://cloud.githubusercontent.com/assets/1691398/6853610/9ee8c52c-d3c2-11e4-971a-3472bfd35609.png" style="width: 600px; height: 205px;"&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Windows:&lt;/em&gt;
&lt;img alt="Win Icon" src="https://cloud.githubusercontent.com/assets/1691398/6853614/a32becc2-d3c2-11e4-9ed4-83d645825f4b.png" style="width: 114px; height: 312px;"&gt;&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;The main entry point to a NW.js application is an HTML page that you
specify in your project&amp;#39;s &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight json "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;my-app&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;main&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;dist/index.html&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On startup, NW.js will launch a new Chromium browser window,
then set the location to that starting page:
&lt;code&gt;file:///Users/brzpegasus/projects/my-app/dist/index.html#/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This does require that you set your &lt;code&gt;Ember.Router&lt;/code&gt;
&lt;a href="http://emberjs.com/api/classes/Ember.Location.html"&gt;location type&lt;/a&gt; to &lt;code&gt;hash&lt;/code&gt;. In Ember CLI,
this is a simple tweak to your &lt;code&gt;config/environment.js&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// config/environment.js&lt;/span&gt;
modules.&lt;span class="function"&gt;exports&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;(environment) {
  &lt;span class="keyword"&gt;var&lt;/span&gt; ENV = {
    &lt;span class="key"&gt;locationType&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;hash&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="comment"&gt;// Change this from 'auto' to 'hash'&lt;/span&gt;
    &lt;span class="comment"&gt;// ...&lt;/span&gt;
  };
};
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;From there on, you should feel quite at home and ready to develop your Ember app.&lt;/p&gt;

&lt;p&gt;Or maybe not quite yet.&lt;/p&gt;

&lt;h2&gt;A Bit About NW.js&lt;/h2&gt;

&lt;p&gt;NW.js tweaks Chromium and Node in order to
&lt;a href="https://github.com/nwjs/nw.js/wiki/How-node.js-is-integrated-with-chromium"&gt;integrate&lt;/a&gt;
the two worlds and make it possible for you to call Node modules from the client:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;console.log(location.href);   &lt;span class="comment"&gt;// Yup, we're in browser land&lt;/span&gt;

&lt;span class="keyword"&gt;var&lt;/span&gt; fs = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fs&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);       &lt;span class="comment"&gt;// Call core Node modules&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; async = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;async&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;// Or even third-party modules!&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;re used to Node and CommonJS, this &lt;code&gt;require&lt;/code&gt; function should look very
familiar, but it isn&amp;#39;t exactly the same. Here&amp;#39;s what it does:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;require&lt;/span&gt;(name) {
  &lt;span class="keyword"&gt;if&lt;/span&gt; (name == &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;nw.gui&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="keyword"&gt;return&lt;/span&gt; nwDispatcher.requireNwGui();
  &lt;span class="keyword"&gt;return&lt;/span&gt; global.require(name);
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So if you were to call &lt;code&gt;require(&amp;#39;nw.gui&amp;#39;)&lt;/code&gt;, you would get access to the
&lt;a href="https://github.com/nwjs/nw.js/wiki/Native-UI-API-Manual"&gt;Native UI Library&lt;/a&gt;
to do things like manipulating the window frame, adding menus, keyboard shortcuts, etc.
Otherwise, the function ends up calling &lt;code&gt;global.require&lt;/code&gt; to import Node modules.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;global&lt;/code&gt; is Node&amp;#39;s global namespace object. You can use it to retrieve
other global objects besides &lt;code&gt;require&lt;/code&gt;, such as &lt;code&gt;global.process&lt;/code&gt;.
However, many of them are made available directly on the &lt;code&gt;window&lt;/code&gt; object, so you can
reference them without prefix, just as you would in Node:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;console.log(window.process === global.process) &lt;span class="comment"&gt;// =&amp;gt; true&lt;/span&gt;
console.log(process.env.USER) &lt;span class="comment"&gt;// &amp;quot;brzpegasus&amp;quot;&lt;/span&gt;
console.log(process.platform) &lt;span class="comment"&gt;// &amp;quot;darwin&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Naming Conflicts&lt;/h2&gt;

&lt;p&gt;Modules written with ES2015 (&lt;a href="https://esdiscuss.org/topic/javascript-2015#content-3"&gt;previously, ES6&lt;/a&gt;)
syntax in your Ember app get transpiled into
AMD for today&amp;#39;s browsers. This is problematic because AMD also specifies a
&lt;code&gt;require&lt;/code&gt; function for loading modules. In Ember CLI, this is implemented via
&lt;a href="https://github.com/ember-cli/loader.js"&gt;ember-cli/loader.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By the time the app is done loading, any functionality that depends on
the native UI library or Node modules will break as the &lt;code&gt;require&lt;/code&gt;
function would have been redefined.&lt;/p&gt;

&lt;p&gt;You can get around this by saving a reference to Node&amp;#39;s &lt;code&gt;require&lt;/code&gt; before loading
any script. Once all scripts are loaded and executed, redefine &lt;code&gt;require&lt;/code&gt;
to work with both module systems. This is necessary as certain operations
will not work with the alias:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Before loading any script&lt;/span&gt;
window.requireNode = require;

&lt;span class="comment"&gt;// After all scripts are loaded&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; requireAMD = require;

window.&lt;span class="function"&gt;require&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="keyword"&gt;try&lt;/span&gt; {
    &lt;span class="keyword"&gt;return&lt;/span&gt; requireAMD.apply(&lt;span class="predefined-constant"&gt;null&lt;/span&gt;, &lt;span class="local-variable"&gt;arguments&lt;/span&gt;);
  } &lt;span class="keyword"&gt;catch&lt;/span&gt; (error) {
    &lt;span class="keyword"&gt;return&lt;/span&gt; requireNode.apply(&lt;span class="predefined-constant"&gt;null&lt;/span&gt;, &lt;span class="local-variable"&gt;arguments&lt;/span&gt;);
  }
};
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;An Addon For All Your NW.js Needs&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve recently released an Ember CLI addon to help make this process
easier. Simply install &lt;a href="https://github.com/brzpegasus/ember-cli-node-webkit"&gt;ember-cli-node-webkit&lt;/a&gt;,
then start coding right away. All the configuration will be taken care
of for you, so no need to worry about &lt;code&gt;require&lt;/code&gt; naming conflicts.&lt;/p&gt;

&lt;p&gt;The addon can build your project, watch for changes, and reload the page in NW.js
during development. And when you&amp;#39;re ready to distribute, packaging is just
one command away. The packaging is a wrapper around the excellent
&lt;a href="https://github.com/mllrsohn/node-webkit-builder"&gt;node-webkit-builder&lt;/a&gt;
but the configuration is done automatically based on the addon&amp;#39;s
understanding of your app structure.&lt;/p&gt;

&lt;p&gt;I will not spend time talking about the addon in this blog post, but I
invite you to check out the &lt;a href="https://github.com/brzpegasus/ember-cli-node-webkit/blob/master/README.md"&gt;README&lt;/a&gt;
to get familiar with all the options that are at your disposal.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When we first set out to build a desktop app for a client project,
documentation on how to integrate NW.js with Ember was scarce. Even more
scarce was documentation on how to integrate it with Ember CLI. I hope
this post and this addon will provide some guidance to others down the
road.&lt;/p&gt;

&lt;p&gt;I&amp;#39;d love to share some code samples and discuss patterns you can adopt
to make your NW.js app more manageable and testable, but they&amp;#39;d be too
dense for this introductory blog post. However, you&amp;#39;ll be hearing more from me
on this topic in the future!&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgc" target="_blank" href="http://wickedgoodember.com/">Wicked Good Ember Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--swift" target="_blank" href="http://www.meetup.com/Boston-Swift/">Boston Swift</a><a class="footer__event--uxhh" target="_blank" href="http://www.uxhappyhour.com/bos">UX Happy Hour</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2015/04/09/the-importance-of-being-experience-first.html"><strong>The Importance of Being Experience First</strong><h6 class='footer-desc'>Why being Experience First is more critical than ever – will the rise of website builders threaten the future of software consulting?</h6></a>
<a class="footer__post" href="/2015/04/09/the-beginners-fallacy.html"><strong>The Beginner's Fallacy</strong><h6 class='footer-desc'></h6></a>
<a class="footer__post" href="/2015/04/08/elixir-come-for-the-syntax-stay-for-everything-else.html"><strong>Elixir: Come for the syntax, stay for everything else</strong><h6 class='footer-desc'></h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>