<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-060121b3.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-02-04T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Vim: Jump, Jump, Jump!</title>
    <link rel="alternate" href="/2015/02/04/vim-jump-jump-jump.html"/>
    <id>/2015/02/04/vim-jump-jump-jump.html</id>
    <published>2015-02-04T00:00:00Z</published>
    <updated>2015-02-04T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;&lt;a href="https://www.youtube.com/watch?v=010KyIQjkTk" target="_blank"&gt;Jump, Jump, Jump!&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;In the last Vim-related post, we
&lt;a href="http://reefpoints.dockyard.com/2014/04/10/vim-on-your-mark.html"&gt;discussed &lt;strong&gt;mark&lt;/strong&gt; motion&lt;/a&gt;,
and today, we&amp;#39;re going to cover another type of navigation: &lt;strong&gt;jump&lt;/strong&gt; motion.&lt;/p&gt;

&lt;p&gt;The main benefit of jump motion is its speed; it allows us to quickly traverse through the current file
open or previously visited files.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s briefly cover some of the most familiar ones.&lt;/p&gt;

&lt;h2&gt;File Jumps&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;File jumps&lt;/em&gt; will navigate you to a location within the current file, regardless if that
location is seen or not seen within the window.&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://www.youtube.com/watch?v=Xz-UvQYAmbg" target="_blank"&gt;Ain&amp;#39;t no Mountain high enough, ain&amp;#39;t no valley low enough...&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;gg&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Will take you to the &lt;em&gt;top&lt;/em&gt; of the file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;G&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Will take you to the &lt;em&gt;bottom&lt;/em&gt; of the file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Sentences and Paragraphs&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move a &lt;em&gt;sentence backwards&lt;/em&gt;, can take a prefix argument.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;5(&lt;/strong&gt; - Navigates you 5 sentences backwards.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;e Move a &lt;em&gt;sentence forward&lt;/em&gt;, can take a prefix argument.
  * &lt;strong&gt;10)&lt;/strong&gt; - Navigates you 10 sentences forwards.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move a &lt;em&gt;paragraph backward&lt;/em&gt;, can take a prefix argument.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;5{&lt;/strong&gt; - Navigates you 5 paragraphs backwards.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move a &lt;em&gt;paragraph forward&lt;/em&gt;, can take a prefix argument.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;5}&lt;/strong&gt; - Navigates you 5 paragraphs forwards.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="https://www.youtube.com/watch?v=EDNzQ3CXspU" target="_blank"&gt;Search and Destroy&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;/&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to search &lt;em&gt;forwards&lt;/em&gt; for a desired pattern within the file.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;/fishsticks&lt;/strong&gt; - Searches for all occurences of &lt;code&gt;fishsticks&lt;/code&gt; ahead of your current cursor.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to search &lt;em&gt;backwards&lt;/em&gt; for a desired pattern within the file.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;?catdog&lt;/strong&gt; - Searches for all occurences of &lt;code&gt;catdog&lt;/code&gt; behind your current cursor.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Repeats the last &lt;strong&gt;/&lt;/strong&gt; or &lt;strong&gt;?&lt;/strong&gt; search.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;N&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Repeats the last &lt;strong&gt;/&lt;/strong&gt; or &lt;strong&gt;?&lt;/strong&gt; search in the &lt;em&gt;opposite&lt;/em&gt; direction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Window Jumps&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Window&lt;/em&gt; jumps allow you to move within the current scope of the window or viewport.&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://www.youtube.com/watch?v=JECF2EB3LXU" target="_blank"&gt;High, Middle, and Low&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;H&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jumps your cursor to the &lt;strong&gt;highest&lt;/strong&gt; line of the window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;M&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jumps your cursor to the &lt;strong&gt;middle&lt;/strong&gt; line of the window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;L&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jumps your cursor to the &lt;strong&gt;lowest&lt;/strong&gt; line of the window.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;System Wide Jumps&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;System&lt;/em&gt; jumps are special; they have the ability to take us to any previously visited file,
regardless if those files are or are not within the same directory.&lt;/p&gt;

&lt;p&gt;This is where jump motion really shines!&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://www.youtube.com/watch?v=KZaz7OqyTHQ" target="_blank"&gt;Jump Around&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Give these next commands a try:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CTRL-O&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jump to our previous position.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CTRL-L&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jump to our next postion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By pressing these commands repeatedly, you&amp;#39;ll see that you are traversing through
your recently visited files.&lt;/p&gt;

&lt;h3&gt;Jump list&lt;/h3&gt;

&lt;p&gt;Our recent jumps are stored on our &lt;em&gt;jump&lt;/em&gt; list. We can view all the jumps through Vim&amp;#39;s
command-line mode. There are three ways to open up the jump list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;:jumps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;:jump&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;:ju&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Opens up the jump list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="https://i.imgur.com/mFc1cHz.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Above is an example of a jump list. There are four columns: &lt;em&gt;jump&lt;/em&gt;, &lt;em&gt;line&lt;/em&gt;, &lt;em&gt;col&lt;/em&gt; and &lt;em&gt;file/text&lt;/em&gt;.
The numbers underneath the &lt;em&gt;jump&lt;/em&gt; column are used to prefix our jump command, &lt;strong&gt;CTRL-O&lt;/strong&gt; and &lt;strong&gt;CTRL-L&lt;/strong&gt;.
We are also given the position of our cursor from the  &lt;em&gt;line&lt;/em&gt; and &lt;em&gt;col&lt;/em&gt;umn columns. Lastly, the
&lt;em&gt;file/text&lt;/em&gt; column, gives us either the file path or, if the jump is located in our currently opened file,
the line of text.&lt;/p&gt;

&lt;p&gt;Using our example jump list, if we want to jump to the &lt;code&gt;4&lt;/code&gt;th jump, located within &lt;code&gt;~/dir2/file.md&lt;/code&gt;, we&amp;#39;d
prefix our previous jump command with the number &lt;strong&gt;4&lt;/strong&gt;, i.e. &lt;strong&gt;4CTRL-O&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next if we want to get back to our previous position, the line
&lt;code&gt;This is another sentence!&lt;/code&gt; we can cycle back to it with a couple of &lt;strong&gt;CTRL-L&lt;/strong&gt;s. Cool!&lt;/p&gt;

&lt;p&gt;I find that &lt;em&gt;jump&lt;/em&gt; motion complements &lt;em&gt;mark&lt;/em&gt; motion really well. By setting multiple marks in the current file,
and flying to different files with jumps, my workflow has greatly improved.&lt;/p&gt;

&lt;p&gt;Hope you give &lt;em&gt;jump&lt;/em&gt; motion a try!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Debugging a Broccoli Tree</title>
    <link rel="alternate" href="/2015/02/02/debugging-a-broccoli-tree.html"/>
    <id>/2015/02/02/debugging-a-broccoli-tree.html</id>
    <published>2015-02-02T00:00:00Z</published>
    <updated>2015-02-02T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/broccolijs/broccoli"&gt;Broccoli&lt;/a&gt; is a great tool for building up assets gradually through a list of changing steps. Unfortunately, when things go wrong in one of your steps it is often very difficult to figure out what is happening at each stage.&lt;/p&gt;

&lt;p&gt;Here is where &lt;a href="https://github.com/stefanpenner/broccoli-stew"&gt;broccoli-stew&lt;/a&gt; comes in, it is a Broccoli utility library that contains a number of super useful plugins with a &lt;a href="https://en.wikipedia.org/wiki/POSIX"&gt;posix&lt;/a&gt; flair to them. Tools like &lt;code&gt;mv&lt;/code&gt;, &lt;code&gt;rename&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;, and &lt;code&gt;debug&lt;/code&gt; make it much easier to reason about your Broccoli build.&lt;/p&gt;

&lt;p&gt;And thanks to the &lt;code&gt;debug&lt;/code&gt; and &lt;code&gt;log&lt;/code&gt; plugins it has become &lt;strong&gt;massively&lt;/strong&gt; easier to log the contents of each tree, or get an extra copy to poke at manually.&lt;/p&gt;

&lt;h3&gt;Initial Brocfile.js&lt;/h3&gt;

&lt;p&gt;Lets assume you have the following &lt;code&gt;Brocfile.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Brocfile.js&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; Funnel = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-funnel&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; ES2015 = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-es6modules&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; log = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-stew&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).log;

&lt;span class="keyword"&gt;var&lt;/span&gt; app = &lt;span class="keyword"&gt;new&lt;/span&gt; Funnel(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;app&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="key"&gt;destDir&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;my-app-name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
});

&lt;span class="keyword"&gt;var&lt;/span&gt; transpiledTree = &lt;span class="keyword"&gt;new&lt;/span&gt; ES2015(app);

module.exports = transpiledTree;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The goal of the Brocfile.js listed above is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grab all files in &lt;code&gt;app/&lt;/code&gt; and its subdirectories&lt;/li&gt;
&lt;li&gt;&amp;quot;move&amp;quot; those files to &lt;code&gt;my-app-name/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;transpile those files from &lt;a href="http://webreflection.blogspot.co.uk/2015/01/javascript-and-living-ecmascript.html"&gt;ES2015&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So far this seems pretty easy, but what if your resulting output didn&amp;#39;t contain the files you expected?  How would you track that down?&lt;/p&gt;

&lt;h3&gt;Log Tree&lt;/h3&gt;

&lt;p&gt;You can log the files in a tree using &lt;code&gt;broccoli-stew&lt;/code&gt;&amp;#39;s &lt;code&gt;log&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Brocfile.js&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; Funnel = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-funnel&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; ES2015 = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-es6modules&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; log = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-stew&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).log;

&lt;span class="keyword"&gt;var&lt;/span&gt; app = &lt;span class="keyword"&gt;new&lt;/span&gt; Funnel(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;app&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="key"&gt;destDir&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;my-app-name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});

&lt;span class="keyword"&gt;var&lt;/span&gt; loggedApp = log(app, { &lt;span class="key"&gt;output&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tree&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;label&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;my-app-name tree&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });

&lt;span class="keyword"&gt;var&lt;/span&gt; transpiledTree = &lt;span class="keyword"&gt;new&lt;/span&gt; ES2015(loggedApp);

module.exports = transpiledTree;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;code&gt;log&lt;/code&gt; like this will list out the files that are present just after the &lt;code&gt;Funnel&lt;/code&gt; step.  It might output something like the following:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;my-app-name tree
└── my-app-name/
   ├── my-app-name/cat.js
   └── my-app-name/dog.js
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is super helpful to see that the right files are selected, but what if you are seeing the right files but the contents were not right?&lt;/p&gt;

&lt;h3&gt;Debug Tree&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;broccoli-stew&lt;/code&gt;&amp;#39;s &lt;code&gt;debug&lt;/code&gt; you can have a duplicate copy of the tree generated into the root of the project so you can inspect it later (it will not get cleaned up at the end of the build like the temp folders do).&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Brocfile.js&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; Funnel = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-funnel&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; ES2015 = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-es6modules&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; debug = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-stew&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).debug;

&lt;span class="keyword"&gt;var&lt;/span&gt; app = &lt;span class="keyword"&gt;new&lt;/span&gt; Funnel(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;app&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="key"&gt;destDir&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;my-app-name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});

&lt;span class="keyword"&gt;var&lt;/span&gt; debugApp = debug(app, { &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;my-app-name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });

&lt;span class="keyword"&gt;var&lt;/span&gt; transpiledTree = &lt;span class="keyword"&gt;new&lt;/span&gt; ES2015(debugApp);

module.exports = transpiledTree;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;debug&lt;/code&gt; plugin as used above will create a folder on disk at &lt;code&gt;DEBUG-my-app-name&lt;/code&gt; in the root of your project with the full contents of the &lt;code&gt;app&lt;/code&gt; tree when it was called. You can review this folder&amp;#39;s contents at your leisure without worrying about the Broccoli server calling cleanup and deleting the directory.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;broccoli-stew&lt;/code&gt; to debug a Broccoli pipeline is absolutely awesome, and makes getting a project using Broccoli much easier.  Thanks to &lt;a href="https://twitter.com/stefanpenner"&gt;@stefanpenner&lt;/a&gt; and &lt;a href="https://twitter.com/chadhietala"&gt;@chadhietala&lt;/a&gt; for pushing things forward!&lt;/p&gt;

&lt;p&gt;If you&amp;#39;d like to checkout and play with the &lt;code&gt;Brocfile.js&lt;/code&gt; above, you can do the normal &lt;code&gt;git clone&lt;/code&gt; and &lt;code&gt;npm install&lt;/code&gt; song and dance with &lt;a href="https://github.com/rwjblue/debugging-broccoli"&gt;https://github.com/rwjblue/debugging-broccoli&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I'm disappointed in React Native</title>
    <link rel="alternate" href="/2015/01/30/why-i-am-disappointed-in-react-native.html"/>
    <id>/2015/01/30/why-i-am-disappointed-in-react-native.html</id>
    <published>2015-01-30T00:00:00Z</published>
    <updated>2015-01-30T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This week at React.js Conf 2015 React Native was introduced. You can see
the two most important videos here:&lt;/p&gt;

&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/KVZ-P-ZI6W4" frameborder="0"
allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/7rDsRXj9-cU" frameborder="0"
allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The TLDR is that Facebook has developed a view layer for React that can
be used within native mobile apps. Within this context React&amp;#39;s templates
can call native components (and views) as if you were referring to normal
HTML elements. Furthermore a JavaScript layer has been introduced to the
native layer that runs the React applications, this means that you can
debug your React Native applications in Chrome Web Tools while it runs
on an iOS device.&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;amazing&lt;/em&gt; technology and I don&amp;#39;t think anyone was expecting
this. As an Ember developer I&amp;#39;m jealous. After some reflection I
realized I was also incredibly disappointed in Facebook for heading in
this direction.&lt;/p&gt;

&lt;h3&gt;We are (supposed to be) all in this together&lt;/h3&gt;

&lt;p&gt;The web development Holy Grail right now is to compete directly with (perhaps
someday replace) native mobile applications. With React Native the web
has lost a huge partner in Facebook for helping make this a reality.
What incentive does Facebook have for pushing forward mobile web now
that they can just produce native applications with web technology? What
incentive do the existing React developers (and the large number of
developers that will move to React in the near future) have for building
and proving out mobile web use-cases with React Native? &lt;strong&gt;None&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;We are getting close&lt;/h3&gt;

&lt;p&gt;This year saw significant improvements in mobile web. We are so close.
Check out this video from Google showing off the potential of mobile
web:&lt;/p&gt;

&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/v0xRTEf-ytE" frameborder="0"
allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;No longer is mobile web a matter of &lt;em&gt;if&lt;/em&gt; but a matter of &lt;em&gt;when&lt;/em&gt;.
However, with Facebook effectively taking themselves out of the
conversation we&amp;#39;ve lost one of the best use-cases and the largest voices
with one of the most popular JavaScript frameworks.&lt;/p&gt;

&lt;p&gt;Mobile web is a point of friction currently, and that friction existing
is good because it will drive people and companies to pursue solutions
to the problem. React Native is a work-around for mobile web. Some will
think of it as a &amp;quot;best of both worlds&amp;quot; and perhaps they are correct. But
the problem of mobile web will continue to exist.&lt;/p&gt;

&lt;h3&gt;Business needs trump ideological ones&lt;/h3&gt;

&lt;p&gt;Of course Facebook should do what is in its own best interest. &lt;a href="http://techcrunch.com/2012/09/11/mark-zuckerberg-our-biggest-mistake-with-mobile-was-betting-too-much-on-html5/"&gt;In 2012
Mark Zuckerberg said that Facebook bet too heavily on
HTML5&lt;/a&gt;.
He was correct then and he is correct now: mobile web feels like shit
when compared to native. The User Experience is the primary concern for
any product company. This, however, should not stop us from persuing
mobile web and pushing the technology forward. I just hope that React
Native doesn&amp;#39;t impede that progress in any way.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Empowering through Design</title>
    <link rel="alternate" href="/2015/01/30/empowering-through-design.html"/>
    <id>/2015/01/30/empowering-through-design.html</id>
    <published>2015-01-30T00:00:00Z</published>
    <updated>2015-01-30T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;There has been some debate in the development community between the &lt;a href="https://medium.com/@cramforce/tradeoffs-in-server-side-and-client-side-rendering-14dad8d4ff8b"&gt;&amp;quot;tradeoffs in server side and client side rendering.&amp;quot;&lt;/a&gt; As a UX designer working at an Ember shop that focuses on rich client experiences, I&amp;#39;ve observed the benefits of single page web applications, from a design perspective.&lt;/p&gt;

&lt;p&gt;The best kind of user interface is one where the system remains transparent, and moves the user fluently through relevant prompts to accomplish the task at hand. That experience can only be as good as the tools we have to shape and elevate that participation. At DockYard, we design and develop single page web apps using Ember as our client-side framework, because it allows for greater clarity of interaction, while keeping the technology transparent.&lt;/p&gt;

&lt;p&gt;A single page web app is a webpage that can update contents within the page without refreshing the entire browser window. Because the server doesn&amp;#39;t dictate the display, the &amp;quot;client,&amp;quot; or browser, determines how to represent it. Only the data associated with the selection is changed to reflect the action. &lt;/p&gt;

&lt;p&gt;You can imagine how beneficial that real time feedback is on the user side of the experience. Whether aware of it or not, this creates a more immersive experience, and enables the user to better grasp the information by directing attention to content. There is more opportunity to nest information which alleviates information overload, and animation simplifies complexity while still engaging the user. &lt;/p&gt;

&lt;p&gt;To do this well, good information architecture and content organization are imperative. Functionality and interaction must be part of the architecture, but not interrupt the flow and navigation. The visual design and communication must be clear and directive. The design supports self directed navigation and the process is not disrupted by the reload of a page. Creating this kind of real time response in the browser is the result of better, faster performance, bringing us closer to a native feel from the web.&lt;/p&gt;

&lt;iframe src="//player.vimeo.com/video/118249906" width="500" height="452" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://learnivore.com/"&gt;Learnivore&lt;/a&gt; is a website that connects teachers and students searching for instruction across many disciplines. The search page is one of the largest hubs in the Learnivore experience. This &lt;a href="http://reefpoints.dockyard.com/2015/01/07/complex-search-pages-feel-better-in-ember.html"&gt;&amp;quot;complex search&amp;quot;&lt;/a&gt; filters by type of instruction, location, rate, price, qualifications, and more. The results change dynamically, reflecting the filter selection, as demonstrated in the video above.&lt;/p&gt;

&lt;p&gt;Good design empowers the user to make the choices they need to accomplish their goals. It promotes communication and supports informed decision making through real time response. The single page web app model and the technologies to create and innovate with it are at the forefront of mobile and web design and development. It is a technology that not only provides opportunities for creativity and innovation for designers and developers alike, it constructs a more informative and cooperative experience for our users.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Estimation Buyers Guide</title>
    <link rel="alternate" href="/2015/01/28/estimation-buyers-guide.html"/>
    <id>/2015/01/28/estimation-buyers-guide.html</id>
    <published>2015-01-28T00:00:00Z</published>
    <updated>2015-01-28T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;As a Project Manager, I have seen estimates in all forms - points, days, months, hours, mario coins, etc. Many say estimates in Software development are garbage and significant margin of error should be the expected norm. I believe this perspective to be true if estimation is conducted in a vacuum vs. as a means to have a conversation with prospective clients about what it is going to take to achieve their vision.&lt;/p&gt;

&lt;p&gt;While estimation provides financial insight into a project, it also provides the project team with a point of reference when it comes to establishing schedules and conducting impact analysis when something needs to change (which is inevitable). As a project manager, a solid process by which we establish an estimate allows me to best serve the client and team.&lt;/p&gt;

&lt;p&gt;I would question any firm who claims to offer a high confidence estimate to a prospective client without spending time mapping out the direction an application/product may take on paper. I am not talking about writing a 50 page requirements document (which I once did on a project 10 years before I knew any better).  I am talking about getting the “supporting&amp;quot; cast the context they need to provide an informed perspective on the complexity associated with building the application.  This complexity spans design, engineering, quality and any other overhead associated with a project. &lt;/p&gt;

&lt;p&gt;Let me paint this picture for you. Client X wants to build out a new application. The team to build said application provides client X with an estimate based off of a couple pre-sales meetings. Cost is negotiated until everyone around the table is happy with the economics and then the project is handed over to the project team and they are told to build “this” application in “this” amount of time. Client X is doomed regardless of whether or not that application is handed over in the agreed amount of time. Here’s why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The team has no context - Therefore, they are going to spend the first weeks of development getting up to speed as opposed to delivering working features putting the schedule behind right out of the gate&lt;/li&gt;
&lt;li&gt;The team does not &amp;quot;own&amp;quot; the estimate -  Someone else provided it on their behalf (who wants to be responsible for something they don’t own?)&lt;/li&gt;
&lt;li&gt;Unexpected risks and complexity will (not “may”) put schedule at risk&lt;/li&gt;
&lt;li&gt;Quality will (not “may&amp;quot;) suffer because the team will attempt to meet the date commitment at the expense of quality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To avoid this at DockYard, we use a tool called Discovery. This is an intensive time-boxed exploration of a client’s business objectives, market and user needs, as well as technological possibilities. These inputs translate into wireframes and those wireframes translate into an estimable breakdown of deliverables that provides a platform to discuss scope, schedule and cost with our client. Our Discovery phase is cross-functional where we have designers and developers working hand in hand to understand the direction a client wants to go. We iterate on design concepts, we discuss technical direction and potential complexities, we map out scope in a way that allows clients to make decisions which may adjust cost and schedule up or down.   While this Discovery phase might feel like a tough nut to crack, it typically results in lower overall project cost, higher quality and better probability of staying on budget/schedule.&lt;/p&gt;

&lt;p&gt;A recent post by our own Mike Dupuis speaks to the value engineers can add to the “Discovery” phase of a project resulting in savings later in the project lifecycle-  &lt;a href="http://reefpoints.dockyard.com/2014/09/12/features-as-business-objectives.html"&gt;Features as Business Objectives&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whether you love them or hate them, estimates are here to stay in a client services context.  Therefore, instead of grumbling about them - make sure you&amp;#39;re using estimation as more than just a number but a means to have a conversation. Buyer beware of anyone who slaps an estimate on the table without providing you an explanation of how that estimate was derived.  &lt;/p&gt;

&lt;p&gt;“Luck is what happens when preparation meets opportunity” - Well said by someone much more insightful than I!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bubbling actions through components</title>
    <link rel="alternate" href="/2015/01/28/bubbling-actions-through-components.html"/>
    <id>/2015/01/28/bubbling-actions-through-components.html</id>
    <published>2015-01-28T00:00:00Z</published>
    <updated>2015-01-28T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;If you&amp;#39;re building components for re-use, you&amp;#39;re likely to run into the
following problem. Say you built a form component, and you also built some type
of custom button component. You want the action triggered by the button to be
handled in your controller or route. If you try to bind the action of that
inner button, it will be captured by the component, not the controller. The
issue is that components swallow actions that are triggered within them; they
will not escape the component unless we punch a hole for them to bubble up.&lt;/p&gt;

&lt;p&gt;You need to capture the action of the inner components and fire off new actions
from the parent component. In the example below, the button is in a component
that is inside of another component. The controller has an action to increment
the counter.&lt;/p&gt;

&lt;p&gt;&lt;a class="jsbin-embed" href="http://jsbin.com/suvat/4/embed?output"&gt;Ember Starter Kit&lt;/a&gt;&lt;script src="http://static.jsbin.com/js/embed.js"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Our components&amp;#39; templates are super simple:&lt;/p&gt;
&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{{! index.hbs}}
  {{pressCount}} Button presses
  {{button-wrapper action=&amp;quot;buttonClick&amp;quot;}}

{{! components/button-wrapper.hbs}}
  &amp;lt;h2&amp;gt;Button Wrapper&amp;lt;/h2&amp;gt;
  {{press-button action=&amp;quot;buttonClick&amp;quot;}}

{{! components/press-button.hbs}}
  &amp;lt;button {{action &amp;quot;buttonClick&amp;quot;}}&amp;gt;My Button&amp;lt;/button&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice we bind to the action of the &lt;code&gt;press-button&lt;/code&gt; component in our
&lt;code&gt;button-wrapper&lt;/code&gt; component, and in our &lt;code&gt;index&lt;/code&gt; template, we bind to the action
of the &lt;code&gt;button-wrapper&lt;/code&gt;. This alone doesn&amp;#39;t work; we need to send actions from
each component when they receive actions from the underlying component.&lt;/p&gt;

&lt;p&gt;In our &lt;code&gt;press-button&lt;/code&gt; component, we send an action when the button is clicked:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.PressButtonComponent = Ember.Component.extend({
  &lt;span class="key"&gt;classNames&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;press-button&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;actions&lt;/span&gt;: {
    &lt;span class="function"&gt;buttonClick&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
      &lt;span class="local-variable"&gt;this&lt;/span&gt;.sendAction();
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Our &lt;code&gt;button-wrapper&lt;/code&gt; receives the action from the &lt;code&gt;press-button&lt;/code&gt; component and
fires its own action:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.ButtonWrapperComponent = Ember.Component.extend({
  &lt;span class="key"&gt;classNames&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;button-wrapper&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;actions&lt;/span&gt;: {
    &lt;span class="function"&gt;buttonClick&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
      &lt;span class="local-variable"&gt;this&lt;/span&gt;.sendAction();
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And our index controller receives that action from &lt;code&gt;button-wrapper&lt;/code&gt; and
increments the &lt;code&gt;pressCount&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.IndexController = Ember.Controller.extend({
  &lt;span class="key"&gt;pressCount&lt;/span&gt;: &lt;span class="integer"&gt;0&lt;/span&gt;,

  &lt;span class="key"&gt;actions&lt;/span&gt;: {
    &lt;span class="function"&gt;buttonClick&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
      &lt;span class="local-variable"&gt;this&lt;/span&gt;.incrementProperty(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;pressCount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    }
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s pretty easy, yet tedious to wire up an action from a component within a
component. You can trigger actions multiple levels above your initial action,
and even mutate the action&amp;#39;s arguments on the way up. Maybe the model that
triggered the initial action should be put into some type of intermediate
state. Maybe you want to normalize several different actions that are bubbling
up through certain components. Since you need to manually bubble these
actions up, we can manipulate them at each level that the bubbling occurs. It&amp;#39;s
somewhat trivial to handle, you just have to be aware of the work needed to
tie all your pieces together.&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgc" target="_blank" href="http://wickedgoodember.com/">Wicked Good Ember Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--swift" target="_blank" href="http://www.meetup.com/Boston-Swift/">Boston Swift</a><a class="footer__event--uxhh" target="_blank" href="http://www.uxhappyhour.com/bos">UX Happy Hour</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2015/02/04/vim-jump-jump-jump.html"><strong>Vim: Jump, Jump, Jump!</strong><h6 class='footer-desc'>Kris Kross' favorite Vim feature</h6></a>
<a class="footer__post" href="/2015/02/02/debugging-a-broccoli-tree.html"><strong>Debugging a Broccoli Tree</strong><h6 class='footer-desc'></h6></a>
<a class="footer__post" href="/2015/01/30/why-i-am-disappointed-in-react-native.html"><strong>Why I'm disappointed in React Native</strong><h6 class='footer-desc'></h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>