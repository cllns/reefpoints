<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-36116f6c.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-06-23T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>KAPOW! Writing prototypes with Framer</title>
    <link rel="alternate" href="/2014/06/23/kapow-using-framer.html"/>
    <id>/2014/06/23/kapow-using-framer.html</id>
    <published>2014-06-23T00:00:00Z</published>
    <updated>2014-06-23T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;#39;ve finally used &lt;a href="http://framerjs.com/"&gt;Framer&lt;/a&gt; on a client project and couldn&amp;#39;t be happier with the result. I normally use &lt;a href="http://www.invisionapp.com/"&gt;InVision&lt;/a&gt; and highly recommend it, but Framer is the obvious choice when we need the experience to feel significantly more real.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.cooper.com/journal/2013/07/designers-toolkit-proto-testing-for-prototypes"&gt;Every tool has its pros and cons&lt;/a&gt;, however, so it won&amp;#39;t &lt;em&gt;always&lt;/em&gt; be the best choice for you.&lt;/p&gt;

&lt;p&gt;Let me start with Framer&amp;#39;s big con: you must write JavaScript to knit a prototype together. The code itself is very easy to learn, but understanding how the Framer script interacts with your PSD&amp;#39;s groups and layer organization is like flying blind. With practice you can get past this and work gets much, much faster.&lt;/p&gt;

&lt;p&gt;The one other con is that their documentation is made more for developers than designers. So if you&amp;#39;re not used to digging into developer docs you will likely be overwhelmed and unsure what you&amp;#39;re looking for. Looking elsewhere won&amp;#39;t help you either, there doesn&amp;#39;t seem to be much community around this (yet).&lt;/p&gt;

&lt;p&gt;Someone with less coding experience will find Framer difficult and more intimidating than it has to be. I&amp;#39;d recommend dealing with the learning curve by practicing on a few side projects before you put anything important on the line (not that side projects aren&amp;#39;t important).&lt;/p&gt;

&lt;p&gt;Where Framer really shines bright: you won&amp;#39;t have to verbalize (or make embarrassing gestures) for how your app should feel, because you define that with enormous control. Oddly enough, the biggest con is your ally here, as writing custom JavaScript is what makes this control possible.&lt;/p&gt;

&lt;p&gt;Framer supports clicks and taps just the same, supports many animation options, is highly configurable, and runs very, very smoothly on all (of my) devices. I&amp;#39;ve tested it on iPhone, iPad, and a Mac. Because of this control and variability of use, your prototypes will feel much more real to the user in a testing scenario. This is especially good when your interactions help communicate state and position.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;ve used Framer before, let me know how you like it. There&amp;#39;s only so much time in the world to play with prototyping tools, but my next experiment will be with &lt;a href="http://facebook.github.io/origami/"&gt;Origami&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Bonus!&lt;/h2&gt;

&lt;p&gt;While doing user testing sessions, you may want the testee to work on the actual device. To do so you can use &lt;a href="http://anvilformac.com/"&gt;Anvil&lt;/a&gt; to create a local web address using &lt;a href="http://pow.cx/"&gt;Pow&lt;/a&gt;. This will give you an address (something like &lt;code&gt;http://yourappname.youripaddress.xip.io/&lt;/code&gt;) that you may access on your device.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Goodbye Heroku</title>
    <link rel="alternate" href="/2014/06/23/goodbye-heroku.html"/>
    <id>/2014/06/23/goodbye-heroku.html</id>
    <published>2014-06-23T00:00:00Z</published>
    <updated>2014-06-23T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;#39;ve been a Heroku user since the beginning. And I understand they have
had their ups and downs but over the past 2 years the service has been
degrading and today was the last straw for me. Allow me to elaborate.&lt;/p&gt;

&lt;h2&gt;Downtime&lt;/h2&gt;

&lt;p&gt;Today Heroku had a &amp;quot;Scheduled Maintenance at 2pm EST&amp;quot;. First of all,
this is just stupid. Don&amp;#39;t schedule a mainteance period at 2pm EST for
&lt;strong&gt;anything&lt;/strong&gt;. That period of time has to be one of the most heavily
trafficked timeslots on the web. Its an hour after everyone on the East
Coast has come back from lunch. It is an hour before lunch on the West
Coast. This, to me, demonstrates a lack of judgement on Heroku&amp;#39;s part. I
know the counter-argument is going to be &amp;quot;we&amp;#39;ve done plenty of other
scheduled maintenances at 2pm EST without incident&amp;quot;. My reply is that
this counter-argument is &lt;em&gt;bullshit&lt;/em&gt;. Just because you got away without
problems previously doesn&amp;#39;t mean they won&amp;#39;t happen in the future. Things
go wrong, people screw up. When Heroku has control over when those
screwups occur and they choose to push that risk at 2pm EST that is a
problem.&lt;/p&gt;

&lt;h2&gt;Reporting of Downtime&lt;/h2&gt;

&lt;p&gt;I am convinced their Status team just sits on Twitter all day and waits
for enough people to bitch and complain that Heroku is down before they
update the status page. I don&amp;#39;t care what data they provide to the
contrary.&lt;/p&gt;

&lt;h2&gt;Price&lt;/h2&gt;

&lt;p&gt;It has been heavily reported that AWS has cut their pricing quite a bit
over the past few years. Yet, how many times has Heroku reduced its
price? (Heroku resells AWS) To my knowledge &lt;strong&gt;zero&lt;/strong&gt;. So everytime Amazon
reduces EC2 pricing Heroku just pockets the difference and gives a &amp;quot;fuck
you very much!&amp;quot; to all of its customers.&lt;/p&gt;

&lt;h2&gt;Fixes for All&lt;/h2&gt;

&lt;p&gt;The major downside to hosted devops is that when something goes wrong
that affects everyone you usually have to wait until they make the fix
for &lt;strong&gt;everyone&lt;/strong&gt; before your app comes back up. What should probably be
a 5 minute downtime &lt;em&gt;at most&lt;/em&gt; turns into a 30 minute downtime &lt;strong&gt;at least&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Buildpacks&lt;/h2&gt;

&lt;p&gt;Buildpacks are just terrible.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I get that I&amp;#39;m ranting and I&amp;#39;m pretty pissed off. But mistakes like
today&amp;#39;s are completely avoidable yet Heroku chose to expose everyone to
this increased risk for no good reason that I can see.&lt;/p&gt;

&lt;p&gt;We will no longer be starting any new customers on Heroku. And we will
recommend to our current customers to move off of Heorku. We&amp;#39;re big fans
of Digital Ocean so we&amp;#39;re likely to land there as our preferred hosting
service.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Making the DIY conference badges</title>
    <link rel="alternate" href="/2014/06/21/making-the-diy-badges.html"/>
    <id>/2014/06/21/making-the-diy-badges.html</id>
    <published>2014-06-21T00:00:00Z</published>
    <updated>2014-06-21T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;What are badges for, anyway? At any professional event with more than fifteen people, we wear some sort of name tag.&lt;/p&gt;

&lt;h2&gt;The current situation with badges:&lt;/h2&gt;

&lt;p&gt;If it&amp;#39;s a smaller or low budget event, you get a shipping label and write your name with a sharpie, then stick to your shirt and hope it holds. (I always stick mine to a pant leg just because.) &lt;/p&gt;

&lt;p&gt;A step up would be vinyl stickers or shipping labels with something like the conference name printed on them, but again attendees must write their name. &lt;/p&gt;

&lt;p&gt;At the highest level of badge, you arrive an event and receive a fully branded badge on a colorful lanyard with your name and photo printed on both sides, to prevent you from lending your $800 conference pass to a friend.&lt;/p&gt;

&lt;h2&gt;Three things badges do best:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Prove that you&amp;#39;ve paid for your ticket&lt;/li&gt;
&lt;li&gt;Help brand the event&lt;/li&gt;
&lt;li&gt;Help you meet people&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our focus for the badges was mostly to help people meet and talk, and if we get to show off the Wicked Good Conferences brand - that&amp;#39;s cool too. We did not rely on the badges for ticketing because the event is relatively small, and held in a single location. There were no repeated check-ins at the door or strangers walking in off the relatively low traffic street.&lt;/p&gt;

&lt;p&gt;This allowed me the freedom to experiment with the badges. The only restriction was the budget; we wanted to make about 200 customizable name badges with a budget range of $20–$50. This is not a realistic budget for high quality &amp;quot;professionally&amp;quot; printed badges (decent custom lanyards alone are at least $1 each).&lt;/p&gt;

&lt;h2&gt;No printed names&lt;/h2&gt;

&lt;p&gt;We decided to skip printing people&amp;#39;s names altogether, and ask them to write names instead. This also allowed people to put a twitter handle and other useful information on the badges, and be funny with them. I am an introvert, so I appreciate any excuse to start a conversation. Stickers, twitter handles and stick figures on badges helped make interaction easier.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/post-assets/maria/DIY-badges-01.jpg" alt=""&gt;&lt;/p&gt;

&lt;h2&gt;No printed lanyards&lt;/h2&gt;

&lt;p&gt;Custom printed lanyards, in the quality we wanted, were way above our budget. Instead, we tried a few DIY ideas: string, ribbon, rope and strips of jersey fabric. The fabric turned out to be the most comfortable to wear. Knit jersey (&amp;quot;tee-shirt&amp;quot;) fabric will roll into a soft string if you cut 1&amp;quot; wide strips and stretch them out. We used about 2.5 yards of 52&amp;quot; wide fabric to make the 200 strips. We could make the strips a half to a third of the width of the fabric, depending on how long we wanted the strips to be.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/post-assets/maria/DIY-badges-02.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;An added benefit of using fabric is a much better selection of colors compared to lanyards. We managed to get a near-perfect match to our attendee shirts!&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/post-assets/maria/DIY-badges-03.jpg" alt=""&gt;&lt;/p&gt;

&lt;h2&gt;Actually, no printed anything&lt;/h2&gt;

&lt;p&gt;To make a color impression at a low cost we used a rubber stamp with a purple ink pad. We did not commit to placing any sponsor logos on the badges, so I had complete freedom with this design. We ordered a rubber stamp of the Wicked Good Conferences logo by itself so we can reuse it for the next conferences. To make the badge itself, we stamped and punched a hole in standard 3×5&amp;quot; index cards.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/post-assets/maria/DIY-badges-04.jpg" alt=""&gt;
&lt;img src="/images/post-assets/maria/DIY-badges-05.jpg" alt=""&gt;&lt;/p&gt;

&lt;h2&gt;Budget breakdown&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1×2&amp;quot; Custom rubber stamp&amp;quot;: $12 + shipping&lt;/li&gt;
&lt;li&gt;Purple ink pad: $3.50&lt;/li&gt;
&lt;li&gt;Index cards, 2 packs of 100: ~$7&lt;/li&gt;
&lt;li&gt;Single hole punch: ~$5&lt;/li&gt;
&lt;li&gt;Jersey fabric (we already had it, but if you need to buy it cost about $5/yard): free or $15&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Lessons learned&lt;/h2&gt;

&lt;p&gt;The badges felt about right for the event, not too formal, not too shabby. Some lanyards turned out a bit short, but people were creative with placement, wearing them not only around the neck but on a sleeve, on the hat, tying them to the belt loop or a shirt button, and even wearing as a soft choker.
Next time around we can also experiment with other paper types and have the paper cut to size, to allow for a sturdier badge in a wider range of colors.&lt;/p&gt;

&lt;p&gt;Were you at WGE? Let us know what you thought of the DIY badges!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Swift and JavaScript</title>
    <link rel="alternate" href="/2014/06/15/swift-and-javascript.html"/>
    <id>/2014/06/15/swift-and-javascript.html</id>
    <published>2014-06-15T00:00:00Z</published>
    <updated>2014-06-15T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;You might have already heard about a new language from Apple, &lt;a href="https://developer.apple.com/swift/"&gt;Swift&lt;/a&gt;.
If you haven&amp;#39;t, make sure to check it out. This is the language that is going to replace &lt;a href="https://en.wikipedia.org/wiki/Objective-C"&gt;Objective-C&lt;/a&gt; in the future.&lt;/p&gt;

&lt;p&gt;So why should a JavaScript developer be excited about a language like Swift?
Because semicolons are optional in Swift, too.&lt;/p&gt;

&lt;h3&gt;Variables&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s declare a variable in &lt;code&gt;JavaScript&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; country = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Argentina&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s how the same declaration looks like in Swift:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;var country: String = &amp;quot;Argentina&amp;quot;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, the same statement can be rewritten as such:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;var country = &amp;quot;Argentina&amp;quot;; // inferred as String
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Swift uses type inference. It looks on the right hand side of the assignment
to figure out the type of the variable.&lt;/p&gt;

&lt;p&gt;Swift is type safe language. It performs type checks during compilation time
and informs you if there are any type mismatch errors. Unlike in JavaScript,
that means that after you defined &lt;code&gt;country&lt;/code&gt; variable and its type was
inferred to be &lt;code&gt;String&lt;/code&gt;, you can&amp;#39;t re-assign with another type:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;country = 2; // Cannot convert the expression's type to type 'String'
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Constants&lt;/h3&gt;

&lt;p&gt;JavaScript doesn&amp;#39;t have a concept of a &lt;code&gt;constant&lt;/code&gt;. All &amp;quot;constants&amp;quot; are just
variables (typically in the outer scope). You can &amp;quot;freeze&amp;quot; the object using
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"&gt;Object.freeze()&lt;/a&gt;
to prevent new properties to be added and existing properties to be removed.&lt;/p&gt;

&lt;p&gt;The next version of JavaScript is going to introduce &lt;a href="https://people.mozilla.org/%7Ejorendorff/es6-draft.html#sec-13.2.1"&gt;const&lt;/a&gt;
keyword and will support constants:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;const y = &lt;span class="integer"&gt;10&lt;/span&gt;; &lt;span class="comment"&gt;// Note that you need to specift the value of the constant&lt;/span&gt;
y = &lt;span class="integer"&gt;20&lt;/span&gt;;       &lt;span class="comment"&gt;// SyntaxError: Assignment to constant variable&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you want to define a constant in Swift, you will use &lt;code&gt;let&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;let bestCity = &amp;quot;Boston&amp;quot;;
bestCity = &amp;quot;Cape Town&amp;quot;; // Cannot assign to 'let' value 'bestCity'

// Swift allows you to use underscore as a delimiter
// to improve readability of your code
let oneMillion = 1_000_000;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Tuples&lt;/h3&gt;

&lt;p&gt;So what is a &lt;a href="http://en.wikipedia.org/wiki/Tuple"&gt;tuple&lt;/a&gt;? TL;DR it&amp;#39;s an ordered list of things.&lt;/p&gt;

&lt;p&gt;You can think of a tuple as if it&amp;#39;s an object:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; villain = {
  &lt;span class="key"&gt;name&lt;/span&gt;:     &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Magneto&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;realName&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Max Eisenhardt&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;powers&lt;/span&gt;:   [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Magnetic flight&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Magnetic force fields&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;]
};

villain.name; &lt;span class="comment"&gt;// =&amp;gt; 'Magneto'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In Swift, the declaration of a tuple will look like this:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;let villain = (
  name:     &amp;quot;Magneto&amp;quot;,
  realName: &amp;quot;Max Eisenhardt&amp;quot;,
  powers:   [&amp;quot;Magnetic flight&amp;quot;, &amp;quot;Magnetic force fields&amp;quot;]
);

villain.name; // =&amp;gt; &amp;quot;Magneto&amp;quot;
villain.1;    // =&amp;gt; &amp;quot;Max Eisenhardt&amp;quot;
villain.2;    // =&amp;gt; [...]
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Tuples are useful when you want to return multiple values from a function as a single compound value (that is
exactly what we do so often in JavaScript).&lt;/p&gt;

&lt;h3&gt;Arrays and Dictionaries&lt;/h3&gt;

&lt;p&gt;Definining an array or a dictionary looks very similar.&lt;/p&gt;

&lt;p&gt;In JavaScript:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; names = [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Alex&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Rob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Dan&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;];
&lt;span class="keyword"&gt;var&lt;/span&gt; ages  = { &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Alex&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;13&lt;/span&gt;, &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Rob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt;, &lt;span class="key"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Dan&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;4&lt;/span&gt; };

names[&lt;span class="integer"&gt;0&lt;/span&gt;];     &lt;span class="comment"&gt;// =&amp;gt; 'Alex'&lt;/span&gt;
ages[&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Alex&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;]; &lt;span class="comment"&gt;// =&amp;gt; 13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In Swift:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;var names = [&amp;quot;Alex&amp;quot;, &amp;quot;Rob&amp;quot;, &amp;quot;Dan&amp;quot;];
var ages  = [&amp;quot;Alex&amp;quot;: 13, &amp;quot;Rob&amp;quot;: 5, &amp;quot;Dan&amp;quot;: 4];

names[0];     // =&amp;gt; &amp;quot;Alex&amp;quot;
ages[&amp;quot;Alex&amp;quot;]; // 13
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Generics&lt;/h3&gt;

&lt;p&gt;In a very generic, hand wavy terms &lt;code&gt;Generics&lt;/code&gt; introduce type safety and reusability of the code. They&amp;#39;re frequently used
in classes and methods that operate on them.&lt;/p&gt;

&lt;p&gt;To illustrate what &lt;code&gt;Generics&lt;/code&gt; are, let&amp;#39;s implement a &lt;a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;Queue&lt;/span&gt;() {
  &lt;span class="local-variable"&gt;this&lt;/span&gt;._queue = [];
}

Queue.prototype.&lt;span class="function"&gt;enqueue&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;(item) {
  &lt;span class="local-variable"&gt;this&lt;/span&gt;._queue.push(item);
}

Queue.prototype.&lt;span class="function"&gt;dequeue&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;() {
 &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;._queue.shift();
}

&lt;span class="keyword"&gt;var&lt;/span&gt; queue = &lt;span class="keyword"&gt;new&lt;/span&gt; Queue();

queue.enqueue(&lt;span class="integer"&gt;2&lt;/span&gt;);
queue.enqueue(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
queue.enqueue(&lt;span class="float"&gt;0.5&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now wasn&amp;#39;t that easy, eh?&lt;/p&gt;

&lt;p&gt;Note, that you don&amp;#39;t have to care about types in JavaScript that much. You just &lt;code&gt;enqueue&lt;/code&gt; a value of any type
and you&amp;#39;re all set.&lt;/p&gt;

&lt;p&gt;Swift is different. You can&amp;#39;t push objects of different types onto the array.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a &lt;code&gt;Queue&lt;/code&gt; class for &lt;code&gt;Integer&lt;/code&gt; values:&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;class Queue {
  var _queue = Int[]();

  func enqueue(item: Int) {
    _queue.append(item);
  }

  func dequeue() -&amp;gt; Int {
    return _queue.removeAtIndex(0);
  }
}

var queue = Queue();

queue.enqueue(2);
queue.enqueue(3);
queue.enqueue(4);
queue.enqueue(&amp;quot;4&amp;quot;); // Cannot convert the expression's type to type 'Int'
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What if you want to create a &lt;code&gt;Queue&lt;/code&gt; class for &lt;code&gt;String&lt;/code&gt; values? You&amp;#39;re going to have copy implementation of &lt;code&gt;Queue&amp;lt;Int&amp;gt;&lt;/code&gt; class
and replace &lt;code&gt;Int&lt;/code&gt; with &lt;code&gt;String&lt;/code&gt;. A lot of code duplication. Here&amp;#39;s where &lt;code&gt;Generics&lt;/code&gt; shine.&lt;/p&gt;
&lt;div class="highlight swift "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;class Queue&amp;lt;T&amp;gt; {
  var _queue = T[]();

  func enqueue(item: T) {
    _queue.append(item);
  }

  func dequeue() -&amp;gt; T {
    return _queue.removeAtIndex(0);
  }
}

var intQueue    = Queue&amp;lt;Int&amp;gt;();
var stringQueue = Queue&amp;lt;String&amp;gt;();

intQueue.enqueue(2);
intQueue.enqueue(3);
intQueue.enqueue(4);

stringQueue.enqueue(&amp;quot;2&amp;quot;);
stringQueue.enqueue(&amp;quot;3&amp;quot;);
stringQueue.enqueue(&amp;quot;4&amp;quot;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now you can create &lt;code&gt;Queue&lt;/code&gt; of the different types with just one &lt;code&gt;Queue&lt;/code&gt; implementation.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Swift is a step in the right direction in my opinion. They lowered the &amp;quot;language ramp up&amp;quot; time by simplifying Objective-C syntax
quite a bit without damaging the power of the language. I feel like it looks really compelling to JavaScript developers.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Process Paradox</title>
    <link rel="alternate" href="/2014/06/06/process-paradox.html"/>
    <id>/2014/06/06/process-paradox.html</id>
    <published>2014-06-06T00:00:00Z</published>
    <updated>2014-06-06T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;If it feels like process, it is not working… It should feel like a logical means to achieve an end.&lt;/p&gt;

&lt;p&gt;For much of my career as a Project Manager I have been inundated with software development process, theories, techniques, methodologies and related tools - which by association has trickled into the teams I have worked with.  Over time I have observed team members feeling the frustration that “Process” can bring to a project when it is applied in a theoretical way vs. a practical way.  Have you ever facilitated a planning meeting while team members glaze over and bury their heads into their laptops? To all my Project Management brethren - if this is something you are observing in your teams, don’t accept this reality; realize that your process &amp;quot;is not working&amp;quot;.&lt;/p&gt;

&lt;p&gt;The art of project management is not dictating process but finding practices that align with the team’s needs and context.   For purposes of this blog post these are the “logical means” I refer to in my opening statement above.  A little Scrum here, a little Waterfall there, and a sprinkle of Kanban might be the right recipe for a particular project - whereas it could be totally wrong for another.   &lt;/p&gt;

&lt;p&gt;In many ways this context is driven by the pyramid of constraints - cost/scope/time, which is project management 101.  However, other contexts might be size of team, remote/co-located, green-field development, team member experience, criticality of deliverables to human life, number of stakeholders, thick/thin management hierarchy, complexity of business rules/logic, and many others which are industry specific.  &lt;/p&gt;

&lt;p&gt;One of my biggest gripes with the “Agile” movement is that companies/teams are adopting variations of the methodology as a prescription to execute projects. I am pretty damn sure the pioneering thinkers who wrote the Agile Manifesto wanted teams to become more principled in thinking about the practices they chose to use vs. following the playbook blindly and not making sure it aligns with the project context.&lt;/p&gt;

&lt;p&gt;It has been very affirming to know that engineers and designers in large and small companies loath process – I’d say this is pretty universal. However, I have found that these same people are incredibly logical people who are willing to do something non-engineering/design related if  they feel deep down it is a “logical means to achieve an end.” I believe it is the project manager’s responsibility as a servant leader to make sure teams don’t feel like process is holding them back but that it is helping them move forward.&lt;/p&gt;

&lt;p&gt;What I love about being a Project Manager at DockYard is the diversity of the project contexts that come through our door. For me it is and has been a great way to experiment, mix, and match processes to find the right practices for a team/project context.  I believe that DockYard’s acknowledgment of this reality allows us to better serve our clients’ unique contexts.  Not by accident - it is a very deliberate way to approach projects and one size never fits all.   &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building an Ember App with Rails Part 4</title>
    <link rel="alternate" href="/2014/05/31/building-an-ember-app-with-rails-part-4.html"/>
    <id>/2014/05/31/building-an-ember-app-with-rails-part-4.html</id>
    <published>2014-05-31T00:00:00Z</published>
    <updated>2014-05-31T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Before we get underway we need to update ember-data in our project to at
least &lt;code&gt;beta.8&lt;/code&gt;. Open &lt;code&gt;ember/bower.json&lt;/code&gt; and if you have any version
less than 8 you&amp;#39;ll need to update to at least 8. If you are already on 8
or higher you won&amp;#39;t need to do anything.&lt;/p&gt;

&lt;p&gt;Once you&amp;#39;ve made the change save the file and run &lt;code&gt;bower install&lt;/code&gt; from
the &lt;code&gt;ember/&lt;/code&gt; directory. If you are asked to choose between different
versions of ember-data make sure you choose the correct one.&lt;/p&gt;

&lt;p&gt;In this part we&amp;#39;ll add Presentations to each of the Speaker pages. This
means we&amp;#39;ll have to add a relationship between two models.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ember/tests/integration/speakers-page-test.js&lt;/code&gt; modify the test
&amp;quot;Should list all speakers and number of presentations&amp;quot;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/tests/integration/speaker-page-test.js&lt;/span&gt;

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Should list all speakers and number of presentations&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  visit(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/speakers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a:contains(&amp;quot;Bugs Bunny (2)&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).length, &lt;span class="integer"&gt;1&lt;/span&gt;);
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a:contains(&amp;quot;Wile E. Coyote (1)&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).length, &lt;span class="integer"&gt;1&lt;/span&gt;);
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a:contains(&amp;quot;Yosemite Sam (3)&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).length, &lt;span class="integer"&gt;1&lt;/span&gt;);
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The number in the parentheses will represent the number of presentations that this speaker 
has given.&lt;/p&gt;

&lt;p&gt;Next we need to modify our &lt;code&gt;setup&lt;/code&gt; function&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/tests/integration/speaker-page-test.js&lt;/span&gt;

&lt;span class="keyword"&gt;var&lt;/span&gt; speakers = [
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Bugs Bunny&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;presentation_ids&lt;/span&gt;: [&lt;span class="integer"&gt;1&lt;/span&gt;,&lt;span class="integer"&gt;2&lt;/span&gt;] },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Wile E. Coyote&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;presentation_ids&lt;/span&gt;: [&lt;span class="integer"&gt;3&lt;/span&gt;] },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Yosemite Sam&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;presentation_ids&lt;/span&gt;: [&lt;span class="integer"&gt;4&lt;/span&gt;,&lt;span class="integer"&gt;5&lt;/span&gt;,&lt;span class="integer"&gt;6&lt;/span&gt;] }
];

&lt;span class="keyword"&gt;var&lt;/span&gt; presentations = [
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;What's up with Docs?&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;speaker_id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt; },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Of course, you know, this means war.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;speaker_id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt; },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt;, &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Getting the most from the Acme categlog.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;speaker_id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt; },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;4&lt;/span&gt;, &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Shaaaad up!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;speaker_id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt; },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt;, &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Ah hates rabbits.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;speaker_id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt; },
  { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;6&lt;/span&gt;, &lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;The Great horni-todes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;speaker_id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt; }
];

server = &lt;span class="keyword"&gt;new&lt;/span&gt; Pretender(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/api/speakers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(request) {
    &lt;span class="keyword"&gt;return&lt;/span&gt; [&lt;span class="integer"&gt;200&lt;/span&gt;, {&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Content-Type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;application/json&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}, JSON.stringify({&lt;span class="key"&gt;speakers&lt;/span&gt;: speakers, &lt;span class="key"&gt;presentations&lt;/span&gt;: presentations})];
  });

  &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/api/speakers/:id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(request) {
    &lt;span class="keyword"&gt;var&lt;/span&gt; speaker = speakers.find(&lt;span class="keyword"&gt;function&lt;/span&gt;(speaker) {
      &lt;span class="keyword"&gt;if&lt;/span&gt; (speaker.id === parseInt(request.params.id, &lt;span class="integer"&gt;10&lt;/span&gt;)) {
        &lt;span class="keyword"&gt;return&lt;/span&gt; speaker;
      }
    });

    &lt;span class="keyword"&gt;return&lt;/span&gt; [&lt;span class="integer"&gt;200&lt;/span&gt;, {&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Content-Type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;application/json&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}, JSON.stringify({&lt;span class="key"&gt;speaker&lt;/span&gt;: speaker, &lt;span class="key"&gt;presentations&lt;/span&gt;: presentations})];
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Completely replace the &lt;code&gt;speakers&lt;/code&gt; variable that was previously there. The only change to the API stub is that
&lt;code&gt;presentations&lt;/code&gt; is being added to the payload. The JSON here is the
style of JSON that ember-data expects to be emitted. We are returning a
payload that includes all speakers and presentations. The speaker
records include ids referencing the presentations associated.&lt;/p&gt;

&lt;p&gt;We can now add the Presentation model to our Ember app:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/app/models/presentation.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;title&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;speaker&lt;/span&gt;: DS.belongsTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;speaker&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
}); 
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We&amp;#39;ve told ember-data to expect the Presentation model to belong to the
Speaker model. Let&amp;#39;s set the inverse relationship&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/app/models/speaker.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; DS from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-data&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;name&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;presentations&lt;/span&gt;: DS.hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;presentation&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Modifying our existing Speaker model to add to relationship to its many
Presentation models.&lt;/p&gt;

&lt;p&gt;Finally to make this tests green we need to change our template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;// ember/app/templates/speakers/index.hbs

&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
 &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="error"&gt;~&lt;/span&gt;&lt;span class="error"&gt;#&lt;/span&gt;&lt;span class="attribute-name"&gt;link-to&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;speakers.show&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="attribute-name"&gt;this&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
   &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt; (&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;presentations.length&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;)
 &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="error"&gt;~&lt;/span&gt;&lt;span class="error"&gt;/&lt;/span&gt;&lt;span class="attribute-name"&gt;link-to&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice that we we can call regular JavaScript properties like &lt;code&gt;length&lt;/code&gt; on the association.
There is also a slight change that I&amp;#39;ve made to the &lt;code&gt;link-to&lt;/code&gt;. Adding
&lt;code&gt;~&lt;/code&gt; will &lt;a href="http://handlebarsjs.com/block_helpers.html#whitespace-control"&gt;tell Handlebars how to control
whitespace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point our new test should be green. Lets add another.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// ember/tests/integration/speaker-page-test.js&lt;/span&gt;

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Should list all presentations for a speaker&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  visit(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/speakers/1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;li:contains(&amp;quot;What&lt;/span&gt;&lt;span class="char"&gt;\'&lt;/span&gt;&lt;span class="content"&gt;s up with Docs?&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).length, &lt;span class="integer"&gt;1&lt;/span&gt;);
    equal(find(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;li:contains(&amp;quot;Of course, you know, this means war.&amp;quot;)&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).length, &lt;span class="integer"&gt;1&lt;/span&gt;);
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This new test is asserting that when we visit a given speaker&amp;#39;s page all
of those speaker&amp;#39;s presentations will be listed. We first need to add
presentation data to the API stub for visiting a speaker page.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;/api/speakers/:id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(request) {
  &lt;span class="keyword"&gt;var&lt;/span&gt; speaker = speakers.find(&lt;span class="keyword"&gt;function&lt;/span&gt;(speaker) {
    &lt;span class="keyword"&gt;if&lt;/span&gt; (speaker.id === parseInt(request.params.id, &lt;span class="integer"&gt;10&lt;/span&gt;)) {
      &lt;span class="keyword"&gt;return&lt;/span&gt; speaker;
    }
  });

  &lt;span class="keyword"&gt;var&lt;/span&gt; speakerPresentations = presentations.filter(&lt;span class="keyword"&gt;function&lt;/span&gt;(presentation) {
    &lt;span class="keyword"&gt;if&lt;/span&gt; (presentation.speaker_id === speaker.id) {
      &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;;
    }
  });

  &lt;span class="keyword"&gt;return&lt;/span&gt; [&lt;span class="integer"&gt;200&lt;/span&gt;, {&lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Content-Type&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;application/json&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}, JSON.stringify({&lt;span class="key"&gt;speaker&lt;/span&gt;: speaker, &lt;span class="key"&gt;presentations&lt;/span&gt;: speakerPresentations})];
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This modification of the previously existing stub will build a new payload object that
includes the speaker matching the id requested and all of the
presentations specific to that speaker.&lt;/p&gt;

&lt;p&gt;Tying up this test is easy now, we just modify the Speaker&amp;#39;s &lt;code&gt;show&lt;/code&gt;
template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;

&lt;span class="tag"&gt;&amp;lt;h5&amp;gt;&lt;/span&gt;Presentations&lt;span class="tag"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;presentations&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;title&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now that we have a green test suite with our mocked out API let&amp;#39;s the
real Rails endpoint. We&amp;#39;ll start by generating a new Presentation model.
Change to the &lt;code&gt;rails/&lt;/code&gt; directory in your project and run &lt;code&gt;rails generate
model presentation title:string speaker_id:integer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next we&amp;#39;ll generate the serializer: &lt;code&gt;rails generate serializer
presentation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s expand upon the &lt;code&gt;rails/db/seeds.rb&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# rails/db/seeds.rb&lt;/span&gt;

bugs = &lt;span class="constant"&gt;Speaker&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Bug Bunny&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
wile = &lt;span class="constant"&gt;Speaker&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Wile E. Coyote&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
sam  = &lt;span class="constant"&gt;Speaker&lt;/span&gt;.create(&lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Yosemite Sam&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)

bugs.presentations.create(&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;What's up with Docs?&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
bugs.presentations.create(&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Of course, you know, this means war.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

wile.presentations.create(&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Getting the most from the Acme categlog.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

sam.presentations.create(&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Shaaaad up!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
sam.presentations.create(&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Ah hates rabbits.&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
sam.presentations.create(&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;The Great horni-todes&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Tell our &lt;code&gt;Speaker&lt;/code&gt; model that there is a relationship to &lt;code&gt;Presentation&lt;/code&gt;
models:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# rails/app/models/speaker.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Speaker&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  has_many &lt;span class="symbol"&gt;:presentations&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally we need to modify the serializers.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# rails/app/serializers/presentation.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;PresentationSerializer&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveModel&lt;/span&gt;::&lt;span class="constant"&gt;Serializer&lt;/span&gt;
  attributes &lt;span class="symbol"&gt;:id&lt;/span&gt;, &lt;span class="symbol"&gt;:title&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# rails/app/serializers/speaker.rb&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;SpeakerSerializer&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveModel&lt;/span&gt;::&lt;span class="constant"&gt;Serializer&lt;/span&gt;
  embed &lt;span class="symbol"&gt;:ids&lt;/span&gt;, &lt;span class="key"&gt;include&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;

  attributes &lt;span class="symbol"&gt;:id&lt;/span&gt;, &lt;span class="symbol"&gt;:name&lt;/span&gt;
  has_many &lt;span class="symbol"&gt;:presentations&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the &lt;code&gt;SpeakerSerializer&lt;/code&gt; we have instructed the serializer to include
the associated &lt;code&gt;Presentation&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s reset the database and re-seed &lt;code&gt;rake db:drop db:create db:migrate db:seed&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure you are running your Ember server with the proxy enabled:
&lt;code&gt;ember server --proxy http://localhost:3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you can hit your application and you should have a all of the
necessary data. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/jmHGxgS.png" alt="image1"&gt;
&lt;img src="http://i.imgur.com/plrKLvg.png" alt="image2"&gt;&lt;/p&gt;

&lt;p&gt;Next time we&amp;#39;ll deploy our small app to Heroku.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bostonember/website/commit/10f838ff1bfb0aa1307d4de6587889489697c8da"&gt;Check out the actual code for this
part&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgr" target="_blank" href="http://wickedgoodruby.com/">Wicked Good Ruby Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2014/06/23/kapow-using-framer.html"><strong>KAPOW! Writing prototypes with Framer</strong><h6 class='footer-desc'>A look at Framer.js, a powerful prototyping tool.</h6></a>
<a class="footer__post" href="/2014/06/23/goodbye-heroku.html"><strong>Goodbye Heroku</strong><h6 class='footer-desc'>Done with them</h6></a>
<a class="footer__post" href="/2014/06/21/making-the-diy-badges.html"><strong>Making the DIY conference badges</strong><h6 class='footer-desc'>What are badges for, anyway?</h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>