<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-2731de92.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-02-12T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Automating Reefpoints</title>
    <link rel="alternate" href="/2015/02/12/automating-reefpoints.html"/>
    <id>/2015/02/12/automating-reefpoints.html</id>
    <published>2015-02-12T00:00:00Z</published>
    <updated>2015-02-12T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;We have a healthy mix of developers and designers, plus a project manager and
office manager. This results in a group of people with varying degress of command line expertise.
To make it easier to write blog posts, &lt;a href="https://github.com/dockyard/reefpoints#the-github-web-interface-way"&gt;I added instructions to create a blog
post using only GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This made it super easy for anyone to create a new blog post, have people
review it, but one piece was missing: making it easy for people to publish
their article once it was reviewed. Well, I solved that problem today with
&lt;a href="http://travis-ci.org"&gt;Travis-CI&lt;/a&gt; and a little bit of bash script.&lt;/p&gt;

&lt;p&gt;The first step required was to script the publishing of our blog. We already
use &lt;a href="https://github.com/neo/middleman-gh-pages"&gt;&lt;code&gt;middleman-gh-pages&lt;/code&gt;&lt;/a&gt;, which makes publishing as easy as &lt;code&gt;rake publish&lt;/code&gt;.
I created the following &lt;a href="https://github.com/dockyard/reefpoints/blob/master/travis_deploy.sh"&gt;&lt;code&gt;travis_deploy.sh&lt;/code&gt;&lt;/a&gt; script:&lt;/p&gt;
&lt;div class="highlight sh "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;#!/usr/bin/env bash

set -e

git config --global user.email &amp;quot;socko@dockyard.com&amp;quot;
git config --global user.name &amp;quot;sockothesock&amp;quot;


# This specifies the user who is associated to the GH_TOKEN
USER=&amp;quot;sockothesock&amp;quot;

# sending output to /dev/null to prevent GH_TOKEN leak on error
git remote rm origin
git remote add origin https://${USER}:${GHTOKEN}@github.com/dockyard/reefpoints.git &amp;amp;&amp;gt; /dev/null

bundle exec rake publish

echo -e &amp;quot;Done\n&amp;quot;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;middleman-gh-pages&lt;/code&gt; is smart in that it figures out your GitHub remote based
on the origin, so what we did is update the origin to use a GitHUb OAuth token
that allows writing to public repos. We store the OAuth token in the
environment variable &lt;code&gt;GHTOKEN&lt;/code&gt;, which we encrypt in our &lt;a href="https://github.com/dockyard/reefpoints/blob/master/.travis.yml"&gt;&lt;code&gt;travis.yml&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight yml "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="key"&gt;language&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;ruby&lt;/span&gt;&lt;/span&gt;
&lt;span class="key"&gt;sudo&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class="key"&gt;cache&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;bundler&lt;/span&gt;&lt;/span&gt;
&lt;span class="key"&gt;rvm&lt;/span&gt;:
- &lt;span class="string"&gt;&lt;span class="content"&gt;2.0.0&lt;/span&gt;&lt;/span&gt;
&lt;span class="key"&gt;branches&lt;/span&gt;:
  &lt;span class="key"&gt;only&lt;/span&gt;:
  - &lt;span class="string"&gt;&lt;span class="content"&gt;master&lt;/span&gt;&lt;/span&gt;
&lt;span class="key"&gt;script&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;./travis_deploy.sh &amp;amp;&amp;gt; /dev/null&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="key"&gt;env&lt;/span&gt;:
  &lt;span class="key"&gt;secure&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;eAyjmkDKLbXnGvC75KRNVLoAr6WE7ldT6JGOzOKOfQ9WxhEFgzAXoKZVO4mX4DfDfJbZbCyFmxKqALXGXjaBKwU2eQKeq1g4svBnxGPHmOKFMfVjkSCFag0bppE2JK9VXn70lVYFh8kJHavHgQ2pRYlSb78WfmUKbbB9PSH/rSE=&lt;/span&gt;&lt;/span&gt;
&lt;span class="key"&gt;notifications&lt;/span&gt;:
  &lt;span class="key"&gt;slack&lt;/span&gt;:
    &lt;span class="key"&gt;secure&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;o2ksyDNq6Ea2oHUbUpgICYHAUdZ0QgHSQNqgn/gginNyPYAd2MtS2h7iXVrzSgeXDSNi6WpAvAeOcUnzpA6h6oBkl0YvUTaXJs50IepWfAE4UZPwX9ZFfV8YiwnOCU9ByUTU2L9qeq83W3LuDYY7j6xZJjP5KMLC78TqTKy5pd8=&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I also added a Slack notification so that people can see when new blog posts
get published. The last thing I did was go into the Travis-CI setting and
turned off the option to build Pull Requests, as that would publish articles
before they were merged.  I accidentally leaked the OAuth Token in the Travis
logs (that&amp;#39;s why the &lt;code&gt;script&lt;/code&gt; step is redirecting output to &lt;code&gt;/dev/null&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In the end, it was really simple to automate the publication of our blog. It
has the added bonus of publishing corrections to the blog when anyone&amp;#39;s pull
request is merged.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Manage the conversation</title>
    <link rel="alternate" href="/2015/02/11/managing-the-conversation.html"/>
    <id>/2015/02/11/managing-the-conversation.html</id>
    <published>2015-02-11T00:00:00Z</published>
    <updated>2015-02-11T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;One of my core UX design skills is finding information through user testing and interviews. What we gather will help us decide what to build, and how. This makes our ability to source qualitative information very important to the success of a product.&lt;/p&gt;

&lt;p&gt;A user interview is, at its essence, a closely managed conversation. It is my responsibility, as the designer, to manage it. The level of control required of the UX designer in this situation is unfamiliar, and can be stressful in the beginning. I think the reason for this initial discomfort is that we have little context for this managed type of conversation in our everyday life. We’re used to conversations in which both parties share control over the direction and tone. Owning the conversation completely can feel rough and undemocratic. It takes skill and experience to do it while making the other party feel at ease.&lt;/p&gt;

&lt;p&gt;I want to share what I learned while conducting interviews and user tests at DockYard. I hope this will take some of the edge off the initial difficulty for others also learning this skill, and make it a more pleasant and productive time for all.&lt;/p&gt;

&lt;h2&gt;Lessons learned&lt;/h2&gt;

&lt;h3&gt;1. Prepare well&lt;/h3&gt;

&lt;p&gt;There is a lot of prep work involved, before the conversations can even start. Taking the time to do these steps properly allows me to get the most out of the time I spend with the interviewee.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Schedule the interviews. You may need to find suitable users yourself. Or, the client may help by putting you in touch with some preselected users to interview. Try not to schedule interviews back-to-back in case one takes a bit longer than expected.&lt;/li&gt;
&lt;li&gt;Arrange for the legal details. This could include notifying the interviewee of privacy arrangements, having them sign an NDA, or otherwise vetting the situation. Basically, you want to protect yourself, the person you’re interviewing, and the client by specifying how information is going to be used.&lt;/li&gt;
&lt;li&gt;Draft a sequence of questions that cover your desired information.&lt;/li&gt;
&lt;li&gt;Edit until questions sound polished and neutral (more on this to follow, in a separate post)&lt;/li&gt;
&lt;li&gt;Prepare a notebook, pen and a laptop.&lt;/li&gt;
&lt;li&gt;Print the questions so I can write notes in context and check off completed ones.&lt;/li&gt;
&lt;li&gt;Prepare backups and extra copies of any materials I’m planning to use.&lt;/li&gt;
&lt;li&gt;Grab water and a snack! You don’t want to take focus away from the interview by being too thirsty or hungry.&lt;/li&gt;
&lt;li&gt;If needed, also grab a timer and a sound recorder (your needs may vary)&lt;/li&gt;
&lt;li&gt;Triple-check the list of interviewees and their basic information. For example, phone interviews can happen over different time zones. It’s nice to verify you&amp;#39;re not calling the person who kindly offered up their time at 6am.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;2. Establish context&lt;/h3&gt;

&lt;p&gt;Your interviewee should theoretically know who you are and what you’re talking about. After all, they agreed to the interview. However, it is always a good idea to confirm your assumptions. A brief introduction won’t hurt. For example, you could start with &lt;em&gt;“Hi ____, thank you for taking time to do this! My name is ____, and my company was hired by ____ to improve their product. How familiar are you with the product?”&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;3. Direct the conversation&lt;/h3&gt;

&lt;p&gt;For a UX designer starting out, it may seem rude to redirect the conversation. Especially so if your interviewee is describing, with passion and detail, a subject they are an expert in. But don&amp;#39;t be afraid to redirect the conversation. You need to get to the specific questions you want answered (but of course be nice about it!). For example, to get back on track, you might say &lt;em&gt;“Great - this extra information is very helpful, but I’d like to get back to the original reason you started using ____?”&lt;/em&gt;  This acknowledges the value of their insight, then nudges them to answer your original question.&lt;/p&gt;

&lt;h3&gt;4. Go with the flow&lt;/h3&gt;

&lt;p&gt;At the start of the interview, there is a prepared, logical sequence of questions to ask. But in a conversation, one thing may lead naturally to another. If it makes sense to ask things out of order, it’s totally acceptable to do so. This is where a printed list of questions helps. Check them off as you go to make sure none remain unanswered.&lt;/p&gt;

&lt;h3&gt;5. Use teamwork&lt;/h3&gt;

&lt;p&gt;It is definitely easier to have a team of two handling the interview. This way, one person asks questions while the other focuses on capturing notes. Some notes may be of things like body language, expression, and movement - all important indicators of how a user may feel about the questions in addition to what they actually say. An experienced interviewer could probably handle both tasks with grace. As a beginner, it&amp;#39;s almost impossible. Try to do both at once, and you&amp;#39;ll either get awkward pauses as you write notes, or you&amp;#39;ll fail to record some of the valuable details.&lt;/p&gt;

&lt;h3&gt;6. Don’t be afraid to clarify&lt;/h3&gt;

&lt;p&gt;Some interviews happen over the phone. The challenge here is that we lose most of the added information of body language and facial expression. This could be remedied with extra questions. For example, if I think the interviewee is referring to their laptop to answer something, I would literally ask that: &lt;em&gt;“I’m guessing you’re looking at the laptop screen for reference - is that correct?”&lt;/em&gt;  It is also important to be  attentive to the tone of voice so you can hear emotion, like hesitation.&lt;/p&gt;

&lt;p&gt;Another possible challenge in phone interviews is sound quality. Users may be on a shaky cell phone connection, or calling us via Skype. This can make their (and potentially your own) voice difficult to understand. It is tempting to dismiss the poor quality of sound and just omit details you can’t quite hear. Make sure to always ask the interviewee to repeat or speak louder if you do not understand what’s being said.&lt;/p&gt;

&lt;h2&gt;In conclusion&lt;/h2&gt;

&lt;p&gt;Conducting interviews caused me to cringe quite a few times. Am I doing it right? What does the interviewee think of me? Do I sound professional? Looking back, I can see how I and my colleagues got over our fears, and made significant improvements with just a few rounds of practice.&lt;/p&gt;

&lt;p&gt;Remember, both you and the interviewee are there because you want to improve some aspect of people’s lives through your work and their experience. You’re on the same side, and you share this interest in the thing you’re discussing. Make the most of this interviewing situation, and you will see improved results each time.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember QUnit 0.2.x</title>
    <link rel="alternate" href="/2015/02/06/ember-qunit-0-2.html"/>
    <id>/2015/02/06/ember-qunit-0-2.html</id>
    <published>2015-02-06T00:00:00Z</published>
    <updated>2015-02-06T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/rwjblue/ember-qunit"&gt;Ember QUnit&lt;/a&gt; 0.2.x has been released. It brings a whole bunch of bug fixes and some much needed cleanup, but there are a couple breaking changes also.&lt;/p&gt;

&lt;h3&gt;History of the changes&lt;/h3&gt;

&lt;p&gt;Ember QUnit started as a self contained library to make unit testing of Ember applications significantly easier. Ember QUnit proved that unit testing an Ember application could be very simple, and users of other testing frameworks wanted to join in the unit testing fun.  Unfortunately, the early code was fairly coupled to &lt;a href="http://qunitjs.com"&gt;QUnit&lt;/a&gt; (the testing framework being used) so reusing the Ember unit testing helpers separate from QUnit was not possible.&lt;/p&gt;

&lt;p&gt;Ember QUnit 0.2.x is a complete organizational refactor to remove the Ember unit testing helpers (into the appropriately named &lt;a href="https://github.com/switchfly/ember-test-helpers"&gt;ember-test-helpers&lt;/a&gt;) and keep the QUnit specific parts in Ember QUnit. The majority of this refactoring effort was done by &lt;a href="https://twitter.com/dgeb"&gt;Dan Gebhardt&lt;/a&gt; and sponsored by the good folks at &lt;a href="http://www.switchfly.com"&gt;SwitchFly&lt;/a&gt; (you can read their write-up of the work &lt;a href="http://blog.switchfly.com/2014/11/Refactoring-Ember-Testing-for-Mocha"&gt;here&lt;/a&gt;). Out of this effort we have been able to create &lt;a href="https://github.com/switchfly/ember-mocha"&gt;Ember Mocha&lt;/a&gt; which now has feature parity with Ember QUnit and is a truly first class Ember unit testing solution. Due to the usage of a general purpose underlying ember-test-helpers library, it should now be possible to create a nice wrapper around nearly any JS testing framework.&lt;/p&gt;

&lt;h3&gt;Notable Changes&lt;/h3&gt;

&lt;h4&gt;setup and teardown Deprecation&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; are deprecated in favor of &lt;code&gt;beforeEach&lt;/code&gt; / &lt;code&gt;afterEach&lt;/code&gt;. This update was made to allow closer conformance to &lt;a href="http://qunitjs.com/upgrade-guide-2.x/"&gt;QUnit 2.x&lt;/a&gt; concepts.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Refactor from (under 0.1.x):&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; { test, moduleForComponent } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

moduleForComponent(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;awesome-sauce&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;AwesomeSauceComponent&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() { },

  &lt;span class="function"&gt;teardown&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() { }
});

&lt;span class="comment"&gt;// To (under 0.2.x):&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; { test, moduleForComponent } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

moduleForComponent(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;awesome-sauce&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;AwesomeSauceComponent&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;beforeEach&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() { },

  &lt;span class="function"&gt;afterEach&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() { }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h4&gt;Global Assertion Deprecation&lt;/h4&gt;

&lt;p&gt;Usage of global assertions are deprecated and should be replaced with the &lt;code&gt;Assert&lt;/code&gt; argument to your test callbacks. This update was made to allow closer conformance to &lt;a href="http://qunitjs.com/upgrade-guide-2.x/"&gt;QUnit 2.x&lt;/a&gt; concepts.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Refactor from (under 0.1.x):&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; { test, moduleForComponent } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

moduleForComponent(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;awesome-sauce&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;implements awesomeness&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  equal(....);
  ok(....);
});

&lt;span class="comment"&gt;// To (under 0.2.x):&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; { test, moduleForComponent } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

moduleForComponent(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;awesome-sauce&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;implements awesomeness&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(assert) {
  assert.equal(....);
  assert.ok(....);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h4&gt;Arguments to setup / teardown / beforeEach / afterEach&lt;/h4&gt;

&lt;p&gt;In prior versions of Ember QUnit, the &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; hooks were called with a single argument: the container. In Ember QUnit 0.2 this argument is no longer present.&lt;/p&gt;

&lt;p&gt;Note: usage of &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; are deprecated, you should use &lt;code&gt;beforeEach&lt;/code&gt; and &lt;code&gt;afterEach&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Refactor from (under 0.1.x):&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; { test, moduleForComponent } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

moduleForComponent(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;awesome-sauce&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;AwesomeSauceComponent&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(container) {
    &lt;span class="comment"&gt;/* do stuff */&lt;/span&gt;
  },

  &lt;span class="function"&gt;teardown&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(container) {
    &lt;span class="comment"&gt;/* do stuff */&lt;/span&gt;
  }
});

&lt;span class="comment"&gt;// To (under 0.2.x):&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; { test, moduleForComponent } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

moduleForComponent(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;awesome-sauce&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;beforeEach&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;var&lt;/span&gt; container = &lt;span class="local-variable"&gt;this&lt;/span&gt;.container;

    &lt;span class="comment"&gt;/* do stuff */&lt;/span&gt;
  },

  &lt;span class="function"&gt;afterEach&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;var&lt;/span&gt; container = &lt;span class="local-variable"&gt;this&lt;/span&gt;.container;

    &lt;span class="comment"&gt;/* do stuff */&lt;/span&gt;
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h4&gt;Deprecated this.append in Component tests&lt;/h4&gt;

&lt;p&gt;In a component test you would previously call &lt;code&gt;this.append()&lt;/code&gt; to append your component into the DOM.  This was somewhat confusing, and took some explaining when teaching to newcomers, so it has been replaced with &lt;code&gt;this.render()&lt;/code&gt; which fits much better in our Ember mindset.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Refactor from (under 0.1.x):&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; { test, moduleForComponent } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

moduleForComponent(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;awesome-sauce&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;implements awesomeness&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="keyword"&gt;var&lt;/span&gt; component = &lt;span class="local-variable"&gt;this&lt;/span&gt;.subject();

  &lt;span class="local-variable"&gt;this&lt;/span&gt;.append();

  equal(component.&lt;span class="predefined"&gt;$&lt;/span&gt;().text(), &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;WHOAA!! AWESOME!!!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
});

&lt;span class="comment"&gt;// To (under 0.2.x):&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; { test, moduleForComponent } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

moduleForComponent(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;awesome-sauce&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;implements awesomeness&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(assert) {
  &lt;span class="keyword"&gt;var&lt;/span&gt; component = &lt;span class="local-variable"&gt;this&lt;/span&gt;.subject();

  &lt;span class="local-variable"&gt;this&lt;/span&gt;.render();

  assert.equal(component.&lt;span class="predefined"&gt;$&lt;/span&gt;().text(), &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;WHOAA!! AWESOME!!!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h4&gt;Ordering of afterEach / teardown Callback&lt;/h4&gt;

&lt;p&gt;In Ember QUnit 0.1.x, the &lt;code&gt;teardown&lt;/code&gt; callback was called &lt;em&gt;after&lt;/em&gt; all internal cleanup was finished (like clearing the container, removing any views from the DOM, etc).  In Ember QUnit 0.2.x &lt;code&gt;afterEach&lt;/code&gt; / &lt;code&gt;teardown&lt;/code&gt; is called before the internal hooks.&lt;/p&gt;

&lt;h4&gt;Build Changes&lt;/h4&gt;

&lt;p&gt;There are a few build related changes with Ember QUnit 0.2.x:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build output is removed from the main repo, and now is maintained at &lt;a href="https://github.com/rwjblue/ember-qunit-builds"&gt;ember-qunit-builds&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The output file locations are no longer nested in &lt;code&gt;dist/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;CJS and AMD output is no longer generated.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://github.com/ember-cli/ember-cli-qunit"&gt;ember-cli-qunit&lt;/a&gt; Version&lt;/h4&gt;

&lt;p&gt;If you are using Ember CLI, you should update to &lt;a href="https://github.com/ember-cli/ember-cli-qunit"&gt;ember-cli-qunit&lt;/a&gt; version 0.3.7.&lt;/p&gt;

&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;Please file issues &lt;a href="https://github.com/rwjblue/ember-qunit/issues"&gt;ember-qunit issues&lt;/a&gt; if you come across anything that isn&amp;#39;t listed here.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vim: Jump, Jump, Jump!</title>
    <link rel="alternate" href="/2015/02/04/vim-jump-jump-jump.html"/>
    <id>/2015/02/04/vim-jump-jump-jump.html</id>
    <published>2015-02-04T00:00:00Z</published>
    <updated>2015-02-04T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;&lt;a href="https://www.youtube.com/watch?v=010KyIQjkTk" target="_blank"&gt;Jump, Jump, Jump!&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;In the last Vim-related post, we
&lt;a href="http://reefpoints.dockyard.com/2014/04/10/vim-on-your-mark.html"&gt;discussed &lt;strong&gt;mark&lt;/strong&gt; motion&lt;/a&gt;,
and today, we&amp;#39;re going to cover another type of navigation: &lt;strong&gt;jump&lt;/strong&gt; motion.&lt;/p&gt;

&lt;p&gt;The main benefit of jump motion is its speed; it allows us to quickly traverse through the current file
open or previously visited files.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s briefly cover some of the most familiar ones.&lt;/p&gt;

&lt;h2&gt;File Jumps&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;File jumps&lt;/em&gt; will navigate you to a location within the current file, regardless if that
location is seen or not seen within the window.&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://www.youtube.com/watch?v=Xz-UvQYAmbg" target="_blank"&gt;Ain&amp;#39;t no Mountain high enough, ain&amp;#39;t no valley low enough...&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;gg&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Will take you to the &lt;em&gt;top&lt;/em&gt; of the file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;G&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Will take you to the &lt;em&gt;bottom&lt;/em&gt; of the file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Sentences and Paragraphs&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move a &lt;em&gt;sentence backwards&lt;/em&gt;, can take a prefix argument.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;5(&lt;/strong&gt; - Navigates you 5 sentences backwards.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;e Move a &lt;em&gt;sentence forward&lt;/em&gt;, can take a prefix argument.
  * &lt;strong&gt;10)&lt;/strong&gt; - Navigates you 10 sentences forwards.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move a &lt;em&gt;paragraph backward&lt;/em&gt;, can take a prefix argument.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;5{&lt;/strong&gt; - Navigates you 5 paragraphs backwards.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move a &lt;em&gt;paragraph forward&lt;/em&gt;, can take a prefix argument.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;5}&lt;/strong&gt; - Navigates you 5 paragraphs forwards.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="https://www.youtube.com/watch?v=EDNzQ3CXspU" target="_blank"&gt;Search and Destroy&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;/&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to search &lt;em&gt;forwards&lt;/em&gt; for a desired pattern within the file.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;/fishsticks&lt;/strong&gt; - Searches for all occurences of &lt;code&gt;fishsticks&lt;/code&gt; ahead of your current cursor.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to search &lt;em&gt;backwards&lt;/em&gt; for a desired pattern within the file.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;?catdog&lt;/strong&gt; - Searches for all occurences of &lt;code&gt;catdog&lt;/code&gt; behind your current cursor.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Repeats the last &lt;strong&gt;/&lt;/strong&gt; or &lt;strong&gt;?&lt;/strong&gt; search.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;N&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Repeats the last &lt;strong&gt;/&lt;/strong&gt; or &lt;strong&gt;?&lt;/strong&gt; search in the &lt;em&gt;opposite&lt;/em&gt; direction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Window Jumps&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Window&lt;/em&gt; jumps allow you to move within the current scope of the window or viewport.&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://www.youtube.com/watch?v=JECF2EB3LXU" target="_blank"&gt;High, Middle, and Low&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;H&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jumps your cursor to the &lt;strong&gt;highest&lt;/strong&gt; line of the window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;M&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jumps your cursor to the &lt;strong&gt;middle&lt;/strong&gt; line of the window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;L&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jumps your cursor to the &lt;strong&gt;lowest&lt;/strong&gt; line of the window.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;System Wide Jumps&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;System&lt;/em&gt; jumps are special; they have the ability to take us to any previously visited file,
regardless if those files are or are not within the same directory.&lt;/p&gt;

&lt;p&gt;This is where jump motion really shines!&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://www.youtube.com/watch?v=KZaz7OqyTHQ" target="_blank"&gt;Jump Around&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Give these next commands a try:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CTRL-O&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jump to our previous position.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CTRL-I&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jump to our next postion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By pressing these commands repeatedly, you&amp;#39;ll see that you are traversing through
your recently visited files.&lt;/p&gt;

&lt;h3&gt;Jump list&lt;/h3&gt;

&lt;p&gt;Our recent jumps are stored on our &lt;em&gt;jump&lt;/em&gt; list. We can view all the jumps through Vim&amp;#39;s
command-line mode. There are three ways to open up the jump list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;:jumps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;:jump&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;:ju&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Opens up the jump list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="https://i.imgur.com/mFc1cHz.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Above is an example of a jump list. There are four columns: &lt;em&gt;jump&lt;/em&gt;, &lt;em&gt;line&lt;/em&gt;, &lt;em&gt;col&lt;/em&gt; and &lt;em&gt;file/text&lt;/em&gt;.
The numbers underneath the &lt;em&gt;jump&lt;/em&gt; column are used to prefix our jump command, &lt;strong&gt;CTRL-O&lt;/strong&gt; and &lt;strong&gt;CTRL-I&lt;/strong&gt;.
We are also given the position of our cursor from the  &lt;em&gt;line&lt;/em&gt; and &lt;em&gt;col&lt;/em&gt;umn columns. Lastly, the
&lt;em&gt;file/text&lt;/em&gt; column, gives us either the file path or, if the jump is located in our currently opened file,
the line of text.&lt;/p&gt;

&lt;p&gt;Using our example jump list, if we want to jump to the &lt;code&gt;4&lt;/code&gt;th jump, located within &lt;code&gt;~/dir2/file.md&lt;/code&gt;, we&amp;#39;d
prefix our previous jump command with the number &lt;strong&gt;4&lt;/strong&gt;, i.e. &lt;strong&gt;4CTRL-O&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next if we want to get back to our previous position, the line
&lt;code&gt;This is another sentence!&lt;/code&gt; we can cycle back to it with a couple of &lt;strong&gt;CTRL-I&lt;/strong&gt;s. Cool!&lt;/p&gt;

&lt;p&gt;I find that &lt;em&gt;jump&lt;/em&gt; motion complements &lt;em&gt;mark&lt;/em&gt; motion really well. By setting multiple marks in the current file,
and flying to different files with jumps, my workflow has greatly improved.&lt;/p&gt;

&lt;p&gt;Hope you give &lt;em&gt;jump&lt;/em&gt; motion a try!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Debugging a Broccoli Tree</title>
    <link rel="alternate" href="/2015/02/02/debugging-a-broccoli-tree.html"/>
    <id>/2015/02/02/debugging-a-broccoli-tree.html</id>
    <published>2015-02-02T00:00:00Z</published>
    <updated>2015-02-02T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/broccolijs/broccoli"&gt;Broccoli&lt;/a&gt; is a great tool for building up assets gradually through a list of changing steps. Unfortunately, when things go wrong in one of your steps it is often very difficult to figure out what is happening at each stage.&lt;/p&gt;

&lt;p&gt;Here is where &lt;a href="https://github.com/stefanpenner/broccoli-stew"&gt;broccoli-stew&lt;/a&gt; comes in, it is a Broccoli utility library that contains a number of super useful plugins with a &lt;a href="https://en.wikipedia.org/wiki/POSIX"&gt;posix&lt;/a&gt; flair to them. Tools like &lt;code&gt;mv&lt;/code&gt;, &lt;code&gt;rename&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;, and &lt;code&gt;debug&lt;/code&gt; make it much easier to reason about your Broccoli build.&lt;/p&gt;

&lt;p&gt;And thanks to the &lt;code&gt;debug&lt;/code&gt; and &lt;code&gt;log&lt;/code&gt; plugins it has become &lt;strong&gt;massively&lt;/strong&gt; easier to log the contents of each tree, or get an extra copy to poke at manually.&lt;/p&gt;

&lt;h3&gt;Initial Brocfile.js&lt;/h3&gt;

&lt;p&gt;Lets assume you have the following &lt;code&gt;Brocfile.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Brocfile.js&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; Funnel = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-funnel&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; ES2015 = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-es6modules&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; log = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-stew&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).log;

&lt;span class="keyword"&gt;var&lt;/span&gt; app = &lt;span class="keyword"&gt;new&lt;/span&gt; Funnel(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;app&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="key"&gt;destDir&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;my-app-name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
});

&lt;span class="keyword"&gt;var&lt;/span&gt; transpiledTree = &lt;span class="keyword"&gt;new&lt;/span&gt; ES2015(app);

module.exports = transpiledTree;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The goal of the Brocfile.js listed above is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grab all files in &lt;code&gt;app/&lt;/code&gt; and its subdirectories&lt;/li&gt;
&lt;li&gt;&amp;quot;move&amp;quot; those files to &lt;code&gt;my-app-name/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;transpile those files from &lt;a href="http://webreflection.blogspot.co.uk/2015/01/javascript-and-living-ecmascript.html"&gt;ES2015&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So far this seems pretty easy, but what if your resulting output didn&amp;#39;t contain the files you expected?  How would you track that down?&lt;/p&gt;

&lt;h3&gt;Log Tree&lt;/h3&gt;

&lt;p&gt;You can log the files in a tree using &lt;code&gt;broccoli-stew&lt;/code&gt;&amp;#39;s &lt;code&gt;log&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Brocfile.js&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; Funnel = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-funnel&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; ES2015 = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-es6modules&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; log = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-stew&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).log;

&lt;span class="keyword"&gt;var&lt;/span&gt; app = &lt;span class="keyword"&gt;new&lt;/span&gt; Funnel(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;app&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="key"&gt;destDir&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;my-app-name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});

&lt;span class="keyword"&gt;var&lt;/span&gt; loggedApp = log(app, { &lt;span class="key"&gt;output&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tree&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;label&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;my-app-name tree&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });

&lt;span class="keyword"&gt;var&lt;/span&gt; transpiledTree = &lt;span class="keyword"&gt;new&lt;/span&gt; ES2015(loggedApp);

module.exports = transpiledTree;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;code&gt;log&lt;/code&gt; like this will list out the files that are present just after the &lt;code&gt;Funnel&lt;/code&gt; step.  It might output something like the following:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;my-app-name tree
└── my-app-name/
   ├── my-app-name/cat.js
   └── my-app-name/dog.js
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is super helpful to see that the right files are selected, but what if you are seeing the right files but the contents were not right?&lt;/p&gt;

&lt;h3&gt;Debug Tree&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;broccoli-stew&lt;/code&gt;&amp;#39;s &lt;code&gt;debug&lt;/code&gt; you can have a duplicate copy of the tree generated into the root of the project so you can inspect it later (it will not get cleaned up at the end of the build like the temp folders do).&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Brocfile.js&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; Funnel = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-funnel&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; ES2015 = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-es6modules&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class="keyword"&gt;var&lt;/span&gt; debug = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;broccoli-stew&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).debug;

&lt;span class="keyword"&gt;var&lt;/span&gt; app = &lt;span class="keyword"&gt;new&lt;/span&gt; Funnel(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;app&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="key"&gt;destDir&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;my-app-name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});

&lt;span class="keyword"&gt;var&lt;/span&gt; debugApp = debug(app, { &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;my-app-name&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });

&lt;span class="keyword"&gt;var&lt;/span&gt; transpiledTree = &lt;span class="keyword"&gt;new&lt;/span&gt; ES2015(debugApp);

module.exports = transpiledTree;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;debug&lt;/code&gt; plugin as used above will create a folder on disk at &lt;code&gt;DEBUG-my-app-name&lt;/code&gt; in the root of your project with the full contents of the &lt;code&gt;app&lt;/code&gt; tree when it was called. You can review this folder&amp;#39;s contents at your leisure without worrying about the Broccoli server calling cleanup and deleting the directory.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;broccoli-stew&lt;/code&gt; to debug a Broccoli pipeline is absolutely awesome, and makes getting a project using Broccoli much easier.  Thanks to &lt;a href="https://twitter.com/stefanpenner"&gt;@stefanpenner&lt;/a&gt; and &lt;a href="https://twitter.com/chadhietala"&gt;@chadhietala&lt;/a&gt; for pushing things forward!&lt;/p&gt;

&lt;p&gt;If you&amp;#39;d like to checkout and play with the &lt;code&gt;Brocfile.js&lt;/code&gt; above, you can do the normal &lt;code&gt;git clone&lt;/code&gt; and &lt;code&gt;npm install&lt;/code&gt; song and dance with &lt;a href="https://github.com/rwjblue/debugging-broccoli"&gt;https://github.com/rwjblue/debugging-broccoli&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I'm disappointed in React Native</title>
    <link rel="alternate" href="/2015/01/30/why-i-am-disappointed-in-react-native.html"/>
    <id>/2015/01/30/why-i-am-disappointed-in-react-native.html</id>
    <published>2015-01-30T00:00:00Z</published>
    <updated>2015-01-30T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This week at React.js Conf 2015 React Native was introduced. You can see
the two most important videos here:&lt;/p&gt;

&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/KVZ-P-ZI6W4" frameborder="0"
allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/7rDsRXj9-cU" frameborder="0"
allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The TLDR is that Facebook has developed a view layer for React that can
be used within native mobile apps. Within this context React&amp;#39;s templates
can call native components (and views) as if you were referring to normal
HTML elements. Furthermore a JavaScript layer has been introduced to the
native layer that runs the React applications, this means that you can
debug your React Native applications in Chrome Web Tools while it runs
on an iOS device.&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;amazing&lt;/em&gt; technology and I don&amp;#39;t think anyone was expecting
this. As an Ember developer I&amp;#39;m jealous. After some reflection I
realized I was also incredibly disappointed in Facebook for heading in
this direction.&lt;/p&gt;

&lt;h3&gt;We are (supposed to be) all in this together&lt;/h3&gt;

&lt;p&gt;The web development Holy Grail right now is to compete directly with (perhaps
someday replace) native mobile applications. With React Native the web
has lost a huge partner in Facebook for helping make this a reality.
What incentive does Facebook have for pushing forward mobile web now
that they can just produce native applications with web technology? What
incentive do the existing React developers (and the large number of
developers that will move to React in the near future) have for building
and proving out mobile web use-cases with React Native? &lt;strong&gt;None&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;We are getting close&lt;/h3&gt;

&lt;p&gt;This year saw significant improvements in mobile web. We are so close.
Check out this video from Google showing off the potential of mobile
web:&lt;/p&gt;

&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/v0xRTEf-ytE" frameborder="0"
allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;No longer is mobile web a matter of &lt;em&gt;if&lt;/em&gt; but a matter of &lt;em&gt;when&lt;/em&gt;.
However, with Facebook effectively taking themselves out of the
conversation we&amp;#39;ve lost one of the best use-cases and the largest voices
with one of the most popular JavaScript frameworks.&lt;/p&gt;

&lt;p&gt;Mobile web is a point of friction currently, and that friction existing
is good because it will drive people and companies to pursue solutions
to the problem. React Native is a work-around for mobile web. Some will
think of it as a &amp;quot;best of both worlds&amp;quot; and perhaps they are correct. But
the problem of mobile web will continue to exist.&lt;/p&gt;

&lt;h3&gt;Business needs trump ideological ones&lt;/h3&gt;

&lt;p&gt;Of course Facebook should do what is in its own best interest. &lt;a href="http://techcrunch.com/2012/09/11/mark-zuckerberg-our-biggest-mistake-with-mobile-was-betting-too-much-on-html5/"&gt;In 2012
Mark Zuckerberg said that Facebook bet too heavily on
HTML5&lt;/a&gt;.
He was correct then and he is correct now: mobile web feels like shit
when compared to native. The User Experience is the primary concern for
any product company. This, however, should not stop us from persuing
mobile web and pushing the technology forward. I just hope that React
Native doesn&amp;#39;t impede that progress in any way.&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgc" target="_blank" href="http://wickedgoodember.com/">Wicked Good Ember Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--swift" target="_blank" href="http://www.meetup.com/Boston-Swift/">Boston Swift</a><a class="footer__event--uxhh" target="_blank" href="http://www.uxhappyhour.com/bos">UX Happy Hour</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2015/02/12/automating-reefpoints.html"><strong>Automating Reefpoints</strong><h6 class='footer-desc'>We used Travis-CI to automatically publish this blog</h6></a>
<a class="footer__post" href="/2015/02/11/managing-the-conversation.html"><strong>Manage the conversation</strong><h6 class='footer-desc'>Learning to conduct user tests and interviews</h6></a>
<a class="footer__post" href="/2015/02/06/ember-qunit-0-2.html"><strong>Ember QUnit 0.2.x</strong><h6 class='footer-desc'></h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>