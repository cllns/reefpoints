<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-b60edc08.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-07-29T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Project Carpe Diem - "Game Plan"</title>
    <link rel="alternate" href="/2014/07/29/project-carpe-diem.html"/>
    <id>/2014/07/29/project-carpe-diem.html</id>
    <published>2014-07-29T00:00:00Z</published>
    <updated>2014-07-29T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I have been exposed to many different work tracking/planning tools during my time as Project Manager. Early on it was tools like Excel, MS Project, IBM Rational. Later it was Jira, Kanban Boards, GitHub Issue Visualization Tools and physical PostIt Note boards. I would classify the former tools being more aligned with senior management&amp;#39;s desire to be “Well Informed” and the latter being more team centric and aligned with Iterative software development. &lt;/p&gt;

&lt;p&gt;Working with both distributed and co-located teams has challenged me to devise appropriate work tracking strategies for these very different team contexts.  However, one thing has remained the same to this day: I have never worked with a team that has determined they do not want to do any level of work tracking either in a high or low fidelity way regardless of the software development methodology being applied.&lt;/p&gt;

&lt;p&gt;For purposes of this article I will be discussing some of the benefits we have seen in using a physical board with a couple of our co-located DockYard project teams. While I do maintain an appreciation of the big picture plan (aka High-Level Plan),  I have come to embrace a concept that is advocated in the field of Exercise Science - something I have been reading up on lately. I am sure this is not the only field of study citing this approach but wanted to mention this one as top of mind. It is the notion of setting smaller objectives to take one (us) closer to a larger goal. In terms of software development a goal would be synonymous with a product feature. By no means is this a new frontier in development planning, it is simply an application of some already acknowledged concepts.  What I believe is the slight twist is the setting of “Daily” objectives  in addition to full Iteration objectives. Consider this Project Carpe Diem!&lt;/p&gt;

&lt;p&gt;At DockYard we are calling this approach “Game-Plan.” It covers the following four dimensions -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Features&lt;/li&gt;
&lt;li&gt;Time (Days)&lt;/li&gt;
&lt;li&gt;Tasks (Hrs)&lt;/li&gt;
&lt;li&gt;Role on Team&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At DockYard we harnesses the power of the daily standup meeting with low tech multi-colored Post-It Notes on a physical board in the office.  During Iteration planning we discuss the next prioritized feature(s), lay out the relevant sub-features in agreeable sequence, define tasks for those sub-features across all the practice areas on our team. We set an estimation guardrail to have tasks be no smaller than half day’s work and no larger than 2 - 3 days.  We discuss dependencies, hand offs, opportunities to parallelize (Optimize) work across different team members.  We start our iteration and reference the following board where we set/track daily team objectives - &lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/hwZuLsa.jpg" alt="image"&gt;&lt;/p&gt;

&lt;p&gt;At the conclusion of Iteration planning we take these tasks and convert them into GitHub issues aligned with a Milestone (Feature). However, we don’t typically reference GH in our standup meetings but do see this as a very effective means to trace our code to the agreed tasks and enable a logical platform for code review.&lt;/p&gt;

&lt;p&gt;Other fringe benefits we are afforded by our “Game-Plan” on a daily basis include the following- &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clearly show dependencies across the team&lt;/li&gt;
&lt;li&gt;Helps us focus WIP (Work in Progress)&lt;/li&gt;
&lt;li&gt;Allows team to understand implications if a task is taking longer than expected - adjust our plan&lt;/li&gt;
&lt;li&gt;Allows us to suss out blockages that a team member might not reveal on their own &lt;/li&gt;
&lt;li&gt;If a team member has capacity and someone is over capacity they can see where they can help out &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will also note we do maintain visibility into the “High-Level Plan” at all times to ensure we continue to be thoughtful of implications to the overall project objectives.&lt;/p&gt;

&lt;p&gt;So Carpe Diem fellow Project Teams - I’d love to hear if any teams out there are up to something similar or has learnings to share!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>On Selling UX</title>
    <link rel="alternate" href="/2014/07/25/on-selling-ux.html"/>
    <id>/2014/07/25/on-selling-ux.html</id>
    <published>2014-07-25T00:00:00Z</published>
    <updated>2014-07-25T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;The Talk&lt;/h2&gt;

&lt;p&gt;People are talking about the difficulties of selling UX process to their boss, their clients, or their prospective clients. They&amp;#39;re upset that they don&amp;#39;t have the tools to create the caliber of experience others are building and it&amp;#39;s all because a few people aren&amp;#39;t buying into their process. You might have heard it or said it yourself that those in the way &amp;quot;just don&amp;#39;t get UX&amp;quot;. I know I&amp;#39;ve said it.&lt;/p&gt;

&lt;p&gt;From this point of view, we appear to be looking at the problem as a matter of conversion; turning someone who isn&amp;#39;t interested in change of process into someone who&amp;#39;ll embrace it. It&amp;#39;s a hard sell and, if you&amp;#39;ve ever experienced being hung up on while cold calling someone, you&amp;#39;ll know that your chances of failure are much greater than your chance of conversion. But don&amp;#39;t let that scare you.&lt;/p&gt;

&lt;p&gt;Just like the design process itself, there are many ways to approach this problem. Success in your approach is a matter of understanding perspective and - dare I say - empathy for those in the critical path.&lt;/p&gt;

&lt;h2&gt;Definitions&lt;/h2&gt;

&lt;p&gt;We all have a habit of creating definitions in our minds of what other people do from what we hear around the office (or internet) and they&amp;#39;re often pretty far off base. Those definitions become our foundation for what it means to be those other things: a designer, a developer, a product manager, a CEO. Those definitions, baseless or not, are used to judge the value of the things we do.&lt;/p&gt;

&lt;p&gt;An example might be that most people realize they need a software developer to build an application but they may not understand the angles to be considered, the processes for discovering those angles, or the costs involved. It&amp;#39;s easily misunderstood and can be a surprise for those outside of your industry.&lt;/p&gt;

&lt;h2&gt;Shared Values&lt;/h2&gt;

&lt;p&gt;We intend to create a great product and we understand there are many variations in process that could bring it to life. As creators, that process can often be poorly preconceived and unnecessarily limited before we get a hand in it. We have a few options from here to deliver our full value, and selling isn&amp;#39;t one of them.&lt;/p&gt;

&lt;p&gt;Aaron Scott from &lt;a href="http://leap.agency/"&gt;Leap&lt;/a&gt; gave a talk at &lt;a href="http://www.meetup.com/uxboston/events/136304392/"&gt;UX Boston Conf&lt;/a&gt; about doing your best in getting to know those you&amp;#39;re working with to help deliver a winning concept to the client. This approach holds true in more ways than just reaching a final design; it will help you gain the buy-in you need to perform at your full potential.&lt;/p&gt;

&lt;p&gt;The stakeholder may understand what you do, need some experience of your process before understanding, or maybe they&amp;#39;re not ready for it all. You need to know that they&amp;#39;re acting off of their definitions, and it&amp;#39;s not always their fault for having an incomplete picture. Just the same, it is equally important for us to understand them and their needs.&lt;/p&gt;

&lt;p&gt;If they&amp;#39;re not ready, convincing them otherwise will cause anxiety during the project and potentially cause issues of trust with you or future designers if things don&amp;#39;t go well. Use your best judgment and tread lightly.&lt;/p&gt;

&lt;h2&gt;Collaboration&lt;/h2&gt;

&lt;p&gt;When your work is primarily visual it can be especially difficult to get the buy in you need. Most of the stakeholders will have had vision for their entire lives and trust themselves to judge what they feel is good and bad. They have their own tastes, their own definitions of what you do, and their own expectations of the process.&lt;/p&gt;

&lt;p&gt;Our value as designers is best understood when demonstrated and this is your most powerful tool to gain buy in. Make room for them to be part of your design conversation. Problem solve and communicate with them like you might your design team. Let them breath the same air you are and replace your salesmanship with collaboration. Use this method instead of presentations and cold hard salesmanship or politics.&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t believe they&amp;#39;re a good fit to collaborate with your design team, you may wish to pass on their project. Consider them a &amp;quot;client in training&amp;quot;, give them your best advice, and set them free. Of course this isn&amp;#39;t as easy when working in-house, where I would hope that if you&amp;#39;ve come to this conclusion you&amp;#39;d start looking for a more collaborative environment.&lt;/p&gt;

&lt;p&gt;So stop &lt;em&gt;selling&lt;/em&gt; UX. Look around, listen, ask questions, and help the client in training see further before you put a contract in front of them. Your process of gaining an understanding of the product, users, and their context will sell your expertise all on its own. If they&amp;#39;re not ready, which is up to you to decide, set them free.&lt;/p&gt;

&lt;p&gt;They may not always be a returning client, but they will respect you for being honest with them every step of the way - and that&amp;#39;s a lifelong trust.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Making better repeat patterns</title>
    <link rel="alternate" href="/2014/07/23/repeat-patterns.html"/>
    <id>/2014/07/23/repeat-patterns.html</id>
    <published>2014-07-23T00:00:00Z</published>
    <updated>2014-07-23T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I enjoy the look of hand-drawn things. And I use patterns a lot. But when the two are combined, the results are often disappointing. My least favorite thing is to see a pattern where identical copies of a hand drawn object were repeated without variation. The automatic repetition here is not appropriate to the shaky handmade look of the art.&lt;/p&gt;

&lt;p&gt;The effect reminds me of Office circa 1995 (remember the classic marble and granite patterns?) or the obviously tiled walls in video game environments. In a 3D environment, a small size of the tile that causes this obvious tiled look is a necessity to conserve processing power.&lt;/p&gt;

&lt;p&gt;Remember these?
&lt;img src="/images/post-assets/maria/001-bad-textures.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Because I want to use hand drawn repeat patterns in my work, and it would be impractical to draw a thousand individual pieces to create the pattern, I experimented to determine exactly how many pieces I need to preserve the varied look, while being able to tile.&lt;/p&gt;

&lt;p&gt;When I intentionally draw similar objects, I found that 15-30 copies will make a decent repeat pattern. I draw more than I need, then squint and get rid of a few that are too dissimilar. Once pieces are arranged on the pattern, there will always be a few that stick out and attract attention to the “seams” between your pattern tiles. To solve this, I leave only a small amount of variation in both shape and placement, and I repeat a few of the shapes several times in a single tile. This distracts from the “edges” of the tiles because repetition happens on two different rhythms.&lt;/p&gt;

&lt;p&gt;Pattern element 2 is repeated several times within one unit.
&lt;img src="/images/post-assets/maria/002-repeat-pieces.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Trying to get as far away as I can from the obvious square tiled look, I also experimented with other manners of tiling. Adobe Illustrator offers brick (offset), hexagonal and other options, but I eventually need to go back to a rectangular repeating unit because I want to use my pattern in browsers.&lt;/p&gt;

&lt;p&gt;A rectangular repeat unit is used to make hexagonal tiles.
&lt;img src="/images/post-assets/maria/003-repeat-hex.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Here is one of the patterns I ended up making in this non-repeated style.&lt;/p&gt;

&lt;p&gt;One unit of the repeat pattern.
&lt;img src="/images/post-assets/maria/004-trees.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;I used this tree, circled, several times inside one repeating unit.
&lt;img src="/images/post-assets/maria/005-trees.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;The pieces are aligned to the grid, of course, but they are hand drawn so sizes are slightly off. I intentionally spaced them slightly off the grid as well, but preserved the overall balanced appearance (just squint and fix whatever looks off  - very scientific!)
&lt;img src="/images/post-assets/maria/006-trees.png" alt=""&gt;&lt;/p&gt;

&lt;h2&gt;And finally - here are the patterns!&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/post-assets/maria/099-swatches-of-all-patterns.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="/images/downloadables/patterns/pattern-swatches-CS5-and-later.ai"&gt;Download the Illustrator file&lt;/a&gt; and use these patterns in any project. We only ask that you do not resell them. Enjoy!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Facebook Experiment</title>
    <link rel="alternate" href="/2014/07/18/facebook-experimentation.html"/>
    <id>/2014/07/18/facebook-experimentation.html</id>
    <published>2014-07-18T00:00:00Z</published>
    <updated>2014-07-18T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I just read this &lt;a href="https://medium.com/@scottrob/facebooks-going-to-be-ok-but-science-is-taking-a-hit-fd512b250f3e"&gt;thoughtful and refreshing article&lt;/a&gt; about Facebook&amp;#39;s now infamous experiment on a large group of users. It outlines the ethical problems in running an experiment on unwilling participants, and how the scandal that followed damages the reputation of scientific research, which has ethical (not just legal) restrictions. It also reminds us that testing different versions of a product on users is nothing new, and we all seem OK with it as long as it stays in the realm of marketing.&lt;/p&gt;

&lt;p&gt;The outrage over users&amp;#39; emotions being manipulated without consent reminds me of my own feeling of insecurity a few years ago, when personalized ads just started appearing on Facebook (somewhere around 2009?). Suddenly this free service, which I use for talking to friends, is listening in and pushing ads on me. Weird. I wanted to push them back.&lt;/p&gt;

&lt;p&gt;Can I do anything to these algorithms that determine what ads I see? I wanted to experiment with them - to manipulate the ads by intentionally changing my information and posting fake content from my profile. I didn&amp;#39;t keep any screenshots for evidence, so you&amp;#39;ll just have to believe that some of it worked well.&lt;/p&gt;

&lt;p&gt;At the time, I had to use Facebook at work quite a lot. As &amp;quot;the web design person&amp;quot; for a nonprofit organization, I posted to Facebook regularly and kept track of potentially abusive comments on the official page, so I had to be logged in and therefore exposed to the ads at the same time.&lt;/p&gt;

&lt;p&gt;If you are a female - especially a female of an important purchasing age like me - you&amp;#39;ll have many companies fighting for your attention. In your early 20s it&amp;#39;s mostly personal purchases like shoes, clothes and makeup. A few years later, you qualify into the coveted &amp;quot;homemaker&amp;quot; target market. You supposedly start making decisions for a growing family about which groceries, appliances and brand of house paint to get - and companies really want your attention.&lt;/p&gt;

&lt;p&gt;I was getting tired of the keywords and browsing history from my personal life following me around at work with supposedly relevant shopping ads, so I tried to confuse Facebook. &lt;/p&gt;

&lt;p&gt;First I tried posting fake announcements of a tropical vacation and labeling some of my photos with far-away locations, but the ads didn&amp;#39;t change much. I would see the occasional 50% off ad for brand name luggage, but nothing drastic. Many of my Facebook friends were confused, including a few coworkers. (&amp;quot;A three week vacation? What about my report?&amp;quot;)&lt;/p&gt;

&lt;p&gt;Next, I changed my gender to male. I loved the ads that I got in return. Suddenly there were no glitter shoes, no 75% off designer dresses, no engagement rings. Instead I saw &amp;quot;finish your computer science degree&amp;quot;, high quality leather goods, and website hosting ads. I had not changed anything else about my behavior. The same keywords and likes give a girl and a boy version of me a completely different market persona. I enjoyed the boy version a lot more.&lt;/p&gt;

&lt;p&gt;The third thing I changed was location. Facebook seemed to save different location privacy settings on desktop and in the browser, and defaulted back to showing my location once in a while. I was not happy to reveal my exact location with each post. It just seemed too invasive. On top of that, Facebook started mining my friends&amp;#39; location settings to determine mine whether I wanted to reveal it or not. It seemed easier to claim a false location than to keep fighting for it to remain blank. I set my hometown and current location to North Pole, Alaska.&lt;/p&gt;

&lt;p&gt;The ads felt a bit more brawny on top of my previous change to &amp;quot;male&amp;quot;. Some offers of rugged hiking boots (I actually buy hiking boots!) and tactical something or other. On the downside, one real life friend later said she was confused by the  North Pole location.&lt;/p&gt;

&lt;p&gt;Since I tried those interventions, Facebook algorithms have of course advanced, and the simple gender setting change today might not produce a significant change in ads. But it felt rewarding to kick back at the marketing machine, and to sometimes get results. I am a web designer, so I have to be a user of web things as well as a maker. I do not think I will be quitting Facebook this week, or next. But I enjoy running experiments back on it.&lt;/p&gt;

&lt;p&gt;As a user, I was able to influence my ads. As a designer, I remain skeptical of user declared content. For example, if I had access to the kind of data Facebook has on most users, and wanted to target a person of a specific age and gender, I would consider their behavior instead of relying on one setting. I would look to confirm their gender, relationship status and age settings with specific keywords or themes in their posts and things they reacted to. &lt;/p&gt;

&lt;p&gt;We should make sure our products do not break in &amp;quot;weird&amp;quot; cases (for example, when user settings and behavior seemingly contradict each other), and remain aware of the assumptions we make in the design process.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Design as Conversation</title>
    <link rel="alternate" href="/2014/07/18/design-as-conversation.html"/>
    <id>/2014/07/18/design-as-conversation.html</id>
    <published>2014-07-18T00:00:00Z</published>
    <updated>2014-07-18T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Our understanding of design is perpetually in flux. Over the years design has transitioned from print and typography to web design, communication design to interaction design, user experience design to information design and design thinking. The space of design expands to encapsulate all these areas, while simultaneously formalizing specialized methodologies.&lt;/p&gt;

&lt;p&gt;Design is a process; it no longer refers only to static artifacts or visualizations. Design is a craft as much as it is a way of thinking and interacting.&lt;/p&gt;

&lt;p&gt;At DockYard, the design and development teams work closely together in an open dialogue, problem solving and giving real time feedback. Functionality and usability are built to work with one another, and it is this exchange of ideas, the conversation, that allows for the success of this interdisciplinary collaboration. There is no hierarchy of thought; each person brings personal experience and skill that contributes to a richer shared understanding. Many in the design world have begun to formalize this process - identifying these as environments for “innovation”.&lt;/p&gt;

&lt;p&gt;The success of design, however, doesn’t lie in the adherence of these systems. As much as we may reflect on the process of design - it remains a real time activity. Visual design, UI/UX considerations, and software engineering are all skills that come second to the ability for a team to work together. Through conversation, articulation, and modeling, we design the way in which we confront social complexities and wicked problems that exist as a result of differing perspectives. DockYard’s internal process is sensitive to these considerations, but doesn’t attempt to formalize its methodology, as problem solving is unique to each individual circumstance.&lt;/p&gt;

&lt;p&gt;The static, active, and meta states of design exist simultaneously layered within one another. When we invest in understanding one another, we truly embody what it means to design for experience, interaction, perception, emotion, and cognition. To “design the process of design” is simply to be curious, present and engaged in all that we do.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.northeastern.edu/camd/artdesign/people/richard-saul-wurman/"&gt;Richard Wurman’s&lt;/a&gt; explicit philosophy resonates with me a great deal. His approach to life is a demand to embrace a lack of understanding; a mentality that allows you to ask questions, to start at the beginning. It liberates you to say &amp;quot;I don&amp;#39;t know what you mean&amp;quot; or &amp;quot;I don&amp;#39;t know much about that&amp;quot; - something we are unfortunately as a society not encouraged to do - much to the detriment of learning and individual understanding. These fears exist in work environments, classrooms, within relationships - we so often are made to feel inadequate if our understanding doesn&amp;#39;t match another&amp;#39;s (or our own) expectations.&lt;/p&gt;

&lt;p&gt;The collaborative nature of design reacts against these pressures. We each bring unique understanding, but it is our humility, interest in others and in experience, and the value we place in the exchange of ideas that makes design a powerful thing.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Macros for DRY and Testable Code</title>
    <link rel="alternate" href="/2014/06/27/ember-macros-for-DRY-and-testable-code.html"/>
    <id>/2014/06/27/ember-macros-for-DRY-and-testable-code.html</id>
    <published>2014-06-27T00:00:00Z</published>
    <updated>2014-06-27T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h3&gt;Intro&lt;/h3&gt;

&lt;p&gt;This post in going to explore the idea of writing your own Ember macros
as a strategy for DRYing up and creating more modular Ember code. 
As you&amp;#39;ll see, besides the maintainability and flexibility benefits gained by DRYing
up and decoupling code, isolated code is significantly easier to test.
We&amp;#39;ll be using a sample application to illustrate refactoring some code
into a macro.&lt;/p&gt;

&lt;h3&gt;What is a Computed Property Macro?&lt;/h3&gt;

&lt;p&gt;A computed property macro can really be thought of as a function that returns the
definition of a computed property. Essentially, we are creating a function that will
define computed properties for us. They look something like this:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Defining a computed property macro&lt;/span&gt;
&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;greeting&lt;/span&gt;(dependentKey, greeting) {
  &lt;span class="keyword"&gt;return&lt;/span&gt; Ember.computed(dependentKey, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; greeting + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;, &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + dependentKey;
  });
}

&lt;span class="comment"&gt;// Consuming a computed property macro&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; Greeter = Ember.Object.extend({
  &lt;span class="key"&gt;user&lt;/span&gt;: &lt;span class="predefined-constant"&gt;null&lt;/span&gt;,
  &lt;span class="key"&gt;englishGreeting&lt;/span&gt;: greeting(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hello&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;spanishGreeting&lt;/span&gt;: greeting(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hola&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

&lt;span class="keyword"&gt;var&lt;/span&gt; concierge = Greeter.create({ &lt;span class="key"&gt;user&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Narwin&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
concierge.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;englishGreeting&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="comment"&gt;// =&amp;gt; 'Hello, Narwin'&lt;/span&gt;
concierge.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;spanishGreeting&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="comment"&gt;// =&amp;gt; 'Hola, Narwin'&lt;/span&gt;

concierge.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Boomer&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
concierge.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;englishGreeting&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="comment"&gt;// =&amp;gt; 'Hello, Boomer'&lt;/span&gt;
concierge.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;spanishGreeting&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="comment"&gt;// =&amp;gt; 'Hola, Boomer'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So, why not just use a standard computed property? Macros give us the
ability to take common chunks of functionality and share them throughout
our code, allowing us to avoid re-writing the logic every time we need
it. &lt;/p&gt;

&lt;p&gt;Ember provides us with a bunch of useful computed macros
right out of the box. If you&amp;#39;re not familiar with them, you should
definitely &lt;a href="http://emberjs.com/api/#method_computed"&gt;check them out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we&amp;#39;ve covered our bases, lets move on to the sample app.&lt;/p&gt;

&lt;h3&gt;Sample App&lt;/h3&gt;

&lt;p&gt;The goal of our sample application is to track financial transactions
and to provide an overview of income and expenses for a given time frame.
Our app has a &lt;code&gt;Month&lt;/code&gt; model which has many &lt;code&gt;transactions&lt;/code&gt;. A &lt;code&gt;Month&lt;/code&gt; also
has &lt;code&gt;incomeTransactions&lt;/code&gt; (transactions with positive amounts) and
&lt;code&gt;expenseTransactions&lt;/code&gt; (transactions with negative amounts). Below are
tests and code for our &lt;code&gt;Month&lt;/code&gt; and &lt;code&gt;Transaction&lt;/code&gt; models.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/models/month.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; hasMany = DS.hasMany;
&lt;span class="keyword"&gt;var&lt;/span&gt; filter = Ember.computed.filter;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;transactions&lt;/span&gt;: hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="key"&gt;incomeTransactions&lt;/span&gt;: filter(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(transaction) {
      &lt;span class="comment"&gt;// Grab all transactions with a positive amount.&lt;/span&gt;
      &lt;span class="keyword"&gt;return&lt;/span&gt; transaction.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &amp;gt; &lt;span class="integer"&gt;0&lt;/span&gt;;
    }
  ),

  &lt;span class="key"&gt;expenseTransactions&lt;/span&gt;: filter(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(transaction) {
      &lt;span class="comment"&gt;// Grab all transactions with a negative amount.&lt;/span&gt;
      &lt;span class="keyword"&gt;return&lt;/span&gt; transaction.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) &amp;lt; &lt;span class="integer"&gt;0&lt;/span&gt;;
    }
  )
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tests/unit/models/month-test.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; { test, moduleForModel } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; store, month, transactions, tran1, tran2, tran3, tran4;

moduleForModel(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;month&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Unit - Month Model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="key"&gt;needs&lt;/span&gt;: [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;model:transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;],

  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(container) {
    store = container.lookup(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;store:main&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

    month = &lt;span class="local-variable"&gt;this&lt;/span&gt;.subject({
      &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;June&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
    });

    Ember.run(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
      tran1 = store.createRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;100&lt;/span&gt; });
      tran2 = store.createRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;200&lt;/span&gt; });
      tran3 = store.createRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;300&lt;/span&gt; });
      tran4 = store.createRecord(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;400&lt;/span&gt; });

      transactions = [tran1, tran2, tran3, tran4];

      month.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).addObjects(transactions);
    });
  }
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTransactions returns positive transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; results = month.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  deepEqual(results, [tran1, tran2]);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTransactions returns negative transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; results = month.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  deepEqual(results, [tran3, tran4]);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;app/models/transaction.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; attr = DS.attr;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;amount&lt;/span&gt;: attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;number&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The month controller will handle computing the &lt;code&gt;incomeTotal&lt;/code&gt; and
&lt;code&gt;expenseTotal&lt;/code&gt; for the month.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/controllers/month.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; computed = Ember.computed;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.ObjectController.extend({
  &lt;span class="key"&gt;incomeTotal&lt;/span&gt;: computed(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTransactions.[]&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// Get the amount for each transaction in incomeTransactions.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; amounts = &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).mapBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

    &lt;span class="comment"&gt;// Sum the amounts&lt;/span&gt;
    &lt;span class="keyword"&gt;return&lt;/span&gt; amounts.reduce(&lt;span class="keyword"&gt;function&lt;/span&gt;(previousValue, currentValue) {
      &lt;span class="keyword"&gt;return&lt;/span&gt; previousValue += currentValue;
    }, &lt;span class="integer"&gt;0&lt;/span&gt;);
  }),

  &lt;span class="key"&gt;expenseTotal&lt;/span&gt;: computed(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTransactions.[]&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="comment"&gt;// Get the amount for each transaction in expenseTransactions.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; amounts = &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).mapBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

    &lt;span class="comment"&gt;// Sum the amounts&lt;/span&gt;
    &lt;span class="keyword"&gt;return&lt;/span&gt; amounts.reduce(&lt;span class="keyword"&gt;function&lt;/span&gt;(previousValue, currentValue) {
      &lt;span class="keyword"&gt;return&lt;/span&gt; previousValue += currentValue;
    }, &lt;span class="integer"&gt;0&lt;/span&gt;);
  })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tests/unit/controllers/month-test.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
56
57
58
59
&lt;strong&gt;60&lt;/strong&gt;
61
62
63
64
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; { test, moduleFor } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; set = Ember.set;

&lt;span class="keyword"&gt;var&lt;/span&gt; monthController, incomeTransactions, expenseTransactions;

moduleFor(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controller:month&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Unit - Month Controller&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    incomeTransactions = [
      { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;100&lt;/span&gt; },
      { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;200&lt;/span&gt; }
    ];

    expenseTransactions = [
      { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;300&lt;/span&gt; },
      { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;400&lt;/span&gt; }
    ];

    monthController = &lt;span class="local-variable"&gt;this&lt;/span&gt;.subject({
      &lt;span class="key"&gt;incomeTransactions&lt;/span&gt;: incomeTransactions,
      &lt;span class="key"&gt;expenseTransactions&lt;/span&gt;: expenseTransactions
    });
  }
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTotal returns the total of all incomeTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; result = monthController.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTotal&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  equal(result, &lt;span class="integer"&gt;300&lt;/span&gt;);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTotal recomputes when an incomeTransaction is added&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; newTransaction = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;500&lt;/span&gt; };

  monthController.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).addObject(newTransaction);

  &lt;span class="keyword"&gt;var&lt;/span&gt; result = monthController.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTotal&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  equal(result, &lt;span class="integer"&gt;800&lt;/span&gt;);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTotal returns the total of all expenseTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; result = monthController.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTotal&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  equal(result, -&lt;span class="integer"&gt;700&lt;/span&gt;);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTotal recomputes when an expenseTransaction is added&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; newTransaction = { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;600&lt;/span&gt; };

  monthController.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).addObject(newTransaction);

  &lt;span class="keyword"&gt;var&lt;/span&gt; result = monthController.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTotal&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  equal(result, -&lt;span class="integer"&gt;1300&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If your spidey senses are tingling, they should be. There is a lot of
duplication going on in above code. In fact, the only difference between &lt;code&gt;incomeTotal&lt;/code&gt; and
&lt;code&gt;expenseTotal&lt;/code&gt; is which set of transactions they are working with (incomeTransactions
or expenseTransactions). Similarly, the only difference between &lt;code&gt;incomeTransactions&lt;/code&gt; and &lt;code&gt;expenseTransactions&lt;/code&gt;
is whether the amount is a positive or negative number. Let&amp;#39;s write a couple of macros to DRY up this code.&lt;/p&gt;

&lt;h3&gt;Creating custom Ember Macros&lt;/h3&gt;

&lt;p&gt;Both &lt;code&gt;incomeTotal&lt;/code&gt; and &lt;code&gt;expenseTotal&lt;/code&gt; have almost exactly the same
logic. The goal of each is to take an array of objects and return the
sum of a specific property on each object. Let&amp;#39;s create a &lt;code&gt;sumBy&lt;/code&gt; macro
with the goal of being able to write something like: &lt;code&gt;sumBy(&amp;#39;array&amp;#39;, &amp;#39;property&amp;#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/utils/sum-by.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; &lt;span class="keyword"&gt;function&lt;/span&gt;(collection, property) {
  &lt;span class="keyword"&gt;return&lt;/span&gt; Ember.reduceComputed(collection, {
    &lt;span class="key"&gt;initialValue&lt;/span&gt;: &lt;span class="float"&gt;0.0&lt;/span&gt;,

    &lt;span class="function"&gt;addedItem&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(accumulatedValue, item){
      &lt;span class="keyword"&gt;return&lt;/span&gt; accumulatedValue + Ember.get(item, property);
    },

    &lt;span class="function"&gt;removedItem&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(accumulatedValue, item){
      &lt;span class="keyword"&gt;return&lt;/span&gt; accumulatedValue - Ember.get(item, property);
    }
  });
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tests/utils/sum-by.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; { test } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; sumBy from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;../../../utils/sum-by&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; set = Ember.set;

&lt;span class="keyword"&gt;var&lt;/span&gt; bankAccount, transactions, tran1, tran2, tran3, tran4;

module(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Unit - SumBy&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    tran1 = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt; };
    tran2 = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt; };
    tran3 = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt; };
    tran4 = { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;4&lt;/span&gt; };

    transactions = [tran1, tran2, tran3, tran4];

    bankAccount = Ember.Object.extend({
      &lt;span class="key"&gt;transactions&lt;/span&gt;: transactions,
      &lt;span class="key"&gt;totalAmount&lt;/span&gt;: sumBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
    }).create();
  }
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;returns the sum of property for all objects in collection&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; actual = bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;totalAmount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  deepEqual(actual, &lt;span class="integer"&gt;2&lt;/span&gt;);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;recomputes when a new object is added to the collection&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;2&lt;/span&gt;);
  deepEqual(bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;totalAmount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;), &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;precondition&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  &lt;span class="keyword"&gt;var&lt;/span&gt; newTrans = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;10&lt;/span&gt; };

  bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).addObject(newTrans);

  &lt;span class="keyword"&gt;var&lt;/span&gt; actual = bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;totalAmount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

  deepEqual(actual, &lt;span class="integer"&gt;12&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;incomeTransactions&lt;/code&gt; and &lt;code&gt;expenseTransactions&lt;/code&gt; could also use some
DRYing up. The only difference between the two is whether they are
filtering by positive of negative numbers. Let&amp;#39;s write a &lt;code&gt;filterBySign&lt;/code&gt;
macro with the goal of being able to write something like: 
&lt;code&gt;filterBySign(&amp;#39;array&amp;#39;, &amp;#39;property&amp;#39;, &amp;#39;+&amp;#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/utils/filter-by-sign.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; get = Ember.get;
&lt;span class="keyword"&gt;var&lt;/span&gt; filter = Ember.computed.filter;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; &lt;span class="keyword"&gt;function&lt;/span&gt;(collection, property, sign) {
  &lt;span class="keyword"&gt;return&lt;/span&gt; filter(collection, &lt;span class="keyword"&gt;function&lt;/span&gt;(object) {
    &lt;span class="keyword"&gt;return&lt;/span&gt; (sign + &lt;span class="integer"&gt;1&lt;/span&gt;) * get(object, property) &amp;gt; &lt;span class="integer"&gt;0&lt;/span&gt;;
  });
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tests/unit/utils/filter-by-sign-test.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; { test } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-qunit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;import&lt;/span&gt; filterBySign from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;../../../utils/filter-by-sign&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; bankAccount, transactions, tran1, tran2, tran3, tran4;

module(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Unit - filterBySign&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
  &lt;span class="function"&gt;setup&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    tran1 = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt; };
    tran2 = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt; };
    tran3 = { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;3&lt;/span&gt; };
    tran4 = { &lt;span class="key"&gt;amount&lt;/span&gt;: -&lt;span class="integer"&gt;4&lt;/span&gt; };

    transactions = [tran1, tran2, tran3, tran4];

    bankAccount = Ember.Object.extend({
      &lt;span class="key"&gt;transactions&lt;/span&gt;: transactions,
      &lt;span class="key"&gt;positiveTransactions&lt;/span&gt;: filterBySign(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;+&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
      &lt;span class="key"&gt;negativeTransactions&lt;/span&gt;: filterBySign(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;-&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
    }).create();
  }
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;'+' returns all objects with positive property values&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; actual = bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;positiveTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; expected = [tran1, tran2];

  deepEqual(actual, expected);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;'-' returns all objects with negative property values&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;1&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; actual = bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;negativeTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; expected = [tran3, tran4];

  deepEqual(actual, expected);
});

test(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;recomputes when a new object is added to the dependent array&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
&lt;span class="keyword"&gt;function&lt;/span&gt;() {
  expect(&lt;span class="integer"&gt;2&lt;/span&gt;);
  deepEqual(bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;positiveTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;), [tran1, tran2]);

  &lt;span class="keyword"&gt;var&lt;/span&gt; newTrans = { &lt;span class="key"&gt;amount&lt;/span&gt;: &lt;span class="integer"&gt;1000&lt;/span&gt; };
  bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).addObject(newTrans);

  &lt;span class="keyword"&gt;var&lt;/span&gt; actual = bankAccount.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;positiveTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  &lt;span class="keyword"&gt;var&lt;/span&gt; expected = [tran1, tran2, newTrans];

  deepEqual(actual, expected);
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When reading through the tests for &lt;code&gt;filterBySign&lt;/code&gt;, note how much easier the setup is compared
to our original tests for the same functionality on the &lt;code&gt;Month&lt;/code&gt; model. Because
we&amp;#39;re testing the code in isolation, we&amp;#39;re able to use POJOs
and arrays to test our code. This allows us to avoid having to work
around the &lt;code&gt;Month&lt;/code&gt; model&amp;#39;s relationships, creating records with the
store and wrapping our setup code in an &lt;code&gt;Ember.run&lt;/code&gt; to handle async
behavior. Much nicer!&lt;/p&gt;

&lt;h3&gt;Refactoring the Month Model and Controller&lt;/h3&gt;

&lt;p&gt;We can now refactor our month model and controller to use our new
macros.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/model/month.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; filterBySign from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;../utils/filter-by-sign&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="keyword"&gt;var&lt;/span&gt; hasMany = DS.hasMany;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; DS.Model.extend({
  &lt;span class="key"&gt;transactions&lt;/span&gt;: hasMany(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transaction&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),

  &lt;span class="key"&gt;incomeTransactions&lt;/span&gt;: filterBySign(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;+&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;expenseTransactions&lt;/span&gt;: filterBySign(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;transactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;-&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;app/controllers/month.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; sumBy from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;../utils/sum-by&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.ObjectController.extend({
  &lt;span class="key"&gt;incomeTotal&lt;/span&gt;: sumBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;incomeTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
  &lt;span class="key"&gt;expenseTotal&lt;/span&gt;: sumBy(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;expenseTransactions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;amount&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The refactored model and controller are nice and concise while still
maintaining their readability. We can now delete our old unit tests on
our &lt;code&gt;Month&lt;/code&gt; model and controller as they now overlap with our macro tests.
The net result is trimming down the code we have to maintain by about
half.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re thinking about writing a macro or just want to see what other macros
are out there, check out &lt;a href="https://github.com/jamesarosen/ember-cpm"&gt;ember-cpm&lt;/a&gt;. 
It&amp;#39;s a library of non-core macros that you can plug in to you Ember app.
If you can&amp;#39;t find what you&amp;#39;re looking for there, take a shot at writing
your own macro and send in a pull request to share it with the
community!&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgc" target="_blank" href="http://wickedgoodember.com/">Wicked Good Ember Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--swift" target="_blank" href="http://www.meetup.com/Boston-Swift/">Boston Swift</a><a class="footer__event--uxhh" target="_blank" href="http://www.uxhappyhour.com/bos">UX Happy Hour</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2014/07/29/project-carpe-diem.html"><strong>Project Carpe Diem - "Game Plan"</strong><h6 class='footer-desc'></h6></a>
<a class="footer__post" href="/2014/07/25/on-selling-ux.html"><strong>On Selling UX</strong><h6 class='footer-desc'>Getting what you want out of your design process.</h6></a>
<a class="footer__post" href="/2014/07/23/repeat-patterns.html"><strong>Making better repeat patterns</strong><h6 class='footer-desc'>My favorite technique to avoid the obvious tiled look.</h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>