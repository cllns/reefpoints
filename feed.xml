<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-56b30196.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/scratch" class="work-nav-item"><strong class='work-nav-item__title'>Scratch Wireless</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/scratch" class="work-nav-item"><strong class='work-nav-item__title'>Scratch Wireless</strong><p>Never pay another penny for smartphone service.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-03-24T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Rubyists Guide to Ember.js Dependencies</title>
    <link rel="alternate" href="/2015/03/24/rubyists-guide-to-ember-dependencies.html"/>
    <id>/2015/03/24/rubyists-guide-to-ember-dependencies.html</id>
    <published>2015-03-24T00:00:00Z</published>
    <updated>2015-03-24T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;One of the early hurdles a Ruby developer faces when working on an Ember.js application is dependency management. A popular mechanism for managing a Ruby application’s dependencies is the &lt;a href="http://bundler.io/gemfile.html"&gt;Gemfile&lt;/a&gt; provided by &lt;a href="http://bundler.io/"&gt;Bundler&lt;/a&gt;. Including a library is as easy as declaring it in the Gemfile and running &lt;code&gt;bundle install&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# Gemfile&lt;/span&gt;
source &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;https://rubygems.org&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;rails&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;~&amp;gt; 4.2.0&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For better or worse, there is no dominant, single package manager in JavaScript. Ember applications, and more specifically, those running &lt;a href="http://www.ember-cli.com/"&gt;Ember-CLI&lt;/a&gt;, rely on two package managers: &lt;a href="http://bower.io/"&gt;Bower&lt;/a&gt; for client-side libraries and &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; for server-side libraries.&lt;/p&gt;

&lt;p&gt;In this post, I&amp;#39;ll provide a basic dependency management primer for
those moving from Ruby to JavaScript.&lt;/p&gt;

&lt;h1&gt;npm&lt;/h1&gt;

&lt;p&gt;Ember-CLI uses npm to manage internal dependencies. npm resembles RubyGems, in so far as it allows you to install and manage third-party libraries, which in this case, are Node.js programs.&lt;/p&gt;

&lt;h2&gt;package.json&lt;/h2&gt;

&lt;p&gt;Libraries for npm are referred to as “packages.” Each package has a &lt;code&gt;package.json&lt;/code&gt; file which lists the dependencies of the library itself. In this regard, the &lt;code&gt;package.json&lt;/code&gt; is analogous to a RubyGem’s &lt;code&gt;gemspec&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;.npmrc&lt;/h2&gt;

&lt;p&gt;You can configure how node packages get installed via the
&lt;a href="https://docs.npmjs.com/files/npmrc"&gt;.npmrc file&lt;/a&gt;. You may have one
globally, per user (&lt;code&gt;~/.npmrc&lt;/code&gt;), or per project.&lt;/p&gt;

&lt;h2&gt;Installing dependencies&lt;/h2&gt;

&lt;p&gt;To install an npm package, run &lt;code&gt;npm install [package-name]&lt;/code&gt; from the
command line.&lt;/p&gt;

&lt;p&gt;This will either install the library and it&amp;#39;s dependencies
into your current working directory or in one of its parent directories. Here&amp;#39;s how it works: if there is a &lt;code&gt;node_modules/&lt;/code&gt; or &lt;code&gt;package.json&lt;/code&gt; in any directory above the current working directory, packages will be installed into that directory. Otherwise, calling &lt;code&gt;npm install [package-name]&lt;/code&gt; creates a &lt;code&gt;node_modules/&lt;/code&gt; directory in your current working directory and installs the packages there.&lt;/p&gt;

&lt;p&gt;This is a slightly different mental model for Rubyists who are not used to installing gems on a per project basis; gems are generally installed into version-specific Ruby directories with the more popular version managers like &lt;a href="https://github.com/sstephenson/rbenv"&gt;rbenv&lt;/a&gt; or &lt;a href="https://rvm.io/"&gt;RVM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s also possible to install packages globally using the &lt;code&gt;--global&lt;/code&gt; flag when installing. This installs the package in your &lt;code&gt;usr/local/lib/&lt;/code&gt; directory by default. These packages typically contain executable files and are used via the command line (such as Ember-CLI).&lt;/p&gt;

&lt;p&gt;Your dependencies will likely have dependencies. These get installed within a &lt;code&gt;node_modules/&lt;/code&gt; directory in the given package. It&amp;#39;s a little strange the first time you navigate into a &lt;code&gt;node_modules/package-name/&lt;/code&gt; only to find another &lt;code&gt;node_modules/&lt;/code&gt; directory, but that&amp;#39;s what that is. You’ll notice a &lt;code&gt;node_modules/&lt;/code&gt; directory for dependencies of global packages as well if you look in the &lt;code&gt;usr/local/lib/&lt;/code&gt; directory where global packages live.&lt;/p&gt;

&lt;p&gt;One last thing to note regarding npm installations: npm caches the
libraries you pull down to prevent you from having to download
libraries that are already on your system. You&amp;#39;ll find that cache:
&lt;code&gt;~/.npm/&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;Bower&lt;/h1&gt;

&lt;p&gt;While you&amp;#39;ll use npm to manage your server-side Node.js dependencies, you’ll use Bower for managing front-end assets, such as JavaScript, HTML, CSS, image, and font files.&lt;/p&gt;

&lt;h2&gt;.bowerrc&lt;/h2&gt;

&lt;p&gt;Bower itself is an npm package. Its libraries are referred to as “components” and the end user can configure their installations via a &lt;code&gt;.bowerrc&lt;/code&gt; file. This file specifies where dependent components will be installed, the URL where the component will be registered (its registry), and the JSON file used to define the component (&lt;code&gt;bower.json&lt;/code&gt; by default) among other things.&lt;/p&gt;

&lt;h2&gt;bower.json&lt;/h2&gt;

&lt;p&gt;The &lt;a href="http://bower.io/docs/creating-packages/#bowerjson"&gt;&lt;code&gt;bower.json&lt;/code&gt;&lt;/a&gt; file resembles the &lt;a href="http://guides.rubygems.org/specification-reference/"&gt;gemspec&lt;/a&gt; file you find in Ruby gems. It contains the library metadata, such as the name, version, dependencies, and development dependencies for the library.&lt;/p&gt;

&lt;p&gt;As we mentioned, components can be searched for via registries. The registry matches the name of a component with the endpoint at which it’s hosted. &lt;a href="http://bower.io/search/"&gt;Bower.io/search&lt;/a&gt; closely resembles &lt;a href="https://rubygems.org/gems"&gt;rubygems.org&lt;/a&gt; in this way.&lt;/p&gt;

&lt;h2&gt;Installing dependencies&lt;/h2&gt;

&lt;p&gt;When you install a Bower component via &lt;code&gt;bower install [component_name]&lt;/code&gt;, the repository will be cached locally to expedite any future installations of the component. In case you’re curious, the bower cache location is: &lt;code&gt;~/.cache/bower/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unlike npm, Bower components are installed &amp;quot;flat&amp;quot; as opposed to in a hierarchical manner; all of your project&amp;#39;s components (and their dependencies) will be installed into &lt;code&gt;bower_components/&lt;/code&gt; directory, by default. For example, if one of your components is dependent on the &lt;code&gt;underscore.js&lt;/code&gt; library, both will sit side-by-side in the &lt;code&gt;bower_components/&lt;/code&gt; directory (remember, with npm, dependencies of dependencies are continually nested in their parent&amp;#39;s directory within a &lt;code&gt;node_modules/&lt;/code&gt; directory).&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Here&amp;#39;s a quick wrap-up of the analogous files between Ruby and the JS
package managers we discussed:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Ruby&lt;/th&gt;
&lt;th&gt;JS (npm, server-side)&lt;/th&gt;
&lt;th&gt;JS (Bower, client-side)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Term for external library&lt;/td&gt;
&lt;td&gt;&amp;quot;Gem&amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;Package&amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;Component&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;End-user configuration file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gemrc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.npmrc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.bowerrc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Per-library configuration file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*.gemspec&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bower.json&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cache directory&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/.gem/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/.npm/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/.cache/bower/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;As ES2015 (formerly known as &amp;quot;ES6&amp;quot;) becomes more prevalent and JavaScript code becomes more
modular and better for passing around, dependency management grows in
importance. Hopefully this quick primer will clear up some
confusion Rubysists have as they transition from working with the
Gemfile to working with the package managers JavaScript offers.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Beginner’s mentality</title>
    <link rel="alternate" href="/2015/03/23/beginner-mentality.html"/>
    <id>/2015/03/23/beginner-mentality.html</id>
    <published>2015-03-23T00:00:00Z</published>
    <updated>2015-03-23T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;When making any product, the experts are clearly the best people for the job. But experts have one significant blind spot - their extensive knowledge of the system makes them less likely to see the potential problems a novice would encounter. Anyone who is very familiar with a system, a discipline, or a product has put some distance between them and their beginning level challenges that cause them to develop an &lt;a href="http://c4ed.lib.kmutt.ac.th/sites/default/files/HowLearningWorks-Ambrose.pdf"&gt;expert blind spot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am sure you are familiar with this situation: you’re invited (or invite yourself) to an event at a university campus. You arrive a bit earlier than you needed, so you can orient yourself in the unfamiliar space. The map on your phone is only accurate to the nearest block, so you get a campus map and try to find room 41-B in the Humanities building named after someone important. You feel stupid.&lt;/p&gt;

&lt;p&gt;This is what campus maps often look like:
&lt;img src="http://imgur.com/Aulbb3t.jpg" alt="An old map showing a campus as an island surrounded by unknown waters"&gt;&lt;/p&gt;

&lt;p&gt;The reason most outsiders find campus maps confusing and difficult to use is the shift in the frame of reference. &lt;/p&gt;

&lt;p&gt;For someone who lives or works on campus, the frame of reference is relative to the borders and shape of the universe that is the university (or corporate, or hospital) campus. They might consider their office to be “in the far North corner” relative to the outline of the campus on a map. Or, they might think of themselves as “right in the middle of the Art Department”. The Art Department here is amorphous: it’s something that may either span two city blocks, or half of a floor in a physical building.&lt;/p&gt;

&lt;p&gt;For an outsider, the frame of reference is still the surrounding landscape. They may not know precisely when they entered the school campus (there is no painted border on the ground) or that they are in its top left corner. The “you are here” marker on the campus map helps, but it still takes a while to adjust to the landmarks differentiated by department, not by road or city block. To find a building, they are forced to adapt to a new system of coordinates. &lt;/p&gt;

&lt;h2&gt;Work with an outsider&lt;/h2&gt;

&lt;p&gt;I often see this situation reflected in the websites of large institutions. When someone very close to an institution thinks of how their web presence may be organized or used, they inevitably do so with the influence of all the expertise they have. They can’t help it - they “live” inside the campus, and they are good at what they do.&lt;/p&gt;

&lt;p&gt;There are many examples of this kind of insider thinking: organizing content by internal structure (instead of user need), breaking up a university website into Athletics, Academics, and Arts (which one contains the event I want to attend?) or assuming that a typical user has even a basic understanding of specialized terminology and concepts.&lt;/p&gt;

&lt;p&gt;This is by no means a treaty against specialized knowledge and perspective. The insider knowledge of an industry expert makes a product good, their know-how makes it work. But the outside perspective of a novice-expert truly helps make a product findable and usable.&lt;/p&gt;

&lt;p&gt;To attract new customers or visitors, a product needs to make sense to someone unfamiliar with it in their own broader frame of reference. To ask the right questions, to establish user goals and needs, and to judge the effectiveness and clarity of a product, we need both the insider and the outsider perspective.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Tips for writing Ember Addons</title>
    <link rel="alternate" href="/2015/03/22/tips-for-writing-ember-addons.html"/>
    <id>/2015/03/22/tips-for-writing-ember-addons.html</id>
    <published>2015-03-22T00:00:00Z</published>
    <updated>2015-03-22T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;After having published many Ember addons I have started to develop my
own sense of &amp;quot;Best Practices&amp;quot; and I&amp;#39;d like to share those with you:&lt;/p&gt;

&lt;h2&gt;1. Keep it minimal, don&amp;#39;t include stylesheets&lt;/h2&gt;

&lt;p&gt;I see quite a few addons out there that include their own look &amp;amp; feel by
including sytlesheets. I actually think this is a bad idea. &lt;em&gt;Keep in
mind, every line of code you put into your addon will end up in the
final footprint of the apps consuming it&lt;/em&gt;. This means if you are
including stylesheets those will end up in &lt;code&gt;vendor.css&lt;/code&gt;. The odds are
that whatever styles you decide look good, someone else might not.
They&amp;#39;ll waste even more space by including their own overrides. This is
wasteful.&lt;/p&gt;

&lt;p&gt;Instead, you should &lt;em&gt;keep it minimal&lt;/em&gt;. See
&lt;a href="https://github.com/dockyard/ember-admin"&gt;ember-admin&lt;/a&gt;. I intentionally
did not style the addon so it is left as minimal as possible. If you
want to show off a styled version of the addon, you can either include
styles in the dummy app&amp;#39;s styles for the addon&amp;#39;s test dummy. Allow
people to run the addon&amp;#39;s server locally and view what could be. Or, you
can include an addon wrapper library that depends upon your addon. This
wrapper can include default styles that consumers may choose not to
alter. For example,
&lt;a href="https://github.com/dockyard/ember-admin-bootstrap"&gt;ember-admin-bootstrap&lt;/a&gt;
styles ember-admin with Twitter Bootstrap. If this is good enough for
you then you just install this library and it pulls in ember-admin but
gives you some nice styling that you don&amp;#39;t have to spend time doing.&lt;/p&gt;

&lt;h2&gt;2. Allow for overrides&lt;/h2&gt;

&lt;p&gt;I believe strongly in composable addons. A consumer should have the
ability to easily extend your addon to do whatever they want. This means
organizing your code a certain way. To provide this you should put all
of your business logic into &lt;code&gt;addon/&lt;/code&gt; and then include wrapper classes in
&lt;code&gt;app/&lt;/code&gt; that just &lt;code&gt;import&lt;/code&gt; then &lt;code&gt;export&lt;/code&gt; the extended class. For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// addon/components/foo-bar.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; Ember from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Component.extend({
  &lt;span class="comment"&gt;// business logic&lt;/span&gt;
});

&lt;span class="comment"&gt;// app/components/foo-bar.js&lt;/span&gt;
&lt;span class="reserved"&gt;import&lt;/span&gt; FooBar from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;my-addon/components/foo-bar&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; FooBar;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;These light wrapper classes &lt;strong&gt;should not&lt;/strong&gt; include any business logic.
Again, they simply &lt;code&gt;import&lt;/code&gt; then &lt;code&gt;export&lt;/code&gt; the extended class. This gives
consumers the option of overriding this in their own
&lt;code&gt;app/components/foo-bar.js&lt;/code&gt; file to extend and add customization.&lt;/p&gt;

&lt;h2&gt;3. Turn off Prototype Extensions&lt;/h2&gt;

&lt;p&gt;Currently ember-cli will not generate an addon project with Prototype
Extensions turn off. However, &lt;a href="https://github.com/ember-cli/ember-cli/issues/3443"&gt;I have requested this be the
default&lt;/a&gt;. Turning
off Prototype Extensions will cause the following syntax to fail in
your addon&amp;#39;s test suite:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="function"&gt;foo&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="comment"&gt;// whatever&lt;/span&gt;
}.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bar&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There are several syntax shortcuts that Ember injects into the base
Types. Arrays have quite a bit. Turning off Prototype Extensions will
force you to write the above code as:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;foo: Ember.computed(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bar&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="comment"&gt;// whatever&lt;/span&gt;
})
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And this will play nice with consumer applications that must run with
the Prototype Extensions turned off.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/emberjs/ember.js/issues/10590"&gt;It should be noted that Ember 1.10 has a bug where turning off Prototype
Extensions causes Ember itself to
fail&lt;/a&gt;. This should be
fixed in 1.11.&lt;/p&gt;

&lt;p&gt;Avoiding Prototype Extensions can be difficult. I plan on writing a
future blog post to outline certain strategies to duplicate the behavior
that you miss out on without Prototype Extensions.&lt;/p&gt;

&lt;p&gt;To turn off Prototype Extensions you&amp;#39;ll need to add the line to
&lt;code&gt;tests/dummy/config/environment.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  EmberENV: {
    &lt;span class="key"&gt;EXTEND_PROTOTYPES&lt;/span&gt;: &lt;span class="predefined-constant"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;See
&lt;a href="https://github.com/dockyard/ember-validations/blob/master/tests/dummy/config/environment.js#L10"&gt;ember-validations&lt;/a&gt;
for an example of this in use.&lt;/p&gt;

&lt;h2&gt;4. Test your addon&lt;/h2&gt;

&lt;p&gt;This one should go without saying but I have seen &lt;em&gt;way&lt;/em&gt; too many addons
out there that are untested (the generated tests don&amp;#39;t count). Please
keep in mind that there are people building products that might consume
your work. Untested code is just one more thing that could go wrong in
someone&amp;#39;s app. If unit testing the code is too difficult, at the very
least write integration tests against the dummy application to ensure
the happy paths.&lt;/p&gt;

&lt;h2&gt;5. Depend on other addons&lt;/h2&gt;

&lt;p&gt;You may not know this but addons can depend upon addons. Rather than
recreating behavior per-addon it would be best to extract out common
behavior to its own dependency. For example,
&lt;a href="https://github.com/dockyard/ember-data-route"&gt;ember-data-route&lt;/a&gt; and
&lt;a href="https://github.com/dockyard/ember-cli-async-button"&gt;ember-cli-async-button&lt;/a&gt;
are both being used in
&lt;a href="https://github.com/dockyard/ember-admin/blob/master/package.json#L21-L23"&gt;ember-admin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To use an addon as a dependency it &lt;em&gt;must&lt;/em&gt; be put into the &lt;code&gt;dependencies&lt;/code&gt;
object in &lt;code&gt;package.json&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;devDependencies&lt;/code&gt;. You may need to
add this keyword to your &lt;code&gt;package.json&lt;/code&gt; as it is not part of the
auto-generated file.&lt;/p&gt;

&lt;p&gt;Ember&amp;#39;s addon eco-system is getting better every day, and as a community
we are learning as we grow how best to build and maintain addons. I&amp;#39;m
hoping you find these tips helpful. Please feel free to share your own
in the comments below. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Lean Project</title>
    <link rel="alternate" href="/2015/03/19/lean-project-management.html"/>
    <id>/2015/03/19/lean-project-management.html</id>
    <published>2015-03-19T00:00:00Z</published>
    <updated>2015-03-19T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I am a firm believer in Lean processes aimed to maximize value while minimizing waste. When it comes to running projects in a Lean way, this goes far beyond the role of the Project Manager (or Scrum-master) thus requiring the right recipe of team, process, communication, work environment and pride. Often I am asked what are the typical practices I apply to projects which fall in the mobile/desktop application development context- this is my attempt to answer the question.  &lt;strong&gt;Important disclaimer&lt;/strong&gt; - this is not a prescription for how to run a project, nor does it guarantee success. The secret sauce is always the people NOT the process. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Raw Materials&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If any of these seem unreasonable, you need to take a hard look at your team and work environment. Any concessions made here will reduce team effectiveness.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A team well-balanced in terms of seniority - Experience is contagious!&lt;/li&gt;
&lt;li&gt;Dedicated team members - not split across multiple projects&lt;/li&gt;
&lt;li&gt;Co-located team members&lt;/li&gt;
&lt;li&gt;Smaller teams (no more than 5-7) —  Once you breach this team size communication complexity increases exponentially.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Conduct retrospectives with full participation - Always seek to get better&lt;/li&gt;
&lt;li&gt;A knowledge management strategy ensures team members know where to store/post directional artifacts that other team members require to do their job (e.g. Wireframes, PSDs, Test Cases, Context Diagrams )&lt;/li&gt;
&lt;li&gt;Use of Information Radiators — Physical views into plans (e.g. Post-Its on a whiteboards) that may supplement a digital plan view&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1) Breakdown the work&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Decomposition of capabilities/features is a necessary and somewhat painful evil.  However, you do not need to go to a painful level of detail to create this artifact.  The importance is breadth not necessarily depth.  The depth only needs to go as far as necessary for the team to directionally understand where a feature needs to go. If a team member is able to provide some form of time estimate (best and worst case) for one of those lower level items, you&amp;#39;re low level enough. If estimates are coming out to less than 1 day you have likely gone too far.  Get the full team involved, apply the 80/20 rule in terms of completeness and time-box the activity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Define a Path&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you have step 1 in place, work with the team to derive a chronological execution of the work driven by perceived value and/or risk/complexity of a given feature.  Front loading your risk/complexity (as long as it is somewhat high value) is a very acceptable and smart approach because impact of course correction early on is much less invasive than the alternative.   Ensure a basic architecture for the overall solution is derived and communicated. This ensures that the team has a solid foundation to build upon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Respect the &lt;a href="http://en.wikipedia.org/wiki/Project_management_triangle"&gt;Pyramid of constraint&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Scope, Time and Cost —  Fundamental variables applicable to any project context.  Visibility and active monitoring of these variables is essential to ensure project success.  First and foremost, ensure that a baseline is established for each of these variables before a team even start the project. Understand how your stakeholders rate the relative importance of each of these variables and uphold the &amp;quot;Rule&amp;quot; that trade-offs are the only way these baselines can/will adjust.   Deferring this activity to after a project gets going can result in scope creep and cost/time over runs.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Hold up the mirror&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a PM, it’s your responsibility to hold up a mirror in front of your team that shows the good, the bad, and the ugly.  This allows the team to maintain appreciation for the big picture while they do their best to work through the small one.   I am huge advocate of a plan view that I have written about in the past (&lt;a href="http://reefpoints.dockyard.com/2014/07/29/project-carpe-diem.html"&gt;High and Mid-Level Plans&lt;/a&gt;) — which shows time, features, tasks, distribution of work across team capability areas (Design, Backend, UXD, etc.), progress made, unplanned work and deferred work that will come in later releases.  If you have this and revisit it often, consider your team informed and that those Triangle of Constraint variables are being monitored (for the most part.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) Create an environment of ownership and accountability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Everyone is a player. PM’s should be servant leaders, therefore any plan created needs to be the team&amp;#39;s plan not the PM’s (or Sr. Mgmt.)  This way the team has accountability and ownership rights over whatever happens to the plan.  If something is not going as planned the team can understand the implications of this and course correct and work to reveal why something may not be working out.  Constant readjustment and calibration is required to keep things moving along. The project manager helps ensure these conversations happen.&lt;/p&gt;

&lt;p&gt;No team member can slip into the shadows. To be successful every contributor needs to have a voice.  A PM needs to put their “Facilitation” hats on and ensure they proactively encourage all to participate and chime in on team affairs. That’s the beauty of teams. They succeed together, not as individuals. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) Demonstrate Progress&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Demos encourage quality, because no one wants to demo something that works and looks subpar. Stakeholders  can rest assured they did not buy snake oil and value is being delivered in some regular interval.  Demonstrations affirm you&amp;#39;re heading in the right direction.  Last but not least, demos allow the team to celebrate success in short bursts - It feels great to get something done especially when the road ahead is a long one!&lt;/p&gt;

&lt;p&gt;Give it a go and let me know if this works for your team.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Doldrums of Consulting</title>
    <link rel="alternate" href="/2015/03/18/the-doldrums-of-consulting.html"/>
    <id>/2015/03/18/the-doldrums-of-consulting.html</id>
    <published>2015-03-18T00:00:00Z</published>
    <updated>2015-03-18T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="http://i.imgur.com/X6DGygm.jpg" alt="http://i.imgur.com/X6DGygm.jpg"&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Doldrums&lt;/em&gt; is a sailing term. It means when you&amp;#39;re stuck on the
water with no wind. Your only option is to wait for the wind to pick up
so you can continue on your way.&lt;/p&gt;

&lt;p&gt;DockYard is currently in the doldrums.&lt;/p&gt;

&lt;p&gt;Maybe this isn&amp;#39;t something that a consultancy should publicly admit,
but we&amp;#39;ve seen client engagement significantly dry up for us in the past
month and a half. Where we were selling and turning clients away a few
months ago, we are struggling to close a single deal right now. This is
the ebb and flow of consulting, it happens. Our only option is to wait
for the wind to pick up so we can continue on our way.&lt;/p&gt;

&lt;p&gt;I was speaking with a few other software (Ember) consultancies recently
and they voiced similar stories. I am not certain why Ember has seen
such a steep drop off in interest. One theory is that Ember is currently
in the &lt;em&gt;Trough of Sorrow&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/hkzpuBa.png" alt="http://i.imgur.com/hkzpuBa.png"&gt;&lt;/p&gt;

&lt;p&gt;Does a framework follow similar trends to a startup? Perhaps. In any
event, we&amp;#39;re now trying to diversify our offerings. I announced last
week that DockYard is now offering Staff Augmentation services. This has
piqued some interest but we&amp;#39;re seeing a lot of inquiries for starting a
few months from now.&lt;/p&gt;

&lt;p&gt;It is funny because I know in a month or two we&amp;#39;ll be fine. We just have
to survive the thin times, which is always stressful. How we weather
this will speak a lot about DockYard as a company. It is said the only
way to survive the &lt;em&gt;Trough of Sorrow&lt;/em&gt; is going to be company culture. If
this is true then I&amp;#39;m quite confident in us.&lt;/p&gt;

&lt;p&gt;I also realize that we&amp;#39;re towards the end of a financial quarter.
Companies tend to reach out after the start of a quarter, but if I were
them I wouldn&amp;#39;t wait. If companies were to &lt;a href="http://dockyard.com/contact"&gt;contact
us&lt;/a&gt; now they would find us in a position that
would be easy to negotiate with.&lt;/p&gt;

&lt;p&gt;I&amp;#39;d be interested in hearing from other shops: have you experienced The
Doldrums? What pulled you through? What strategies have you put in place
to avoid them in the future?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Thriving in a New Work Environment</title>
    <link rel="alternate" href="/2015/03/16/thriving-in-a-new-work-environment.html"/>
    <id>/2015/03/16/thriving-in-a-new-work-environment.html</id>
    <published>2015-03-16T00:00:00Z</published>
    <updated>2015-03-16T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;My Background&lt;/h2&gt;

&lt;p&gt;If you asked me a month and a half ago when I was living and working near Philadelphia as a Director of digital communications, “Cory what are the chances that you will be in Boston working for a new company?”. I would have said you were crazy and I couldn’t see myself leaving the Philly area unless a company blew me away with their culture and work environment. How would I watch my Sixers, Eagles, and Phillies games if I left the Philly area?&lt;/p&gt;

&lt;p&gt;Then in a week and a half frenzy I was moving up to Boston after it had just snowed another two feet in Boston. A day after that I had moved in to my new apartment and it was my first day at DockYard as a Junior UX Developer!&lt;/p&gt;

&lt;p&gt;Fast forward a week and I had met 16 new DockYard co-workers (who, yes, are crazy smart) and was introduced to a new coding/project management environment. I was then challeneged to learn how to  structure my SCSS with the
&lt;a href="https://github.com/dockyard/styleguides/blob/master/uxd/class-naming-conventions.md"&gt;BEM&lt;/a&gt;
class naming conventions and rules for Scalable and Modular Architecture for CSS
(&lt;a href="https://github.com/dockyard/styleguides/blob/master/uxd/beginning-a-project.md"&gt;SMACSS&lt;/a&gt;), all of this  was a tidal wave of new information and personally a different way of thinking.&lt;/p&gt;

&lt;h2&gt;It’s Not All About You&lt;/h2&gt;

&lt;p&gt;I would love to say that the sole reason that I’ve been able to handle all the new information is that I am purely that awesome. But in reality I could not have gotten through any of this without the work environment DockYard has implemented.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://reefpoints.dockyard.com/2015/01/16/joining-dockyard.html"&gt;Estelle&lt;/a&gt; and
&lt;a href="http://reefpoints.dockyard.com/office/2013/07/09/first-month-at-dockyard.html"&gt;Marin&lt;/a&gt; explain how “Wicked Good” the DockYard team is and do so better than I can, but from my experience after a month of working here it is clear that everyone wants to help each other (new guy included). If you need help and you’re not approaching other team members with questions, you might find yourself out of place.&lt;/p&gt;

&lt;p&gt;This type of atmosphere is exactly what you need for soaking in all the information you receive at a new job. You will always have questions and uncertainties in a new environment like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Am I meeting their expectations&lt;/li&gt;
&lt;li&gt;Am I messing this up&lt;/li&gt;
&lt;li&gt;Will I look stupid if I ask this question&lt;/li&gt;
&lt;li&gt;What will they think if...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is inevitable to have these questions when you are in a new work place and you should have them, don&amp;#39;t be afraid to solve those concerns by asking productive questions! The new company you just joined would rather be asked a stupid question then see you running in circles not willing to interact with the team.&lt;/p&gt;

&lt;p&gt;I have asked many questions in my first month here and not once has someone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Said no&lt;/li&gt;
&lt;li&gt;Told me there was no point to my question&lt;/li&gt;
&lt;li&gt;Looked down on me for not knowing something&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is a testament to DockYard but also should be how any team should be run, especially web development teams.&lt;/p&gt;

&lt;h2&gt;Success Is Ultimately Decided By You&lt;/h2&gt;

&lt;p&gt;Now it’s not all up to the team you are joining to make you successful, you have to be willing to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Put time into reading about things you did not understand&lt;/li&gt;
&lt;li&gt;Research tools/techniques that you see yourself using in the future&lt;/li&gt;
&lt;li&gt;Be open minded with new development techniques and a new project management process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are successful with goals/projects your boss gives you, then you are meeting your employers standards. In the web development line of work in order to thrive in an environment you should be going above what is expected of you.&lt;/p&gt;

&lt;p&gt;When coworkers look at your work they should be impressed and surprised with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The product you are presenting&lt;/li&gt;
&lt;li&gt;How quick and thorough you are when learning new things&lt;/li&gt;
&lt;li&gt;Contributions you make to current projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you are getting those type of reactions to the list above you are thriving in the new work environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;quot;Thriving in a new work environment comes from working harder and more efficiently than expected&amp;quot;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Be willing to be one of the first people at the office and leave later than most, you want to soak in as much information as you can. When you are given new things to learn tackle them immediately.&lt;/p&gt;

&lt;p&gt;During all the chaos of starting a new job stay organized and keep notes of things you are learning, you will probably not remember that Git command after one or two uses.&lt;/p&gt;

&lt;p&gt;If you find yourself in a new work environment and feel overwhelmed just remember to ask as many questions as you can and work hard to understand the solutions your team provides you.&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgc" target="_blank" href="http://wickedgoodember.com/">Wicked Good Ember Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--swift" target="_blank" href="http://www.meetup.com/Boston-Swift/">Boston Swift</a><a class="footer__event--uxhh" target="_blank" href="http://www.uxhappyhour.com/bos">UX Happy Hour</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2015/03/24/rubyists-guide-to-ember-dependencies.html"><strong>Rubyists Guide to Ember.js Dependencies</strong><h6 class='footer-desc'>A dependency management primer for Rubysist living in a Gemfile-less, Ember.js world.</h6></a>
<a class="footer__post" href="/2015/03/23/beginner-mentality.html"><strong>Beginner’s mentality</strong><h6 class='footer-desc'>A fresh perspective can help an expert find and address their blind spots.</h6></a>
<a class="footer__post" href="/2015/03/22/tips-for-writing-ember-addons.html"><strong>Tips for writing Ember Addons</strong><h6 class='footer-desc'></h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>