<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-e7e7283c.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-01-11T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Why is Google ignoring over 400,000 backlinks to DockYard?</title>
    <link rel="alternate" href="/2015/01/11/why-is-google-ignoring-over-400000-backlinks.html"/>
    <id>/2015/01/11/why-is-google-ignoring-over-400000-backlinks.html</id>
    <published>2015-01-11T00:00:00Z</published>
    <updated>2015-01-11T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Imagine our enthusiasm when the opportunity to add hundreds of thousands
of backlinks from one of the web&amp;#39;s most popular library hosting websites
back to our domain came our way. And imagine our surprise when Google
decided they meant nothing.&lt;/p&gt;

&lt;p&gt;Back in &lt;a href="http://reefpoints.dockyard.com/2014/11/18/rubygems-redesign.html"&gt;November we launched the redesign of
RubyGems.org&lt;/a&gt;. We were contacted by
&lt;a href="http://rubycentral.org"&gt;RubyCentral&lt;/a&gt; about 9 months prior. I was
interested in this opportunity for three reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It gave DockYard the opportunity to give back to the Ruby community,
one that has been so pivotal to our growth early on (and one that has
been pivotal to my growth as a profressional engineer for nearly 10
years)&lt;/li&gt;
&lt;li&gt;DockYard can show off its design talents to the community&lt;/li&gt;
&lt;li&gt;DockYard would get a &lt;em&gt;&amp;quot;Designed By&amp;quot;&lt;/em&gt; sponsor link at the bottom of
every page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blog post is going to explore the third reason and the result of
this over the past two months.&lt;/p&gt;

&lt;p&gt;At the time of launch RubyGems.org had over 90,000 gems published. This
meant a sponsor link at the bottom of every page that was backlinking
to &lt;a href="http://dockyard.com"&gt;DockYard.com&lt;/a&gt;. In addition to the landing page
and the other static pages. This was an appealing value to gain from a
re-design effort. According to Google&amp;#39;s own backlink search DockYard had
only 65 pages linking back. This struck me as odd considering this blog
itself links back to DockYard.com and there were more than 65 posts. But
surely after the redesign this number should go up. Our estimated
PageRank was &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After the redesign we saw the expected spike in traffic&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/tpcgGpK.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Checking in on the referrals we can see that to date we have received
over 600 referrals from RubyGems.org. I&amp;#39;m OK with these numbers as I
never expected everyone to be clicking on those links.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/cM66gW5.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;However, what did shock me was that none of these backlinks were being
counted by Google.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/fTyXVzV.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;The sponsor link does not have a &lt;code&gt;nofollow&lt;/code&gt; attribute. And I admit that
SEO is not something I&amp;#39;ve very good at. But if I were to look at another
backlink source such as
&lt;a href="https://ahrefs.com/site-explorer/overview/subdomains/?target=dockyard.com"&gt;ahrefs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/tlHt3sK.png" alt="ahrefs"&gt;&lt;/p&gt;

&lt;p&gt;You can clearly see the spike in referring pages. A &lt;strong&gt;huge&lt;/strong&gt; jump from
nearly nothing to over 400,000. The bottom graph shows that these are
primarly &lt;em&gt;DoFollow&lt;/em&gt; links.&lt;/p&gt;

&lt;p&gt;So these backlinks aren&amp;#39;t being counted by Google? Does Google only count
one domain per backlink? Color me confused. I suspect we&amp;#39;re doing
something wrong on our end to not get any credit. Could it be that such
a huge spike in backlinks are flagged as suspicious by Google? I&amp;#39;d
appreciate any thoughts in the comments.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Complex Search Pages Feel Better in Ember</title>
    <link rel="alternate" href="/2015/01/07/complex-search-pages-feel-better-in-ember.html"/>
    <id>/2015/01/07/complex-search-pages-feel-better-in-ember.html</id>
    <published>2015-01-07T00:00:00Z</published>
    <updated>2015-01-07T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;With many server rendered search pages, a change to your search parameters
typically renders a new page. The use of some JavaScript can alter the
search results, as seen below. Note that both refreshes and JavaScript results
swapping happens.&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/pstevGCOUHs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Whenever the results are altered, it feels (and is) slow. The times that
refresh the whole page feel the slowest, but even when a partial
change happens, it&amp;#39;s obvious and slow. It feels clunky&lt;/p&gt;

&lt;p&gt;With Ember, we can provide a better experience. The video below is a similiar
style search page on a site we built for &lt;a href="http://leanivore.com"&gt;Learnivore&lt;/a&gt; with Ember.&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/7F2F1iGOw4s" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Notice that the page never refreshes completely. The search box always stays on
the page. And when we switch categories, only the relevant options are swapped
out, we don&amp;#39;t have to redraw the whole page. And when we select an additional
filter on the left, only the search results are swapped out. &lt;strong&gt;This page performs
better because it performs less work.&lt;/strong&gt; It feels better because you are constantly
seeing parts of the page reloaded without being changed. The filters on the left
only change when they need to.&lt;/p&gt;

&lt;p&gt;It will also perform better on low bandwith connections; it only requests the
data necessary to render the page.  This will require fewer bytes to be sent
compared to the server rendered page.  When you render the page on the server,
you have to include every tag necessary to render that content. When you are
using a single page application architecture like Ember, it will only need the
data that makes up that result.&lt;/p&gt;

&lt;p&gt;What a representation of the server rendered page looks like coming across the
web to your device:&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Your search results&lt;span class="tag"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;&amp;lt;!-- Several to tens of lines for stylesheets and javascript --&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Search results!&lt;span class="tag"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This can be tens of lines, hundreds of characters to establish content
      and look&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;somepage&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Here is one of the search results&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Some description of your search result&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;SomeImage&lt;/span&gt;&lt;/span&gt;&lt;span class="error"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;&amp;lt;!--Repeat the result 10/20/50 times --&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;about&lt;/span&gt;&lt;/span&gt;&lt;span class="error"&gt;&amp;gt;&lt;/span&gt;About us&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hundreds more characters to provide links, style, etc&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since the page needs to be completely reloaded, we need to display not only
the contents, but any header and footer content. This simplified example also
lacks any type of filters or inputs to alter your results, which would make the
amount of data sent to your device larger to view the page. This needs to happen
whenever the page is updated.&lt;/p&gt;

&lt;p&gt;Compare the above to what Ember requires to update the page:&lt;/p&gt;
&lt;div class="highlight json "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;r&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;h&lt;/span&gt;&lt;span class="error"&gt;R&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;t&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;: [
    {
      &lt;span class="error"&gt;t&lt;/span&gt;&lt;span class="error"&gt;i&lt;/span&gt;&lt;span class="error"&gt;t&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;: &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="error"&gt;H&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;r&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt; &lt;span class="error"&gt;i&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt; &lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt; &lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;f&lt;/span&gt; &lt;span class="error"&gt;t&lt;/span&gt;&lt;span class="error"&gt;h&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt; &lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;r&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;h&lt;/span&gt; &lt;span class="error"&gt;r&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;t&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;, &lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;r&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;: &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;g&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;,
      &lt;span class="error"&gt;d&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;r&lt;/span&gt;&lt;span class="error"&gt;i&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;t&lt;/span&gt;&lt;span class="error"&gt;i&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;: &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="error"&gt;S&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt; &lt;span class="error"&gt;d&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;r&lt;/span&gt;&lt;span class="error"&gt;i&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;t&lt;/span&gt;&lt;span class="error"&gt;i&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt; &lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;f&lt;/span&gt; &lt;span class="error"&gt;y&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;r&lt;/span&gt; &lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;r&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;h&lt;/span&gt; &lt;span class="error"&gt;r&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;t&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;, &lt;span class="error"&gt;i&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;g&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;: &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="error"&gt;S&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;I&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;g&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;
    },
    &lt;span class="error"&gt;R&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;t&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;d&lt;/span&gt; &lt;span class="integer"&gt;10&lt;/span&gt;&lt;span class="error"&gt;/&lt;/span&gt;&lt;span class="integer"&gt;20&lt;/span&gt;&lt;span class="error"&gt;/&lt;/span&gt;&lt;span class="integer"&gt;50&lt;/span&gt; &lt;span class="error"&gt;t&lt;/span&gt;&lt;span class="error"&gt;i&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;
  ]
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Bytes are wasted sending down the markup to render the page; it&amp;#39;s already
there, along with the header and footer. This payload is much smaller, and
provides a friendlier experience to those on a slow connection.&lt;/p&gt;

&lt;p&gt;We can provide better interactions with Ember because the user will not see unnecessary
rerendering of the same content. The requests to update the content will be
smaller, so new results will arrive faster. The difference in speed of these two
approaches is increased as the user&amp;#39;s bandwidth shrinks. Faster pages help with
conversions, and Ember can provide a faster, more intuitive experience.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>BEM Tips: Avoid Chaining Modifiers</title>
    <link rel="alternate" href="/2015/01/05/avoid-chaining-modifiers.html"/>
    <id>/2015/01/05/avoid-chaining-modifiers.html</id>
    <published>2015-01-05T00:00:00Z</published>
    <updated>2015-01-05T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;At DockYard, we use the BEM methodology for naming our CSS classes. BEM
stands for Block, Element, Modifier and is a front-end development
technique that suggests a class naming convention for your HTML elements. If
you aren&amp;rsquo;t already familiar with BEM, it would be helpful to take a look at
&lt;a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/"&gt;Harry Robert&amp;rsquo;s MindBEMding blog post&lt;/a&gt;
and the &lt;a href="https://bem.info/"&gt;BEM website&lt;/a&gt; first.&lt;/p&gt;

&lt;p&gt;When I started looking into using BEM, I thought it would definitely work well
for large web applications. The more rules we could put in place
regarding naming conventions, the better. What I didn&amp;rsquo;t understand
was what to do when an element could be considered an element of a block &lt;em&gt;or&lt;/em&gt; a
modifier. If I had a button that was in the footer and it was styled differently
than other buttons in the website, should it be named &lt;code&gt;.footer__button&lt;/code&gt;
or &lt;code&gt;.button--footer&lt;/code&gt;? Arguments could be made for both sides, so is one better
than the other?&lt;/p&gt;

&lt;p&gt;After trying out both ways, &lt;code&gt;.footer__button&lt;/code&gt; proved more scalable because
this rule could be consistently applied in more situations. Could there
be more types of buttons in the footer?
If there are also social buttons in the footer, our choices now become
&lt;code&gt;.footer__button--social&lt;/code&gt; or &lt;code&gt;.button--footer--social&lt;/code&gt;. In the second one, is social modifying
footer and footer modifying button? Or is social modifying button as
well? To avoid confusion, I would call it &lt;code&gt;.footer__button--social&lt;/code&gt;
and not chain my modifiers. This doesn&amp;rsquo;t mean we
shouldn&amp;rsquo;t use multiple modifiers in a class name at all.
&lt;code&gt;.person--female__hand--right&lt;/code&gt; is still fair game. It&amp;rsquo;s clear that female
is modifying person and right is modifying hand.&lt;/p&gt;

&lt;h2&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;If I had an element that could potentially be either an element of a
block or modifying an element, the latter is better because
chaining modifiers can be confusing.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Tips on Mental Models</title>
    <link rel="alternate" href="/2014/12/30/modeling-mental-models.html"/>
    <id>/2014/12/30/modeling-mental-models.html</id>
    <published>2014-12-30T00:00:00Z</published>
    <updated>2014-12-30T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Just as a single color can have conflicting associations between different cultures, mental models can vary widely between users. If you haven’t heard of &lt;a href="http://en.wikipedia.org/wiki/Mental_model"&gt;mental models&lt;/a&gt;, they are a beholder’s mental image of a designed object and how it may be interfaced with. &lt;/p&gt;

&lt;p&gt;Understanding the mental models your users have created of your product (or similar product experiences) is important. It will help you improve either by adjusting the product to better fit their mental model or by changing the users’ mental model to better fit your product. Neither are simple.&lt;/p&gt;

&lt;p&gt;To give you a sense of how a mental model is constructed or applied to a product, let&amp;#39;s imagine looking at a new object in extreme slow motion:&lt;/p&gt;

&lt;p&gt;The object is placed before you. The first thing you notice is its size and shape. It’s small enough to fit in the palm of your hand, thin, and rectangular in shape. Its color is off-white. In this first glance you might make some general assumptions about the object’s nature and function, but given that there are countless objects that could share these qualities, your observation continues. &lt;/p&gt;

&lt;p&gt;On the grey rectangle you can clearly see a small red button, a small green button, a large square button, and a series of small grey buttons in a familiar 3x3 grid. Given that the device is small enough to fit in your hand, has multiple buttons, and lacks a screen, you might conclude that it’s a remote of some kind. And you might stop there, unless you actually have to use the remote.&lt;/p&gt;

&lt;p&gt;While making these observations, your brain was building a mental model of how to interact with it by referencing past experiences with similar objects. Taking the path of least resistance, your brain wants to reapply these models wherever and whenever it can. You won’t need to re-teach yourself how to use something you’ve consistently used over the years unless something significantly breaks the pattern. With each connection you make with familiar and unfamiliar qualities of the object, either consciously or not, you pave ways to interpret the purpose, value, and effectiveness of the object.&lt;/p&gt;

&lt;p&gt;The speed with which we identify these things correlates to how similar the object is in form to other objects we’re familiar with. The models you create as a user aren’t originating solely with the object in front you; instead they are created from all the objects you’ve ever interacted with. This is where understanding and employing mental models gains value in design. We can use them to manipulate, speed up, or slow down interpretation of our products.&lt;/p&gt;

&lt;p&gt;The information and interpretations from that first glance are all gleaned with relatively low effort, almost instantaneous, and you’re not always aware that you are making these evaluations. However, a unique object often takes a conscious effort to understand. If the object wasn’t very well designed to reveal its own function you may instead have exhausted yourself with a seemingly uninterpretable thing and given up.&lt;/p&gt;

&lt;h2&gt;Borrowing&lt;/h2&gt;

&lt;p&gt;We sometimes borrow mental models from unrelated or contextually irrelevant experiences because some aspect of what we are interacting with may have unconsciously reminded us of previous experiences. A thing isn’t always what we think it is.&lt;/p&gt;

&lt;p&gt;Because we are all somewhat responsible for building our own mental models from our experiences with the designed world, our interpretations of an object’s purpose or quality of performance can vary greatly. I think this is part of the reason why reviews of products are so polarized. People’s expectations and preferences are different, and sometimes they just aren’t able to build a fitting mental model of the product. So they’ll borrow it.&lt;/p&gt;

&lt;p&gt;If the object is truly unique, layers of mystery may remain for a broad user base. Thus, there may be limits to how they have evaluated the object’s purpose. As designers, we don’t need to hold ourselves responsible for explaining everything, but it is important to get a user to as complete an understanding as possible using the object’s form alone. No language, no manuals, no tutorials. No automatically playing videos after they log in for the first time.&lt;/p&gt;

&lt;h2&gt;Against the grain&lt;/h2&gt;

&lt;p&gt;Going against the grain of a mental model is generally a bad idea, but it can be valuable. It should be by design, of course, and might provide some comparative market value and interest. An example of this working was the introduction of the iPod and its very unique interface (the wheel) while competitors had basically indistinguishable and boring (by comparison) arrow key pads. The iPod might have been a little more difficult to use, but the innovative design wasn’t enough of a challenge to stop people from using it. Instead the change helped Apple greatly differentiate their product from other MP3 players.&lt;/p&gt;

&lt;p&gt;What happens when you go against the grain for no good reason? Lots of avoidable and silly mistakes, that’s what. Take this remote for our projector as an example.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/post-assets/steve/mental-models-remote.jpg" alt="A very frustrating projector remote"&gt;
&lt;em&gt;For emphasis, I’ve erased the small labels generally ignored by users when turning the projector on or off.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We know it’s a remote at first glance because we’ve used them before. The shape seems to suggest both purpose and a direction for use. Which end of the remote would you point toward the projector?&lt;/p&gt;

&lt;p&gt;If you said you’d point it with the slanted side forward and the red button in the upper right, you would have found on your first (and second, and third) attempt that this remote’s form does not align with your mental model. With this particular design, you are expected to hold the remote with the red button positioned on the bottom left. &lt;/p&gt;

&lt;p&gt;In other words, the mental model I have for remotes is not matched to the device because the manufacturer ignored a common design pattern without apparent reason, adding only momentary confusion, rather than enhanced functionality, to my experience.&lt;/p&gt;

&lt;h1&gt;Last words on defining (and refining) your models&lt;/h1&gt;

&lt;p&gt;When designing your product, be aware of your users’ mental models and recognize that your own will be very different from theirs. This is an overwhelmingly common mistake.&lt;/p&gt;

&lt;p&gt;You should also be aware of user and market contexts to judge what aspects of their models you may break and which you should keep. Don’t break the model just to be different if the difference provides no value or delightful experience for a user.&lt;/p&gt;

&lt;p&gt;Lastly, designers must understand that users will have wildly varying points of reference, so presumed models need to be tested with multiple different users before the direction of the product design is settled upon. Failure to do this will put the success of the product at risk.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Lessons Learned - Three years of running a software consultancy</title>
    <link rel="alternate" href="/2014/12/28/lessons-learned-three-years-running-a-software-consultancy.html"/>
    <id>/2014/12/28/lessons-learned-three-years-running-a-software-consultancy.html</id>
    <published>2014-12-28T00:00:00Z</published>
    <updated>2014-12-28T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This year&amp;#39;s story is one of how we nearly went out of business &lt;em&gt;twice&lt;/em&gt; yet
still managed to pull off our most successful year yet.&lt;/p&gt;

&lt;h2&gt;People&lt;/h2&gt;

&lt;p&gt;In 2013, we ended the year with 11 employees. We made a key hire at the start of the year with &lt;a href="http://twitter.com/rwjblue"&gt;Robert
Jackson&lt;/a&gt; joining us. I had met Robert a few
months prior at &lt;a href="http://burlingtonrubyconference.com/"&gt;Burlington Ruby
Conf&lt;/a&gt;. Robert had been
contributing to a few of our Ember libraries, as well as making a name
for himself by quickly moving up the contributors list in Ember.js
itself. Less than four months after we hired Robert he was welcomed onto
the Ember.js Core Team. I&amp;#39;m extremely proud of him accomplishing
that.&lt;/p&gt;

&lt;p&gt;We added depth to our design team in Q1 2014 with &lt;a href="http://twitter.com/rgbcolor"&gt;Maria Matveeva&lt;/a&gt;
and &lt;a href="http://twitter.com/imakemusic"&gt;Tim Walsh&lt;/a&gt;. Tim and Maria have been
invaluable for us, their dedication and ability allows you to easily
forget how young they are. I&amp;#39;m looking forward to seeing how they
continue to grow in 2015.&lt;/p&gt;

&lt;p&gt;Early in 2014, we hired our first Project Manager, &lt;a href="https://twitter.com/jon_lacks"&gt;Jon
Lacks&lt;/a&gt;. Jon and I went to college
together, and historically I have not had a good run of
working with friends. That has been my fault, I think I was more
interested in working with people I was friends with than establishing
what their responsibilities would be. Jon and I agreed that any and all
potential issues that may arise that could conflict with our prior
relationship should be aired out immediately. Jon joined
DockYard in February and spent the first month or so observing our team
more than taking complete ownership of our process. I gradually handed
off some of what I was managing to Jon (running standups, getting involved with
some client meetings, helping with estimations). All this to say that
adding a dedicated PM was one of the highest impact decisions I made in
2014. I suspect that many companies don&amp;#39;t need one until they&amp;#39;re around
10 people in size but once you do hire one you&amp;#39;ll be thankful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/i_am_romina"&gt;Romina Vargas&lt;/a&gt; and &lt;a href="https://twitter.com/Linstula"&gt;Lin Reid&lt;/a&gt; were two engineers that went through our
intern program and we upgraded them to full-time as soon as we could.
Both Lin &amp;amp; Romina have been important members of some of our larger
clients projects in 2014.&lt;/p&gt;

&lt;p&gt;Marin Abernethy, a former engineering intern, came back for her third (and final)
internship with us after her graduation from college.
In the Fall we hired her as a full-time engineer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/netopwibby"&gt;Paul Webb&lt;/a&gt; interviewed with us in early 2014 but we had some projects
fall through and things got very tight for us (more on this later) so we
had to pass. But as soon as we had the bandwidth we brought Paul onboard
to our UX Development team.&lt;/p&gt;

&lt;p&gt;Heading into the Summer, we started to get spread a little thin on the
engineering team. I had come off of client work completely to focus on
the business so we needed another Senior level engineer. I reached out
to &lt;a href="https://twitter.com/edeblois"&gt;Estelle DeBlois&lt;/a&gt;, who had come to our
&lt;a href="http://wickedgoodember.com"&gt;Wicked Good Ember&lt;/a&gt; conference in June.
She&amp;#39;s been lead developer for one of our larger clients over the past
few months.&lt;/p&gt;

&lt;p&gt;Our final hire starts full-time with us in January. &lt;a href="https://twitter.com/ashleytreni"&gt;Ashley
Treni&lt;/a&gt; was actually tending bar at
&lt;a href="http://www.highballboston.com/"&gt;Highball Lounge&lt;/a&gt; right next door to our
office (they can see us, we can see them). She asked what we did and it
turns out that she is an amazing designer who was completing her Masters
in Information Design and Visualization at Northeastern. She did a summer internship with us and
accepted our offer for full-time employment just recently.&lt;/p&gt;

&lt;h3&gt;Hiring is hard&lt;/h3&gt;

&lt;p&gt;Hiring continues to be hard. We have had success by focusing on
technology niches, but we may have tapped that out. Going into 2015, we
will have to consider how do we reach out and attract top talent,
&lt;em&gt;and&lt;/em&gt; how do we improve the existing talent we have. Promoting from within
is something I&amp;#39;ve talked a big game about but have done little with.
This will change in 2015.&lt;/p&gt;

&lt;p&gt;I began 2014 with the same trend I had in the previous two years: I
would hire good people even if we didn&amp;#39;t have projects to put them on.
Coming out of Q1 2014, I had to stop this immediately. While we had built
up a great team, the weight of that payroll and our lack of cashflow at
the time was at a breaking point where I could no longer cover the
difference by taking myself off salary. Since then I have been very
conservative with hiring. Unfortunately we actually missed out on some
great people because of this, and I regret that as I was perhaps &lt;em&gt;too&lt;/em&gt;
conservative in our hiring at the time. Heading into 2015, this will
probably continue to be an aspect of the company I will continue to
improve.&lt;/p&gt;

&lt;h3&gt;Firing still sucks&lt;/h3&gt;

&lt;p&gt;I had to fire two employees in 2014. Firing always sucks and I don&amp;#39;t
think I&amp;#39;ll ever get used to it. There is a guilt that is attached that
at some point is out-weighed by whatever you&amp;#39;re not getting from said
employee. So how does one mitigate the guilt? &lt;a href="http://www.slideshare.net/reed2001/culture-1798664?ref=https://gigaom.com/2013/01/29/netflix-company-culture/"&gt;Netflix has a great
policy when it comes to firing
employees&lt;/a&gt;.
The document outlines their full cultural philosophy but the gist of how
they fire is that they give a very generous severance package. So
managers don&amp;#39;t concern themselves with the guilt what will happen to
this employee without their job. I think this is a great idea, but not
always practical for all companies. If we had Netflix money then I would
definitely align our severance package with theirs.&lt;/p&gt;

&lt;h3&gt;Culture&lt;/h3&gt;

&lt;p&gt;We&amp;#39;ve done a lot of work to define what the culture of DockYard actually
is. Until Q4 2014 our culture was never written in stone. So we took
some time to put it into words:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;strong problem solvers, with attention to detail&lt;/li&gt;
&lt;li&gt;coachable learners and willing mentors&lt;/li&gt;
&lt;li&gt;professional, kind and respectful&lt;/li&gt;
&lt;li&gt;collaborative team players&lt;/li&gt;
&lt;li&gt;disciplined&lt;/li&gt;
&lt;li&gt;reputation&lt;/li&gt;
&lt;li&gt;diverse&lt;/li&gt;
&lt;li&gt;fun&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#39;m sure you&amp;#39;re looking at this list and thinking &amp;quot;yeah this is pretty much what every company will say&amp;quot;.
That could be true, but these are going to be our hiring and retention criteria. We will be building a team around 
these principles and expect everyone at DockYard to live up to them.&lt;/p&gt;

&lt;h3&gt;Heading into next year&lt;/h3&gt;

&lt;p&gt;We have a goal of expanding our team to over 25 by the end of 2015. I
would actually prefer to be closer to 30. Our hiring will be focused on
Senior Level talent for engineering, design, and UX. We&amp;#39;re always interested
in &lt;a href="mailto:jobs@dockyard.com"&gt;hearing from great people, get in touch if you&amp;#39;re
interested&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Estimations&lt;/h2&gt;

&lt;p&gt;Our problems with maintaining our estimations were not significantly
improving in early 2014. We had to eat a lot of money on contracts that
was due either to bad estimations or our inability to properly manage our
clients. If we ever expected to build a real company, this had to be
fixed. This is where Jon came in as our first Project Managing hire. It
took a few months but we&amp;#39;ve gone from being consistently late to being
consistently early. Our estimations are currently one of the more
reliable aspects of our business. This has not just helped relationships
with existing clients but being able to reliably sell our services to
new clients is incredibly powerful.&lt;/p&gt;

&lt;h3&gt;Heading into the next year&lt;/h3&gt;

&lt;p&gt;I suspect we will continue to hone our ability to estimate. We will also
be looking to hire an additional Project Manager as we decided we don&amp;#39;t
ever want to spread a PM over more than three projects.&lt;/p&gt;

&lt;h2&gt;Financials&lt;/h2&gt;

&lt;p&gt;In 2013 we ended the year with $1.7m in revenue with about 20% profit
margin. This year we improved that to $3.1 in revenue with 33% profit
margin. This is a significant jump, in many ways I&amp;#39;m incredibly proud of
what we were able to accomplish this year. However, I also know that we
(as a company) underperformed. If we had been as productive in the first
half of the year as we were in the second half we should have been
closer to a $4m+ company with &amp;gt;50% profit margin.&lt;/p&gt;

&lt;h3&gt;What went wrong&lt;/h3&gt;

&lt;p&gt;We were getting contracts coming in through the year, but nothing with
the challenge or scope that I was hoping for. Small $50k contracts here
and there. I like working on small projects but from a business
perspective we were burning too much time negotiating contracts,
balancing people on and off between contracts. I was butting heads with
our business developer. He and I had different ideas on how to run the
company. The funny thing is that neither of us were wrong. He wanted to
reduce price due to lack of the demand we had at the time. I didn&amp;#39;t want
to do that. I was willing to pass on contracts that we could have
gotten if we cut our rate 25%. This eventually put us in a position of
bringing in 0% of billings for more than 50% of the company rather than
75% of billings. Which would you rather have?&lt;/p&gt;

&lt;p&gt;I&amp;#39;m sure there are people reading this was a deeper background in
running a business than saying it was stupid not to take the 75%. Here
is my problem: at that amount we weren&amp;#39;t making any profit and our
people were tied up on projects. I was tired of living hand to mouth, I
had taken myself off of payroll consistently for the past few years. I
was living off my wife&amp;#39;s salary.&lt;/p&gt;

&lt;p&gt;At the end of Q1 I was looking down the barrel of DockYard and not
liking what I was seeing. Then we got a whale of a contract come our
way. This was a contract that could right the ship. Or so I thought.&lt;/p&gt;

&lt;p&gt;I was not heading up the contract negotiations. The only criteria I gave
was what I thought our rate should be for this contract. When it came to
it our business developer was not confident that we could get that rate.
I was distraught. I was not willing to lock DockYard into a long-term
contract at cost. I told my wife at dinner I was going to start looking
for a &amp;quot;real job&amp;quot; and that DockYard was finished.&lt;/p&gt;

&lt;p&gt;I didn&amp;#39;t sleep. I stayed up and kept mulling over the contract, was this
it? I came to several conclusions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client could afford our rate.&lt;/li&gt;
&lt;li&gt;We were worth the rate.&lt;/li&gt;
&lt;li&gt;Our business developer did not believe in #2&lt;/li&gt;
&lt;li&gt;I should be handling contract negotiations for DockYard&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I came into work that morning. Within a span of 15 minutes I fired our
business developer and landed the client at the rate we felt we
deserved.&lt;/p&gt;

&lt;p&gt;I realize the above might seem indifferent to letting someone go. He and
I actually got along very well on a personal level. But as I mentioned
previously when it came to how to run DockYard we didn&amp;#39;t see eye to eye.
I was stressing out over this constantly and in the event I was not able
to land this client on my own at the very least I could say that I went
out my way. Egotistical? Yes, of course. But it is something I needed to
do. If we had slowly died over the rest of 2014 due to no real profit
margin I would have quit.&lt;/p&gt;

&lt;p&gt;This was the first of two near-deaths for DockYard this year. The second
would come just two months later.&lt;/p&gt;

&lt;p&gt;The large client came with a large legal team, one that I was unprepared
for handling properly. We have an excellent lawyer we&amp;#39;re working with
but I am accustomed to contract negotiation taking maybe a week. This
took months to complete.&lt;/p&gt;

&lt;p&gt;The problem with dealing with Enterprise companies is that they can
outlast you. It isn&amp;#39;t their intent to do so, it is in their best
interest that their vendors are able to work on what they need to the
best of the vendor&amp;#39;s ability. It doesn&amp;#39;t help either party if the vendor
can&amp;#39;t make payroll. However, because of how many Enterprise companies
are structured, and who has to sign off on what, an unprepared small
vendor can be put into a position of agreeing to some things that are not
in its best interest so it can start getting paid ASAP.&lt;/p&gt;

&lt;p&gt;I was perhaps too  risky in this regard. I held out on the contract, I
put it through multiple rounds of negotionation. There was some legit
scary stuff in it that I was not willing to agree to. We had started
work with the client before the contract was completed. At the time I
didn&amp;#39;t consider this to be a big risk.&lt;/p&gt;

&lt;p&gt;What happened was that there was little to no incentive to speed up the
contract signing for our client. We were working, doing what they
wanted, and they had no obligation to pay us. I realize some of you are
reading this and thinking &amp;quot;Rookie Move!&amp;quot; but consider the context.
Starting work with large clients prior to contracts being completed is
actually a common practice in the Enterprise. I hear some of you
screaming &amp;quot;no it isn&amp;#39;t!&amp;quot;. Yes, it is.&lt;/p&gt;

&lt;p&gt;We ran out of money. We had a payroll that we were $25k short for. I had
a very difficult conversation with the client and made the tough
decision to stop work until the contract was signed and our existing
invoices were immediately covered. I made a personal loan to DockYard to
cover payroll. (as a side-note, banks never loan you money when you need
it) Thankfully the client saw the situation for what it was and we were
able to move forward. This was in June.&lt;/p&gt;

&lt;p&gt;Putting the brakes on the project and getting the contract done and
getting paid was the turning point for DockYard. We went from invoicing
on average $30k/week to over $100k/week. With no contract longer than
Net-30 by August we had all of our debts paid off and were in a position
to hire again. By November we had gone from a 1% profit margin for the
year in June to over 25%.&lt;/p&gt;

&lt;p&gt;It is actually strange writing about this now, and I&amp;#39;m not entirely
certain I should have written all of this. In some ways it was one of
the most stressful times in my life, and looking back it feels surreal.&lt;/p&gt;

&lt;p&gt;I hope there are some nuggets of knowledge in here to help others avoid
a similar situation.&lt;/p&gt;

&lt;h3&gt;Heading into next year&lt;/h3&gt;

&lt;p&gt;We have ambitious financial goals. We aim for a $5m+ business in 2015. A
$10m+ business in 2016, each year with &amp;gt;25% margin. If we can maintain our current momentum we
should easily meet 2015&amp;#39;s goal.&lt;/p&gt;

&lt;h2&gt;Technology&lt;/h2&gt;

&lt;h3&gt;Ember.js&lt;/h3&gt;

&lt;p&gt;We bet very heavily on &lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt; in 2013. That bet
has paid off very well for us in 2014. The client mentioned above hired
us for our expertise in Ember.js. We landed another great client in the
Summer because of Ember.js. We are seeing a steady flow of work come in
because of Ember.js but I don&amp;#39;t think we can meet our $5m goal by
relying on inbound leads from Ember.js.&lt;/p&gt;

&lt;p&gt;One thing we&amp;#39;ve never dealt with is selling our services into another
company. We&amp;#39;ve got most work by companies making a technology decision then
finding who is good at working with said technology. How do you convince
a company unfamiliar with Ember.js that it is what they should use to
build their product with? What if this person is not technology savvy?&lt;/p&gt;

&lt;p&gt;I came to the conclusion that you cannot sell Ember.js directly. I
needed help with building a sales pipeline and sales pitch. A friend put
me in touch with &lt;a href="https://www.linkedin.com/pub/lorne-cooper/0/9a6/811"&gt;Lorne
Cooper&lt;/a&gt; who I have
been working with over the past two months. Lorne convinced me that I
had sales backwards. We need to start with Marketing. (he also convinced
me that I couldn&amp;#39;t sell Ember.js)&lt;/p&gt;

&lt;p&gt;So what we built was the DockYard marketing funnel. Working backwards
from Ember.js, we broadened the funnel. If the answer is: &lt;strong&gt;Ember.js&lt;/strong&gt;
then the question should be &lt;strong&gt;What is the best Single Page App
framework?&lt;/strong&gt; (let&amp;#39;s save tech debates for another time). I didn&amp;#39;t feel
that selling SPAs was any better than selling Ember.js. Again, the
answer is &lt;strong&gt;Single Page Apps&lt;/strong&gt; so the question should be &lt;strong&gt;How do you
provide a modern user experience on the web?&lt;/strong&gt;. Now were had something.
Selling UX as a solution to companies was tangible. If we could market
that UX improvements was the way to solve common problems in modern web
apps then we could hook companies on the idea that Single Page Apps was
the best way to deliver modern UX. If we could convince companies on
SPAs then we have the chance to convince them that Ember.js is the best
framework for building out SPAs. At this point we have to make a case
that DockYard is the best company as building Ember.js applications. We
now had our marketing funnel. We plan on putting this funnel to the test
in early 2015, but don&amp;#39;t expect any significant number of qualified
leads to be produced until late 2015, more likely early 2016.&lt;/p&gt;

&lt;h3&gt;Elixir&lt;/h3&gt;

&lt;p&gt;While we are not currently writing any &lt;a href="http://elixir-lang.org"&gt;Elixir&lt;/a&gt; apps I think 
it will be part of our offerings around Q3 2015. Specifically because of
the &lt;a href="http://www.phoenixframework.org/"&gt;Phoenix Framework&lt;/a&gt; being very
similar to &lt;a href="http://rubyonrails.org"&gt;Ruby on Rails&lt;/a&gt; I think we should be
able to ramp upon it quickly.&lt;/p&gt;

&lt;p&gt;The other choices I considered looking into were
&lt;a href="http://golang.org"&gt;Go&lt;/a&gt; and &lt;a href="http://www.rust-lang.org/"&gt;Rust&lt;/a&gt;. Elixir
feels like the best of the three to me. It is far less popular than the
other two but considering it is backed by Erlang and boasts the most
approachable syntax, has meta-programming, concurrency, and is built for
fault tolerance I feel of those three language Elixir is the best suited
for the future. Of course, this is a gamble and time will tell.&lt;/p&gt;

&lt;h3&gt;Ruby on Rails&lt;/h3&gt;

&lt;p&gt;Our involvement with Ruby on Rails will never go away completely but I
don&amp;#39;t see Ruby or Rails being a serious part of our technology identity
in the future. I would like to think that we were out with a bang
though, in early 2014 we were selected to redesign
&lt;a href="http://rubygems.org"&gt;RubyGems&lt;/a&gt;. We launched the redesign at
&lt;a href="http://rubyconf.org"&gt;RubyConf&lt;/a&gt; and it was a nice way to say &amp;quot;thank-you&amp;quot;
to a community that we&amp;#39;ve benefited from for so long.&lt;/p&gt;

&lt;h3&gt;Heading into next year&lt;/h3&gt;

&lt;p&gt;I always want DockYard to be a company that does not stagnate on
technology. I enjoy working with and exploring new technology and I
always want to push our engineering team to do that same. In the near
future I think Ember.js and Elixir will be important for us, of course
we must be open-minded enough about new technology on the horizon.&lt;/p&gt;

&lt;h2&gt;Design&lt;/h2&gt;

&lt;p&gt;Design has become so essential to our process I don&amp;#39;t understand how we
go by in the early years without a dedicated design team. We rely upon
design to manage our Discovery Phase, build and inform our estimations.
Design has more impact on us converting a client out of Discovery to a
full client than engineering does.&lt;/p&gt;

&lt;h3&gt;UX East&lt;/h3&gt;

&lt;p&gt;This year we ran our first Design conference, &lt;a href="http://uxeast.org/"&gt;UX East&lt;/a&gt;.
It was structured as a design camp with two talks and one workshop.  The conference was organized by our Creative Director Steven Trevathan
and Maria Matveeva we believe we were hugely successful.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re already beginning plans for next year&amp;#39;s UX East (you can sign up for
updates, including call for proposals, &lt;a href="http://eepurl.com/_NCUL"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;Team Structure&lt;/h3&gt;

&lt;p&gt;Every project is now assigned at least two designers. This is partially
because the projects are big enough to merit the team, but it&amp;#39;s also a huge
qualitative add to the final delivery. Pairing designers is really helpful for &amp;quot;leveling up&amp;quot; as well. Matching
designers by their different strengths they&amp;#39;ll help each other grow. The
concept is very similar to pair programming, however the designers go
through many rounds of critiques instead of using the same computer for an
extended period.&lt;/p&gt;

&lt;p&gt;While we hadn&amp;#39;t previously done this, and it looks like a fairly obvious
improvement to make, the result has been surprisingly positive and our most
recent projects are seeing a huge benefit from it.&lt;/p&gt;

&lt;h3&gt;Setting Goals &amp;amp; Sticking To Them&lt;/h3&gt;

&lt;p&gt;One thing we&amp;#39;re very good at is coming up with ideas. Lot&amp;#39;s of them. There is
no shortage there, however there is a real challenge in effectively using down
time and DockYard Fridays to commit to delivering on those ideas. I believe
this is due to not having specific departmental goals that directly fit into
company annual or quarterly objectives.&lt;/p&gt;

&lt;p&gt;An example of this challenge is &lt;a href="http://toolsofthetrade.dockyard.com/"&gt;Tools of the Trade&lt;/a&gt;.
In the beginning of 2014 we put effort into creating small and novel icon packs
and distrubuting them as free to use. It generated some interest, and we had
fun with our icons, but we dropped the ball and lost momentum on it. Not because
we didn&amp;#39;t enjoy making them or that it didn&amp;#39;t benefit our designers by the
challenge, but because it didn&amp;#39;t fit cleanly into any company objective.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve set a Q1 2015 goal to create a program and agenda for design experimentation
with a focus on single page web applications. By that objective we&amp;#39;ll be aiming
to provide more practical design tools, design and interaction patterns, and free
assets for other designers in creating single page web applications. By commiting
to this goal and using Tools of the Trade as vehicle, we should be able to promote
ourselves, &amp;quot;level up&amp;quot; our designers, and effectively utilizing downtime.&lt;/p&gt;

&lt;h2&gt;Business&lt;/h2&gt;

&lt;p&gt;On the business side of things we&amp;#39;ve begun to add more structure to DockYard. We hired a CEO coach 
to take us through an OGSM (Objectives, Goals, Strategies and Measures)
planning session for 2015. It was a tiring two days of time that helped
us discover what type of company we want to be. The management team has
all decided that DockYard should aim big and that is what we&amp;#39;re going to
do.&lt;/p&gt;

&lt;h3&gt;Office Space&lt;/h3&gt;

&lt;p&gt;In Q2 2015 we&amp;#39;ll be moving into a new office space. Our current space
has served us well but it has its problems. The new space will be
modern and have plenty of space for us (we&amp;#39;re upgrading from 2,800 sq/ft to
7,800 sq/ft). I&amp;#39;m excited to share those plans in the upcoming months.&lt;/p&gt;

&lt;h2&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;I hope this year&amp;#39;s reflection has been useful for you in some way. Each
year&amp;#39;s summary has felt different and I&amp;#39;m sure next year&amp;#39;s will too. As
a company DockYard has taken some knocks this year but we came out
stronger for it with more focus and an actual gameplan. I&amp;#39;d love to hear
other&amp;#39;s experiences as well in the comments.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pattern Matching in Elixir for Rubyists</title>
    <link rel="alternate" href="/2014/12/26/pattern-matching-in-elixir-for-rubyists.html"/>
    <id>/2014/12/26/pattern-matching-in-elixir-for-rubyists.html</id>
    <published>2014-12-26T00:00:00Z</published>
    <updated>2014-12-26T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This is the first in a series of posts for helping Ruby devs understand
some of the concepts in Elixir.&lt;/p&gt;

&lt;h2&gt;Pattern Matching&lt;/h2&gt;

&lt;p&gt;Pattern Matching is one of my favorite Elixir features. Let&amp;#39;s take a
look. (using an &lt;a href="http://elixir-lang.org/getting_started/7.html#7.2-maps"&gt;Elixir
Map&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;%{foo: bar} = %{foo: &amp;quot;baz&amp;quot;}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above is matching a pattern. Don&amp;#39;t think of &lt;code&gt;=&lt;/code&gt; as assignment, you
should think of &lt;code&gt;=&lt;/code&gt; as &lt;em&gt;equality&lt;/em&gt;. The left-hand side of the &lt;code&gt;=&lt;/code&gt; is
equal to the right-hand side. Through pattern matching the variable
&lt;code&gt;bar&lt;/code&gt; is assigned the value &lt;code&gt;&amp;quot;baz&amp;quot;&lt;/code&gt;. Consider:&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;[foo, bar] = [1, 2]
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;foo&lt;/code&gt; is assigned &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; is assigned &lt;code&gt;2&lt;/code&gt;. Patterns can match to
any depth:&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;[foo, bar, [baz]] = [1, 2, [3]]
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;here &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; have the same value from the previous example but
&lt;code&gt;baz&lt;/code&gt; is now assigned the value of &lt;code&gt;3&lt;/code&gt;. Alternatively if we had written:&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;[foo, bar, baz] = [1, 2, [3]]
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;baz&lt;/code&gt; is now assigned the value of &lt;code&gt;[3]&lt;/code&gt;. This would be an example of a
semi-greedy matcher. You can expand upon this to greedily match the
entire statement:&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;my_list = [1, 2, [3]]
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now &lt;code&gt;my_list&lt;/code&gt; greedily matched to the entire right-hand side of the
&lt;code&gt;=&lt;/code&gt;. So why is this cool? Let&amp;#39;s take a look at a Ruby method that
has some conditions:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;foo&lt;/span&gt;(a, b, c)
  &lt;span class="keyword"&gt;if&lt;/span&gt; a == &lt;span class="symbol"&gt;:something&lt;/span&gt;
    ...
  &lt;span class="keyword"&gt;elsif&lt;/span&gt; b == &lt;span class="symbol"&gt;:other&lt;/span&gt;
    ...
  &lt;span class="keyword"&gt;else&lt;/span&gt;
    ...
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above is likely something familar to many Ruby devs. This presents
some problems. Any methods with several code paths increases the
complexity of the method. Complex methods can be difficult to test in
isolation. Let&amp;#39;s take a look at how this would be implemented in Elixir:&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;def foo(:something, b, c) do
  ...
end

def foo(a, :other, c) do
  ...
end

def foo(a, b, c) do
  ...
end
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The first question Ruby devs have is &lt;em&gt;why are there three functions of the same
name?&lt;/em&gt; In Elixir you can define multiple functions of the same name as
long as the function signatures are unique. Functions are matched
against the values passed in. So &lt;code&gt;foo(:something, 2, 3)&lt;/code&gt; would match the
first &lt;code&gt;foo&lt;/code&gt; defined. &lt;code&gt;foo(1, :other, 3)&lt;/code&gt; matches the second. &lt;code&gt;foo(1, 2,
3)&lt;/code&gt; matches the third. Match priority is the order in which the
functions are defined.&lt;/p&gt;

&lt;p&gt;Now our functions are concise, and focused on the very specific
behavior. The conditional is obfuscated through the pattern matching but
this is a common design pattern in Elixir so it should be embraced.&lt;/p&gt;

&lt;p&gt;The pattern matching can be more complex:&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;def foo(%{foo: bar}, &amp;quot;baz&amp;quot;) do
  ...
end
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above will match: &lt;code&gt;foo(%{foo: &amp;quot;zeb&amp;quot;}, &amp;quot;baz&amp;quot;)&lt;/code&gt; but would not match
&lt;code&gt;foo(%{foo: &amp;quot;zeb&amp;quot;}, &amp;quot;bar&amp;quot;)&lt;/code&gt; because the second argument does not match.&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href="http://elixir-lang.org/getting_started/4.html"&gt;Elixir Pattern Matching
Guide&lt;/a&gt; for more
information.&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgc" target="_blank" href="http://wickedgoodember.com/">Wicked Good Ember Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--swift" target="_blank" href="http://www.meetup.com/Boston-Swift/">Boston Swift</a><a class="footer__event--uxhh" target="_blank" href="http://www.uxhappyhour.com/bos">UX Happy Hour</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2015/01/11/why-is-google-ignoring-over-400000-backlinks.html"><strong>Why is Google ignoring over 400,000 backlinks to DockYard?</strong><h6 class='footer-desc'></h6></a>
<a class="footer__post" href="/2015/01/07/complex-search-pages-feel-better-in-ember.html"><strong>Complex Search Pages Feel Better in Ember</strong><h6 class='footer-desc'>Creating a better search experience with Ember</h6></a>
<a class="footer__post" href="/2015/01/05/avoid-chaining-modifiers.html"><strong>BEM Tips: Avoid Chaining Modifiers</strong><h6 class='footer-desc'></h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>