<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-c23d5f09.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/scratch" class="work-nav-item"><strong class='work-nav-item__title'>Scratch Wireless</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/scratch" class="work-nav-item"><strong class='work-nav-item__title'>Scratch Wireless</strong><p>Never pay another penny for smartphone service.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-03-31T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Helping Our Engineers</title>
    <link rel="alternate" href="/2015/03/31/helping-our-engineers.html"/>
    <id>/2015/03/31/helping-our-engineers.html</id>
    <published>2015-03-31T00:00:00Z</published>
    <updated>2015-03-31T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Writing Pseudo-Code as UX Developers&lt;/h2&gt;

&lt;p&gt;As a team, we are always trying to improve our process at DockYard to
make things easier for one another. I’m part of the UX development team, which
takes care of the HTML and CSS/Sass for our projects.
One thing we have found to be helpful to our Ember/back-end engineers is pseudo-coding
where loops and conditionals should go in our templates. It only takes a basic understanding of
&lt;a href="https://pine.fm/LearnToProgram/chap_06.html"&gt;flow control&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When we are in the development phase of a project, UX development usually tries to
complete HTML first. That way UX dev and engineering can work in
parallel without completion times depending on each other. What can we
do to make this process smoother? Below are two code examples of what an engineer may see given these mockups.
&lt;img alt="Has no followers"
src="https://dl.dropboxusercontent.com/u/38675407/followers--no-followers.png"&gt;
&lt;img alt="Followers shows interests"
src="https://dl.dropboxusercontent.com/u/38675407/followers--with-interests.png"&gt;&lt;/p&gt;

&lt;p&gt;Unorganized comments:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;{{! at the beginning the user will not have any followers so show this}}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows-wrap&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows--is-empty&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;You don’t have any followers.&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="comment"&gt;{{! when a user has followers show this block and not the block above}}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows-wrap&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__image&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Alfred H.&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__interests__heading&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Follows for:&lt;span class="tag"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
      &lt;span class="comment"&gt;{{! must be following for at least one interest to have a follower. when the follower is only following for one interest will not have the part that says 2 others or span below that}}&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__interest&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Tennis &lt;span class="entity"&gt;&amp;amp;amp;&lt;/span&gt; Racquet Sports,
        &lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;#&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__interest--other&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;2 others&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__modal__interests&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__modal__interest&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Photography&lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__modal__interest&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Soccer&lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Pseudo-code comments:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows-wrap&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="comment"&gt;{{! if user has followers}}&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="comment"&gt;{{! each follower / following}}&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__image&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Alfred H.&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__interests__heading&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Follows for:&lt;span class="tag"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__interest&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
            Tennis &lt;span class="entity"&gt;&amp;amp;amp;&lt;/span&gt; Racquet Sports
            &lt;span class="comment"&gt;{{! if following for more than one interest}}&lt;/span&gt;
              ,
              &lt;span class="tag"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="attribute-name"&gt;href&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;#&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__interest--other&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;2 others&lt;span class="tag"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
              &lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__modal__interests&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__modal__interest&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Photography&lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="tag"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follow__modal__interest&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Soccer&lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
              &lt;span class="tag"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="comment"&gt;{{!end if}}&lt;/span&gt;
          &lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="comment"&gt;{{! end each}}&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="comment"&gt;{{! else}}&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;follows--is-empty&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;You don’t have any followers.&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="comment"&gt;{{! end if}}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The unorganized way can get out of hand with complex applications. The
pseudo-code method turns out to be slightly more work for UX developers,
but it saves our engineers a lot of time and confusion. Being able to break
things down into simple if/else statements or each loops has been much more efficient.
No more reading paragraphs of what’s supposed to go where and when, or
re-organizing the template!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pluralize Your Word(s) With ember-pluralize</title>
    <link rel="alternate" href="/2015/03/27/pluralize-your-words-with-ember-pluralize.html"/>
    <id>/2015/03/27/pluralize-your-words-with-ember-pluralize.html</id>
    <published>2015-03-27T00:00:00Z</published>
    <updated>2015-03-27T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Do you ever find yourself repeating identical pieces of code throughout
different projects? If so, that&amp;#39;s the perfect indicator for an addon
opportunity. Ember Addons allow you to quickly integrate sharable code
into different projects, without copy and pasting, via one simple command:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  ember install:addon addon-name
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On some of our most recent projects, we kept finding the need to
pluralize words based on &lt;em&gt;how many&lt;/em&gt; of each item we had. Also, since
our data is dynamic and constantly changing, the pluralization of a
word should remain in sync with our fluctuating data. And so
&lt;a href="https://github.com/rsocci/ember-pluralize"&gt;&lt;code&gt;ember-pluralize&lt;/code&gt;&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;After a quick &lt;code&gt;ember install:addon ember-pluralize&lt;/code&gt;, using the addon
is a piece of cake.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s suppose we have a model like so:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;export&lt;/span&gt; &lt;span class="keyword"&gt;default&lt;/span&gt; Ember.Route.extend({
  &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="keyword"&gt;return&lt;/span&gt; Ember.A([
      Ember.Object.create({ &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Cartman&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;cheesyPoofs&lt;/span&gt;: &lt;span class="integer"&gt;20&lt;/span&gt; }),
      Ember.Object.create({ &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Stan&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;cheesyPoofs&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt; }),
      Ember.Object.create({ &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Kyle&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;cheesyPoofs&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt; }),
      Ember.Object.create({ &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Kenny&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;cheesyPoofs&lt;/span&gt;: &lt;span class="integer"&gt;0&lt;/span&gt; })
    ]);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we want to output how many Cheesy Poofs each person has. This addon
provides a helper that allows us to do the following in our template:&lt;/p&gt;
&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{{#each model as |person|}}
  {{person.name}} has {{h-pluralize person.cheesyPoofs &amp;quot;Cheesy Poof&amp;quot;}}
{{/each}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which will output&lt;/p&gt;
&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;// Cartman has 20 Cheesy Poofs
// Stan has 5 Cheesy Poofs
// Kyle has 1 Cheesy Poof
// Kenny has 0 Cheesy Poofs
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And now, as they each start throwing back some Cheesy Poofs, the counts
will start to update, as well as the word &amp;quot;Cheesy Poof&amp;quot;, according to
how many are remaining. Alternatively, if you don&amp;#39;t need to display the
actual number, passing in &lt;code&gt;omitCount=true&lt;/code&gt; as the third parameter will
exclude it from the output:&lt;/p&gt;
&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{{#each model as |person|}}
  {{person.name}}'s {{h-pluralize person.cheesyPoofs &amp;quot;Cheesy Poof&amp;quot; omitCount=true}}
{{/each}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;// Cartman's Cheesy Poofs
// Stan's Cheesy Poofs
// Kyle's Cheesy Poof
// Kenny's Cheesy Poofs
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note: If you&amp;#39;re using Ember Data, you will be provided with a built in pluralize
helper through the &lt;a href="https://github.com/stefanpenner/ember-inflector"&gt;Ember Inflector&lt;/a&gt;
library. The helper is registered for availability in the template; the
functionality is similar, but given that it takes up to two arguments
(the count and the word), you&amp;#39;re not able to solely display the pluralized
word based on a given a count.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;d like to see more on the addon, it can be found on
&lt;a href="https://github.com/rsocci/ember-pluralize"&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bringing Ember to the Desktop with NW.js</title>
    <link rel="alternate" href="/2015/03/26/bringing-ember-to-the-desktop-part.html"/>
    <id>/2015/03/26/bringing-ember-to-the-desktop-part.html</id>
    <published>2015-03-26T00:00:00Z</published>
    <updated>2015-03-26T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;One of our recent client projects at DockYard had us go in a totally new
direction in terms of technology stack. We needed to build a desktop
application that could communicate with some Arduino devices via
&lt;a href="https://developer.mozilla.org/en-US/docs/WebSockets"&gt;WebSockets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me first put this out there: I love building for the web. The mere
thought of developing native desktop applications always makes me cringe
a little, though I admit, I haven&amp;#39;t done much in that arena since those
&lt;a href="http://en.wikipedia.org/wiki/Swing_%28Java%29"&gt;Java Swing&lt;/a&gt; days from forever ago.
Nevertheless, you may find yourself at some point needing to build for the desktop.
Thankfully, you don&amp;#39;t have to put your fuzzy little Tomster away.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nwjs/nw.js"&gt;NW.js&lt;/a&gt;, formerly known as Node WebKit, is a runtime
built on top of Chromium and Node/IO.js that lets you develop native applications
using the web technologies that you love. You can essentially build an Ember app, and
also invoke Node modules all within the browser, then package it up as
a Mac OS X application or Windows &lt;code&gt;exe&lt;/code&gt; file when you&amp;#39;re ready to distribute.&lt;/p&gt;

&lt;h2&gt;Demo&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s a screenshot from a NW.js app built with Ember for demonstration
purposes:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://cloud.githubusercontent.com/assets/1691398/6768192/536a6fde-d033-11e4-9375-e2f506c1c8c7.png" alt="screenshot"&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s a simple GitHub-flavored Markdown Editor that lets you create and preview
Markdown documents, and save them to disk.&lt;/p&gt;

&lt;p&gt;You can try it for yourself. Just download the application from the
following links for your platform, unzip, then double-click on &lt;code&gt;Markdown
Editor.app&lt;/code&gt; (Mac) or &lt;code&gt;Markdown Editor.exe&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mac OS X: &lt;a href="https://s3.amazonaws.com/dockyard-general/ember-nw-demo/markdown-editor-osx64.zip"&gt;markdown-editor-osx64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Windows:
&lt;a href="https://s3.amazonaws.com/dockyard-general/ember-nw-demo/markdown-editor-win64.zip"&gt;markdown-editor-win64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/brzpegasus/ember-nw-markdown"&gt;Source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a touch of user friendliness, the app even ships with your favorite
mascot:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mac:&lt;/em&gt;
&lt;img alt="Mac Icon" src="https://cloud.githubusercontent.com/assets/1691398/6853610/9ee8c52c-d3c2-11e4-971a-3472bfd35609.png" style="width: 600px; height: 205px;"&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Windows:&lt;/em&gt;
&lt;img alt="Win Icon" src="https://cloud.githubusercontent.com/assets/1691398/6853614/a32becc2-d3c2-11e4-9ed4-83d645825f4b.png" style="width: 114px; height: 312px;"&gt;&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;The main entry point to a NW.js application is an HTML page that you
specify in your project&amp;#39;s &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight json "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;my-app&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;main&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;dist/index.html&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On startup, NW.js will launch a new Chromium browser window,
then set the location to that starting page:
&lt;code&gt;file:///Users/brzpegasus/projects/my-app/dist/index.html#/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This does require that you set your &lt;code&gt;Ember.Router&lt;/code&gt;
&lt;a href="http://emberjs.com/api/classes/Ember.Location.html"&gt;location type&lt;/a&gt; to &lt;code&gt;hash&lt;/code&gt;. In Ember CLI,
this is a simple tweak to your &lt;code&gt;config/environment.js&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// config/environment.js&lt;/span&gt;
modules.&lt;span class="function"&gt;exports&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;(environment) {
  &lt;span class="keyword"&gt;var&lt;/span&gt; ENV = {
    &lt;span class="key"&gt;locationType&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;hash&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="comment"&gt;// Change this from 'auto' to 'hash'&lt;/span&gt;
    &lt;span class="comment"&gt;// ...&lt;/span&gt;
  };
};
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;From there on, you should feel quite at home and ready to develop your Ember app.&lt;/p&gt;

&lt;p&gt;Or maybe not quite yet.&lt;/p&gt;

&lt;h2&gt;A Bit About NW.js&lt;/h2&gt;

&lt;p&gt;NW.js tweaks Chromium and Node in order to
&lt;a href="https://github.com/nwjs/nw.js/wiki/How-node.js-is-integrated-with-chromium"&gt;integrate&lt;/a&gt;
the two worlds and make it possible for you to call Node modules from the client:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;console.log(location.href);   &lt;span class="comment"&gt;// Yup, we're in browser land&lt;/span&gt;

&lt;span class="keyword"&gt;var&lt;/span&gt; fs = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;fs&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);       &lt;span class="comment"&gt;// Call core Node modules&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; async = require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;async&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;// Or even third-party modules!&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;re used to Node and CommonJS, this &lt;code&gt;require&lt;/code&gt; function should look very
familiar, but it isn&amp;#39;t exactly the same. Here&amp;#39;s what it does:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;require&lt;/span&gt;(name) {
  &lt;span class="keyword"&gt;if&lt;/span&gt; (name == &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;nw.gui&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="keyword"&gt;return&lt;/span&gt; nwDispatcher.requireNwGui();
  &lt;span class="keyword"&gt;return&lt;/span&gt; global.require(name);
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So if you were to call &lt;code&gt;require(&amp;#39;nw.gui&amp;#39;)&lt;/code&gt;, you would get access to the
&lt;a href="https://github.com/nwjs/nw.js/wiki/Native-UI-API-Manual"&gt;Native UI Library&lt;/a&gt;
to do things like manipulating the window frame, adding menus, keyboard shortcuts, etc.
Otherwise, the function ends up calling &lt;code&gt;global.require&lt;/code&gt; to import Node modules.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;global&lt;/code&gt; is Node&amp;#39;s global namespace object. You can use it to retrieve
other global objects besides &lt;code&gt;require&lt;/code&gt;, such as &lt;code&gt;global.process&lt;/code&gt;.
However, many of them are made available directly on the &lt;code&gt;window&lt;/code&gt; object, so you can
reference them without prefix, just as you would in Node:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;console.log(window.process === global.process) &lt;span class="comment"&gt;// =&amp;gt; true&lt;/span&gt;
console.log(process.env.USER) &lt;span class="comment"&gt;// &amp;quot;brzpegasus&amp;quot;&lt;/span&gt;
console.log(process.platform) &lt;span class="comment"&gt;// &amp;quot;darwin&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Naming Conflicts&lt;/h2&gt;

&lt;p&gt;Modules written with ES2015 (&lt;a href="https://esdiscuss.org/topic/javascript-2015#content-3"&gt;previously, ES6&lt;/a&gt;)
syntax in your Ember app get transpiled into
AMD for today&amp;#39;s browsers. This is problematic because AMD also specifies a
&lt;code&gt;require&lt;/code&gt; function for loading modules. In Ember CLI, this is implemented via
&lt;a href="https://github.com/ember-cli/loader.js"&gt;ember-cli/loader.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By the time the app is done loading, any functionality that depends on
the native UI library or Node modules will break as the &lt;code&gt;require&lt;/code&gt;
function would have been redefined.&lt;/p&gt;

&lt;p&gt;You can get around this by saving a reference to Node&amp;#39;s &lt;code&gt;require&lt;/code&gt; before loading
any script. Once all scripts are loaded and executed, redefine &lt;code&gt;require&lt;/code&gt;
to work with both module systems. This is necessary as certain operations
will not work with the alias:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// Before loading any script&lt;/span&gt;
window.requireNode = require;

&lt;span class="comment"&gt;// After all scripts are loaded&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; requireAMD = require;

window.&lt;span class="function"&gt;require&lt;/span&gt; = &lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="keyword"&gt;try&lt;/span&gt; {
    &lt;span class="keyword"&gt;return&lt;/span&gt; requireAMD.apply(&lt;span class="predefined-constant"&gt;null&lt;/span&gt;, &lt;span class="local-variable"&gt;arguments&lt;/span&gt;);
  } &lt;span class="keyword"&gt;catch&lt;/span&gt; (error) {
    &lt;span class="keyword"&gt;return&lt;/span&gt; requireNode.apply(&lt;span class="predefined-constant"&gt;null&lt;/span&gt;, &lt;span class="local-variable"&gt;arguments&lt;/span&gt;);
  }
};
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;An Addon For All Your NW.js Needs&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve recently released an Ember CLI addon to help make this process
easier. Simply install &lt;a href="https://github.com/brzpegasus/ember-cli-node-webkit"&gt;ember-cli-node-webkit&lt;/a&gt;,
then start coding right away. All the configuration will be taken care
of for you, so no need to worry about &lt;code&gt;require&lt;/code&gt; naming conflicts.&lt;/p&gt;

&lt;p&gt;The addon can build your project, watch for changes, and reload the page in NW.js
during development. And when you&amp;#39;re ready to distribute, packaging is just
one command away. The packaging is a wrapper around the excellent
&lt;a href="https://github.com/mllrsohn/node-webkit-builder"&gt;node-webkit-builder&lt;/a&gt;
but the configuration is done automatically based on the addon&amp;#39;s
understanding of your app structure.&lt;/p&gt;

&lt;p&gt;I will not spend time talking about the addon in this blog post, but I
invite you to check out the &lt;a href="https://github.com/brzpegasus/ember-cli-node-webkit/blob/master/README.md"&gt;README&lt;/a&gt;
to get familiar with all the options that are at your disposal.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When we first set out to build a desktop app for a client project,
documentation on how to integrate NW.js with Ember was scarce. Even more
scarce was documentation on how to integrate it with Ember CLI. I hope
this post and this addon will provide some guidance to others down the
road.&lt;/p&gt;

&lt;p&gt;I&amp;#39;d love to share some code samples and discuss patterns you can adopt
to make your NW.js app more manageable and testable, but they&amp;#39;d be too
dense for this introductory blog post. However, you&amp;#39;ll be hearing more from me
on this topic in the future!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Testing when your frontend and backend are separated</title>
    <link rel="alternate" href="/2015/03/25/testing-when-your-frontend-and-backend-are-separated.html"/>
    <id>/2015/03/25/testing-when-your-frontend-and-backend-are-separated.html</id>
    <published>2015-03-25T00:00:00Z</published>
    <updated>2015-03-25T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The last project I worked on was an Ember app that had a Rails backend that was
deployed on Heroku. We had this application as a single repository, where there
were two folders at the root, &lt;code&gt;frontend&lt;/code&gt; and &lt;code&gt;backend&lt;/code&gt;. This was somewhat easy
to test on Travis-CI; it would check out the one repository, run the Rails
tests, start the Rails server, then run the ember tests that hit the Rails
server. This ended up being a pain to deploy, as when you changed the Rails app,
you were going to redeploy the Ember app, and vice-versa.  It also presented an
issue when deploying to Heroku, as &lt;a href="https://www.youtube.com/watch?v=ceFNLdswFxs&amp;amp;t=4103"&gt;we had to utilize &lt;code&gt;git subtree&lt;/code&gt; to push
the backend&lt;/a&gt;, which
contained the production assets.&lt;/p&gt;

&lt;p&gt;With the latest project I started, I&amp;#39;m keeping the backend and the Ember app
separate.  Since the apps are separate, they can be deployed independant of
each other. This made it a little bit harder to run integration tests against
the backend.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; while you can mock/stub your API in your Ember tests, it is
important to run integration tests against your backend regularly. When you
mock your API, it ends up giving you this false sense of security when it comes
to your Ember app being compatible. Your models may line up perfectly with your
mocks, but your mocks can fall out of date. To prevent this, at least when
running on your continuous integration (CI) server, you should have your Ember
app hit the backend server.&lt;/p&gt;

&lt;p&gt;To run end-to-end integration tests on Travis-CI, I added tasks to the
&lt;code&gt;.travis.yml&lt;/code&gt; file to clone the backend repository, install dependencies, and
run the server:&lt;/p&gt;
&lt;div class="highlight yml "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="key"&gt;language&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;node_js&lt;/span&gt;&lt;/span&gt;
&lt;span class="key"&gt;node_js&lt;/span&gt;:
  - &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;0.12&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class="key"&gt;sudo&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="content"&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class="key"&gt;cache&lt;/span&gt;:
  &lt;span class="key"&gt;directories&lt;/span&gt;:
    - &lt;span class="string"&gt;&lt;span class="content"&gt;node_modules&lt;/span&gt;&lt;/span&gt;
    - &lt;span class="string"&gt;&lt;span class="content"&gt;backend&lt;/span&gt;&lt;/span&gt;
    - &lt;span class="string"&gt;&lt;span class="content"&gt;vendor/bundle&lt;/span&gt;&lt;/span&gt;

&lt;span class="key"&gt;before_install&lt;/span&gt;:
  - &lt;span class="string"&gt;&lt;span class="content"&gt;npm config set spin false&lt;/span&gt;&lt;/span&gt;
  - &lt;span class="string"&gt;&lt;span class="content"&gt;npm install -g npm@^2&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;# Select the RVM version&lt;/span&gt;
  - &lt;span class="string"&gt;&lt;span class="content"&gt;rvm use 2.2.1 --install --binary --fuzzy&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;# Clone the repository if isn't cloned&lt;/span&gt;
  - &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;[ -d backend/.git ] || git clone git@github.com:&amp;lt;backend-repo&amp;gt; backend&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  - &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;cd backend&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;# Reset the repo so we can have a conflict-less pull&lt;/span&gt;
  - &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;git reset --hard&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  - &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;git clean -f&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  - &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;git pull&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;# Install dependencies&lt;/span&gt;
  - &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;bundle install --path=../vendor/bundle --jobs=3 --retry=3 --deployment&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;# Run the server&lt;/span&gt;
  - &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;RAILS_ENV=test ./bin/rails s &amp;amp;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;# Wait for the Rails app to start&lt;/span&gt;
  - &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;sleep 5&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  - &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;cd ..&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class="key"&gt;install&lt;/span&gt;:
  - &lt;span class="string"&gt;&lt;span class="content"&gt;npm install -g bower&lt;/span&gt;&lt;/span&gt;
  - &lt;span class="string"&gt;&lt;span class="content"&gt;npm install&lt;/span&gt;&lt;/span&gt;
  - &lt;span class="string"&gt;&lt;span class="content"&gt;bower install&lt;/span&gt;&lt;/span&gt;

&lt;span class="key"&gt;script&lt;/span&gt;:
  - &lt;span class="string"&gt;&lt;span class="content"&gt;npm test&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that I cached both the backend and bundle directories to speed up the time
it takes to get the backend running. Since the backend is cached, we only have
to pull the new code.&lt;/p&gt;

&lt;p&gt;In this example, we have a Rails app with no database, but it would be pretty
easy to add one. The only other required step was to add an SSH private key to
the Travis settings, since you would have two separate deploy keys. That would
prevent you from cloning the backend repository from the frontend test.  There
should be nothing holding you back from performing end to end tests when you
have separate repositories!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rubyists Guide to Ember.js Dependencies</title>
    <link rel="alternate" href="/2015/03/24/rubyists-guide-to-ember-dependencies.html"/>
    <id>/2015/03/24/rubyists-guide-to-ember-dependencies.html</id>
    <published>2015-03-24T00:00:00Z</published>
    <updated>2015-03-24T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;One of the early hurdles a Ruby developer faces when working on an Ember.js application is dependency management. A popular mechanism for managing a Ruby application’s dependencies is the &lt;a href="http://bundler.io/gemfile.html"&gt;Gemfile&lt;/a&gt; provided by &lt;a href="http://bundler.io/"&gt;Bundler&lt;/a&gt;. Including a library is as easy as declaring it in the Gemfile and running &lt;code&gt;bundle install&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# Gemfile&lt;/span&gt;
source &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;https://rubygems.org&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
gem &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;rails&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;~&amp;gt; 4.2.0&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For better or worse, there is no dominant, single package manager in JavaScript. Ember applications, and more specifically, those running &lt;a href="http://www.ember-cli.com/"&gt;Ember-CLI&lt;/a&gt;, rely on two package managers: &lt;a href="http://bower.io/"&gt;Bower&lt;/a&gt; for client-side libraries and &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; for server-side libraries.&lt;/p&gt;

&lt;p&gt;In this post, I&amp;#39;ll provide a basic dependency management primer for
those moving from Ruby to JavaScript.&lt;/p&gt;

&lt;h1&gt;npm&lt;/h1&gt;

&lt;p&gt;Ember-CLI uses npm to manage internal dependencies. npm resembles RubyGems, in so far as it allows you to install and manage third-party libraries, which in this case, are Node.js programs.&lt;/p&gt;

&lt;h2&gt;package.json&lt;/h2&gt;

&lt;p&gt;Libraries for npm are referred to as “packages.” Each package has a &lt;code&gt;package.json&lt;/code&gt; file which lists the dependencies of the library itself. In this regard, the &lt;code&gt;package.json&lt;/code&gt; is analogous to a RubyGem’s &lt;code&gt;gemspec&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;.npmrc&lt;/h2&gt;

&lt;p&gt;You can configure how node packages get installed via the
&lt;a href="https://docs.npmjs.com/files/npmrc"&gt;.npmrc file&lt;/a&gt;. You may have one
globally, per user (&lt;code&gt;~/.npmrc&lt;/code&gt;), or per project.&lt;/p&gt;

&lt;h2&gt;Installing dependencies&lt;/h2&gt;

&lt;p&gt;To install an npm package, run &lt;code&gt;npm install [package-name]&lt;/code&gt; from the
command line.&lt;/p&gt;

&lt;p&gt;This will either install the library and it&amp;#39;s dependencies
into your current working directory or in one of its parent directories. Here&amp;#39;s how it works: if there is a &lt;code&gt;node_modules/&lt;/code&gt; or &lt;code&gt;package.json&lt;/code&gt; in any directory above the current working directory, packages will be installed into that directory. Otherwise, calling &lt;code&gt;npm install [package-name]&lt;/code&gt; creates a &lt;code&gt;node_modules/&lt;/code&gt; directory in your current working directory and installs the packages there.&lt;/p&gt;

&lt;p&gt;This is a slightly different mental model for Rubyists who are not used to installing gems on a per project basis; gems are generally installed into version-specific Ruby directories with the more popular version managers like &lt;a href="https://github.com/sstephenson/rbenv"&gt;rbenv&lt;/a&gt; or &lt;a href="https://rvm.io/"&gt;RVM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s also possible to install packages globally using the &lt;code&gt;--global&lt;/code&gt; flag when installing. This installs the package in your &lt;code&gt;usr/local/lib/&lt;/code&gt; directory by default. These packages typically contain executable files and are used via the command line (such as Ember-CLI).&lt;/p&gt;

&lt;p&gt;Your dependencies will likely have dependencies. These get installed within a &lt;code&gt;node_modules/&lt;/code&gt; directory in the given package. It&amp;#39;s a little strange the first time you navigate into a &lt;code&gt;node_modules/package-name/&lt;/code&gt; only to find another &lt;code&gt;node_modules/&lt;/code&gt; directory, but that&amp;#39;s what that is. You’ll notice a &lt;code&gt;node_modules/&lt;/code&gt; directory for dependencies of global packages as well if you look in the &lt;code&gt;usr/local/lib/&lt;/code&gt; directory where global packages live.&lt;/p&gt;

&lt;p&gt;One last thing to note regarding npm installations: npm caches the
libraries you pull down to prevent you from having to download
libraries that are already on your system. You&amp;#39;ll find that cache:
&lt;code&gt;~/.npm/&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;Bower&lt;/h1&gt;

&lt;p&gt;While you&amp;#39;ll use npm to manage your server-side Node.js dependencies, you’ll use Bower for managing front-end assets, such as JavaScript, HTML, CSS, image, and font files.&lt;/p&gt;

&lt;h2&gt;.bowerrc&lt;/h2&gt;

&lt;p&gt;Bower itself is an npm package. Its libraries are referred to as “components” and the end user can configure their installations via a &lt;code&gt;.bowerrc&lt;/code&gt; file. This file specifies where dependent components will be installed, the URL where the component will be registered (its registry), and the JSON file used to define the component (&lt;code&gt;bower.json&lt;/code&gt; by default) among other things.&lt;/p&gt;

&lt;h2&gt;bower.json&lt;/h2&gt;

&lt;p&gt;The &lt;a href="http://bower.io/docs/creating-packages/#bowerjson"&gt;&lt;code&gt;bower.json&lt;/code&gt;&lt;/a&gt; file resembles the &lt;a href="http://guides.rubygems.org/specification-reference/"&gt;gemspec&lt;/a&gt; file you find in Ruby gems. It contains the library metadata, such as the name, version, dependencies, and development dependencies for the library.&lt;/p&gt;

&lt;p&gt;As we mentioned, components can be searched for via registries. The registry matches the name of a component with the endpoint at which it’s hosted. &lt;a href="http://bower.io/search/"&gt;Bower.io/search&lt;/a&gt; closely resembles &lt;a href="https://rubygems.org/gems"&gt;rubygems.org&lt;/a&gt; in this way.&lt;/p&gt;

&lt;h2&gt;Installing dependencies&lt;/h2&gt;

&lt;p&gt;When you install a Bower component via &lt;code&gt;bower install [component_name]&lt;/code&gt;, the repository will be cached locally to expedite any future installations of the component. In case you’re curious, the bower cache location is: &lt;code&gt;~/.cache/bower/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unlike npm, Bower components are installed &amp;quot;flat&amp;quot; as opposed to in a hierarchical manner; all of your project&amp;#39;s components (and their dependencies) will be installed into &lt;code&gt;bower_components/&lt;/code&gt; directory, by default. For example, if one of your components is dependent on the &lt;code&gt;underscore.js&lt;/code&gt; library, both will sit side-by-side in the &lt;code&gt;bower_components/&lt;/code&gt; directory (remember, with npm, dependencies of dependencies are continually nested in their parent&amp;#39;s directory within a &lt;code&gt;node_modules/&lt;/code&gt; directory).&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Here&amp;#39;s a quick wrap-up of the analogous files between Ruby and the JS
package managers we discussed:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Ruby&lt;/th&gt;
&lt;th&gt;JS (npm, server-side)&lt;/th&gt;
&lt;th&gt;JS (Bower, client-side)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Term for external library&lt;/td&gt;
&lt;td&gt;&amp;quot;Gem&amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;Package&amp;quot;&lt;/td&gt;
&lt;td&gt;&amp;quot;Component&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;End-user configuration file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.gemrc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.npmrc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.bowerrc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Per-library configuration file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*.gemspec&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bower.json&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cache directory&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/.gem/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/.npm/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/.cache/bower/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;As ES2015 (formerly known as &amp;quot;ES6&amp;quot;) becomes more prevalent and JavaScript code becomes more
modular and better for passing around, dependency management grows in
importance. Hopefully this quick primer will clear up some
confusion Rubysists have as they transition from working with the
Gemfile to working with the package managers JavaScript offers.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Beginner’s mentality</title>
    <link rel="alternate" href="/2015/03/23/beginner-mentality.html"/>
    <id>/2015/03/23/beginner-mentality.html</id>
    <published>2015-03-23T00:00:00Z</published>
    <updated>2015-03-23T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;When making any product, the experts are clearly the best people for the job. But experts have one significant blind spot - their extensive knowledge of the system makes them less likely to see the potential problems a novice would encounter. Anyone who is very familiar with a system, a discipline, or a product has put some distance between them and their beginning level challenges that cause them to develop an &lt;a href="http://c4ed.lib.kmutt.ac.th/sites/default/files/HowLearningWorks-Ambrose.pdf"&gt;expert blind spot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am sure you are familiar with this situation: you’re invited (or invite yourself) to an event at a university campus. You arrive a bit earlier than you needed, so you can orient yourself in the unfamiliar space. The map on your phone is only accurate to the nearest block, so you get a campus map and try to find room 41-B in the Humanities building named after someone important. You feel stupid.&lt;/p&gt;

&lt;p&gt;This is what campus maps often look like:
&lt;img src="http://imgur.com/Aulbb3t.jpg" alt="An old map showing a campus as an island surrounded by unknown waters"&gt;&lt;/p&gt;

&lt;p&gt;The reason most outsiders find campus maps confusing and difficult to use is the shift in the frame of reference. &lt;/p&gt;

&lt;p&gt;For someone who lives or works on campus, the frame of reference is relative to the borders and shape of the universe that is the university (or corporate, or hospital) campus. They might consider their office to be “in the far North corner” relative to the outline of the campus on a map. Or, they might think of themselves as “right in the middle of the Art Department”. The Art Department here is amorphous: it’s something that may either span two city blocks, or half of a floor in a physical building.&lt;/p&gt;

&lt;p&gt;For an outsider, the frame of reference is still the surrounding landscape. They may not know precisely when they entered the school campus (there is no painted border on the ground) or that they are in its top left corner. The “you are here” marker on the campus map helps, but it still takes a while to adjust to the landmarks differentiated by department, not by road or city block. To find a building, they are forced to adapt to a new system of coordinates. &lt;/p&gt;

&lt;h2&gt;Work with an outsider&lt;/h2&gt;

&lt;p&gt;I often see this situation reflected in the websites of large institutions. When someone very close to an institution thinks of how their web presence may be organized or used, they inevitably do so with the influence of all the expertise they have. They can’t help it - they “live” inside the campus, and they are good at what they do.&lt;/p&gt;

&lt;p&gt;There are many examples of this kind of insider thinking: organizing content by internal structure (instead of user need), breaking up a university website into Athletics, Academics, and Arts (which one contains the event I want to attend?) or assuming that a typical user has even a basic understanding of specialized terminology and concepts.&lt;/p&gt;

&lt;p&gt;This is by no means a treaty against specialized knowledge and perspective. The insider knowledge of an industry expert makes a product good, their know-how makes it work. But the outside perspective of a novice-expert truly helps make a product findable and usable.&lt;/p&gt;

&lt;p&gt;To attract new customers or visitors, a product needs to make sense to someone unfamiliar with it in their own broader frame of reference. To ask the right questions, to establish user goals and needs, and to judge the effectiveness and clarity of a product, we need both the insider and the outsider perspective.&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgc" target="_blank" href="http://wickedgoodember.com/">Wicked Good Ember Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--swift" target="_blank" href="http://www.meetup.com/Boston-Swift/">Boston Swift</a><a class="footer__event--uxhh" target="_blank" href="http://www.uxhappyhour.com/bos">UX Happy Hour</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2015/03/31/helping-our-engineers.html"><strong>Helping Our Engineers</strong><h6 class='footer-desc'>Writing Pseudo-Code as UX Developers</h6></a>
<a class="footer__post" href="/2015/03/27/pluralize-your-words-with-ember-pluralize.html"><strong>Pluralize Your Word(s) With ember-pluralize</strong><h6 class='footer-desc'>Introducing a pluralizing addon based on a given count.</h6></a>
<a class="footer__post" href="/2015/03/26/bringing-ember-to-the-desktop-part.html"><strong>Bringing Ember to the Desktop with NW.js</strong><h6 class='footer-desc'></h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>