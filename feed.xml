<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-c23d5f09.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/scratch" class="work-nav-item"><strong class='work-nav-item__title'>Scratch Wireless</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/scratch" class="work-nav-item"><strong class='work-nav-item__title'>Scratch Wireless</strong><p>Never pay another penny for smartphone service.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-03-16T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Thriving in a New Work Environment</title>
    <link rel="alternate" href="/2015/03/16/thriving-in-a-new-work-environment.html"/>
    <id>/2015/03/16/thriving-in-a-new-work-environment.html</id>
    <published>2015-03-16T00:00:00Z</published>
    <updated>2015-03-16T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Thriving in a New Work Environment&lt;/h1&gt;

&lt;h2&gt;My Background&lt;/h2&gt;

&lt;p&gt;If you asked me a month and a half ago when I was living and working near Philadelphia as a Director of digital communications, “Cory what are the chances that you will be in Boston working for a new company?”. I would have said you were crazy and I couldn’t see myself leaving the Philly area unless a company blew me away with their culture and work environment. How would I watch my Sixers, Eagles, and Phillies games if I left the Philly area?&lt;/p&gt;

&lt;p&gt;Then in a week and a half frenzy I was moving up to Boston after it had just snowed another two feet in Boston. A day after that I had moved in to my new apartment and it was my first day at DockYard as a Junior UX Developer!&lt;/p&gt;

&lt;p&gt;Fast forward a week and I had met 16 new DockYard co-workers (who, yes, are crazy smart) and was introduced to a new coding/project management environment. I was then challeneged to learn how to  structure my SCSS with the
&lt;a href="https://github.com/dockyard/styleguides/blob/master/uxd/class-naming-conventions.md"&gt;BEM&lt;/a&gt;
class naming conventions and rules for Scalable and Modular Architecture for CSS
(&lt;a href="https://github.com/dockyard/styleguides/blob/master/uxd/beginning-a-project.md"&gt;SMACSS&lt;/a&gt;), all of this  was a tidal wave of new information and personally a different way of thinking.&lt;/p&gt;

&lt;h2&gt;It’s Not All About You&lt;/h2&gt;

&lt;p&gt;I would love to say that the sole reason that I’ve been able to handle all the new information is that I am purely that awesome. But in reality I could not have gotten through any of this without the work environment DockYard has implemented.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://reefpoints.dockyard.com/2015/01/16/joining-dockyard.html"&gt;Estelle&lt;/a&gt; and
&lt;a href="http://reefpoints.dockyard.com/office/2013/07/09/first-month-at-dockyard.html"&gt;Marin&lt;/a&gt; explain how “Wicked Good” the DockYard team is and do so better than I can, but from my experience after a month of working here it is clear that everyone wants to help each other (new guy included). If you need help and you’re not approaching other team members with questions, you might find yourself out of place.&lt;/p&gt;

&lt;p&gt;This type of atmosphere is exactly what you need for soaking in all the information you receive at a new job. You will always have questions and uncertainties in a new environment like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Am I meeting their expectations&lt;/li&gt;
&lt;li&gt;Am I messing this up&lt;/li&gt;
&lt;li&gt;Will I look stupid if I ask this question&lt;/li&gt;
&lt;li&gt;What will they think if...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is inevitable to have these questions when you are in a new work place and you should have them, don&amp;#39;t be afraid to solve those concerns by asking productive questions! The new company you just joined would rather be asked a stupid question then see you running in circles not willing to interact with the team.&lt;/p&gt;

&lt;p&gt;I have asked many questions in my first month here and not once has someone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Said no&lt;/li&gt;
&lt;li&gt;Told me there was no point to my question&lt;/li&gt;
&lt;li&gt;Looked down on me for not knowing something&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is a testament to DockYard but also should be how any team should be run, especially web development teams.&lt;/p&gt;

&lt;h2&gt;Success Is Ultimately Decided By You&lt;/h2&gt;

&lt;p&gt;Now it’s not all up to the team you are joining to make you successful, you have to be willing to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Put time into reading about things you did not understand&lt;/li&gt;
&lt;li&gt;Research tools/techniques that you see yourself using in the future&lt;/li&gt;
&lt;li&gt;Be open minded with new development techniques and a new project management process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are successful with goals/projects your boss gives you, then you are meeting your employers standards. In the web development line of work in order to thrive in an environment you should be going above what is expected of you.&lt;/p&gt;

&lt;p&gt;When coworkers look at your work they should be impressed and surprised with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The product you are presenting&lt;/li&gt;
&lt;li&gt;How quick and thorough you are when learning new things&lt;/li&gt;
&lt;li&gt;Contributions you make to current projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you are getting those type of reactions to the list above you are thriving in the new work environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;quot;Thriving in a new work environment comes from working harder and more efficiently than expected&amp;quot;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Be willing to be one of the first people at the office and leave later than most, you want to soak in as much information as you can. When you are given new things to learn tackle them immediately.&lt;/p&gt;

&lt;p&gt;During all the chaos of starting a new job stay organized and keep notes of things you are learning, you will probably not remember that Git command after one or two uses.&lt;/p&gt;

&lt;p&gt;If you find yourself in a new work environment and feel overwhelmed justremember to ask as many questions as you can and work hard to understand the solutions your team provides you.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ask good questions</title>
    <link rel="alternate" href="/2015/03/11/ask-good-questions.html"/>
    <id>/2015/03/11/ask-good-questions.html</id>
    <published>2015-03-11T00:00:00Z</published>
    <updated>2015-03-11T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In an &lt;a href="http://reefpoints.dockyard.com/2015/02/11/managing-the-conversation.html"&gt;earlier post&lt;/a&gt;, I focused on the challenges of leading a good user interview. Today, I’d like to focus on one rule about asking questions to get reliable results.&lt;/p&gt;

&lt;h2&gt;Ask open-ended questions.&lt;/h2&gt;

&lt;p&gt;Otherwise, the responses you get will be either biased or useless. &lt;/p&gt;

&lt;h2&gt;Let&amp;#39;s look at some interview questions (from worst to best)&lt;/h2&gt;

&lt;p&gt;They appear in order: from least useful to most useful in getting you good responses. For context, imagine you’re doing some user research and you&amp;#39;re in the middle of a project to design some widgets.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;“You like this widget in green, right? We picked green because it’s calming.”&lt;/strong&gt;
This question is so bad it&amp;#39;s grotesque, but it may still happen to novice interviewers. Not only does the question suggest a specific answer (you like it!), but it also gives reasons why that answer might be the right one (green is calming!) The interviewee is not likely to share a genuine opinion with this much pressure to say “yes, I love it in green!”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;“How do you feel about this widget? Do you like its color?”&lt;/strong&gt; Slightly better, but still of limited use. By suggesting a response and allowing the user to narrow it down to a binary yes/no, we’re getting a very limited amount of information back. In addition, likes and dislikes move the conversation into a potentially awkward area. Some people may not be comfortable telling you they don’t like something you made.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;“How do you feel about this widget? What do you think it does?”&lt;/strong&gt; Now, this is better. We are opening up to qualitative responses with lots of detail. By not suggesting options for what an answer might be, we are more likely to get unexpected, valuable results.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;“Talk me through what you see here.”&lt;/strong&gt; A super open-ended question, useful in the beginning of an interview. Do they even see the widget?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;“How would you normally approach (widget-related task)?”&lt;/strong&gt; This seems to be the best opening question for a user interview. While not appropriate for all circumstances, it is great at opening up areas you may not have considered to be in the scope of the project. This question can help reframe the problem you are working to solve.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;“How did you last (widget-related task)?”&lt;/strong&gt; Past behavior is a more reliable indicator than a behavior people might describe as their normal. So, this re-phrasing can encourage more honest answers. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may notice that it takes more  time to ask open-ended questions. You may trigger your interviewee to share a lot of extra information, not just a concise answer to the question you asked. You may have to follow up with more questions to get to the “why” behind a certain behavior. But with the increased effort comes a better result. The responses are real. They are not influenced by your opinion about the thing you’re asking, because you’ve kept that opinion outside the questions. These responses present a more nuanced picture of your users’ needs and environment.&lt;/p&gt;

&lt;p&gt;I condensed this principle from conference talks, books and workshops I attended over the past few years. Two sources in particular: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/michelleyaiser"&gt;Michelle Yaiser&amp;#39;s&lt;/a&gt; talk on user research at &lt;a href="http://uxeast.org/"&gt;UX Camp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://shop.npr.org/sound-reporting"&gt;Sound reporting : the NPR guide to audio journalism and production&lt;/a&gt;. This book is outside of the usual UX Design reading list, but it&amp;#39;s useful for interviewing skills. It shows how much  effort and consideration it takes a journalist to gather information in a neutral, ethical way.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;#39;s almost always a better investment of your time to conduct a few in-depth, “difficult” and neutral interviews, than to rush many interviewees through surface-level questions. This is especially true at the beginning of a project, when more design options are open. Your effort to keep the process unbiased will yield quality results, and quality wins.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>DockYard is now accepting staff augmentation Ember.js contracts</title>
    <link rel="alternate" href="/2015/03/09/dockyard-is-now-accepting-staff-augmentation-ember-js-contracts.html"/>
    <id>/2015/03/09/dockyard-is-now-accepting-staff-augmentation-ember-js-contracts.html</id>
    <published>2015-03-09T00:00:00Z</published>
    <updated>2015-03-09T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Over the past three years DockYard has primarily taken on &amp;quot;greenfield&amp;quot;
projects, where we are responsible for building applications from
scratch through design, development, and launch. Starting today we&amp;#39;re
adding Ember.js Staff Augmentation to the services we provide to our
clients.&lt;/p&gt;

&lt;p&gt;If you are looking to add an Ember.js expert to help your team you
should contact us. Our entire engineering team is extremely experienced
in Ember.js application development, Ember.js best practices, and Ember.js Test Driven
Development. We can help your team finish existing features, guide
your team on how to properly build an Ember.js application, and help you
hit your delivery deadline.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://dockyard.com/contact"&gt;Visit our contact page and choose
&amp;quot;Staff Augmentation&amp;quot; for the Budget&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>EmberConf 2015 Day 2</title>
    <link rel="alternate" href="/2015/03/04/ember-conf.html"/>
    <id>/2015/03/04/ember-conf.html</id>
    <published>2015-03-04T00:00:00Z</published>
    <updated>2015-03-04T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Fault Tolerant UX by Dan Gebhardt&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/dgeb"&gt;@dgeb&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users should be shielded from any application issues that are encountered&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Transaction UX&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Atomic: all or nothing

&lt;ul&gt;
&lt;li&gt;Ex. if a user fills out a form your app should save all the data, not just some.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Consistent: move between different states&lt;/li&gt;
&lt;li&gt;Isolated: allows concurrent changes&lt;/li&gt;
&lt;li&gt;Durable: changes are persisted&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Apps MUST NOT violate the rules of transactional UX or you are violating the users trust&lt;/h3&gt;

&lt;h2&gt;Forgiving User Experience&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fault Tolerant UX --&gt; Forgiving UX&lt;/li&gt;
&lt;li&gt;Transitional experience: to persist data that has not yet be saved, but in the process of being edited&lt;/li&gt;
&lt;li&gt;Undo/redo&lt;/li&gt;
&lt;li&gt;Offline support&lt;/li&gt;
&lt;li&gt;Asynchronous interface (non-blocking)

&lt;ul&gt;
&lt;li&gt;user can make changes as quickly as possible (changes can be queued up and synced at your apps convenience)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Engineering Fault Tolerant UX&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ember provides simple elgant patterns for building a consistent UX&lt;/li&gt;
&lt;li&gt;Similarly, ember data provides durable UX&lt;/li&gt;
&lt;li&gt;Ember data requires customization (extra code) to provide atomic and isolated code&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a href="https://github.com/orbitjs"&gt;Orbit&lt;/a&gt;&lt;/h2&gt;

&lt;h3&gt;Orbit application patterns&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Client first development&lt;/li&gt;
&lt;li&gt;Pluggable sources&lt;/li&gt;
&lt;li&gt;Data synchronization&lt;/li&gt;
&lt;li&gt;Editing contexts&lt;/li&gt;
&lt;li&gt;Undo/redo&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="https://github.com/orbitjs/ember-orbit"&gt;ember-orbit&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Provides a store with synchronous and asynchronous methods&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Aligning Ember with Web Standards by Matthew Beale&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/mixonic"&gt;@mixonic&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Standards&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The JS standardization process is about to change: ES5, ES6, ES2015!&lt;/li&gt;
&lt;li&gt;Standards Process

&lt;ul&gt;
&lt;li&gt;5 stages - strawman, proposal(polyfills), draft(experimental), candidate(compliant), finished(shipping)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://remysharp.com/2010/10/08/what-is-a-polyfill"&gt;Polyfill&lt;/a&gt;: A polyfill is a piece of code (or plugin) that provides the technology that you expect the browser to provide natively. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2 major standards groups:

&lt;ul&gt;
&lt;li&gt;WHATWG + W3C (html / dom related)&lt;/li&gt;
&lt;li&gt;TC39 + Ecma International (promises, classes, for loops, etc)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Aligning with standards is not a one time event. It is ongoing!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Why Standards?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The goal is productivity&lt;/li&gt;
&lt;li&gt;Standards are portable, reflect best preactices, and endure &lt;/li&gt;
&lt;li&gt;Participants win&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;ES5 -&gt; ES2015&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;New API for maps&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Proxies&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Babel&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Babel will turn your ES6+ code into ES5 friendly code

&lt;ul&gt;
&lt;li&gt;Enables new syntax (fat arrow, let) , APIs (map, set), not everything&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Aligning Ember&amp;#39;s Object Model&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; is this feature: stable? a good pattern? implemented correctly? implemented performantly?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;ES Classes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Three new tools: class, extend, super&lt;/li&gt;
&lt;li&gt;More gotchas: 

&lt;ul&gt;
&lt;li&gt;setUnknownProperty &lt;/li&gt;
&lt;li&gt;Transpiler output&lt;/li&gt;
&lt;li&gt;New syntax&lt;/li&gt;
&lt;li&gt;Changes in way that super behaves&lt;/li&gt;
&lt;li&gt;Mixins&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember: standards are a two-way street!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.201-created.com/ember-community-survey-2015"&gt;Ember Community Survey&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Growing Ember One Tomster at a Time by Jamie White&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/jgwhite"&gt;@jgwhite&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How did a tech community come to be so vibrant? How can we continue?&lt;/p&gt;

&lt;h2&gt;1. The Tomster&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Representation of productivity and friendliness&lt;/li&gt;
&lt;li&gt;Tomster wore different hats

&lt;ul&gt;
&lt;li&gt;Custom tomsters&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Good defaults

&lt;ul&gt;
&lt;li&gt;Having a friendly mascot makes things easier.&lt;/li&gt;
&lt;li&gt;“Ambition” and “friendliness” is hard to juxtapose&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Composing concepts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;2. Language&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tomster is a tool. Productivity and friendliness implicitly part of conversation

&lt;ul&gt;
&lt;li&gt;Words stick; the right words enable conversations&lt;/li&gt;
&lt;li&gt;“hack” is not a good vocabulary word - negative connotation &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;3. User Interface&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Programming language and documentation with good user interface&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;4. Hackability&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Parts have to be accesible - has to feel hackable.

&lt;ul&gt;
&lt;li&gt;Tomster was not overly done.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;5. Roles&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Many specialisms in Ember Community: documenteer, student, mentor, critic, explorer, and many more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Community building is a design and engineering challenge&lt;/p&gt;

&lt;h1&gt;Interaction Design with Ember 2.0 and Polymer by Bryan Langslet&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/blangslet"&gt;@blangslet&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The web browser is the largest app runtime in the world, and will continue to grow&lt;/li&gt;
&lt;li&gt;Every device has to be connected to the web&lt;/li&gt;
&lt;li&gt;Web frameworks and toolkits are getting closer to native performance everyday &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;quot;How can I - one person with a laptop - leverage my time as powerfully as I possibly can, every minute I work?&amp;quot;&lt;/p&gt;

&lt;h2&gt;Ember-Flow&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A paradigm shift for web interaction design&lt;/li&gt;
&lt;li&gt;The goal: to blur the lines between native and web applications&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Web Components&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extends the browser itself

&lt;ul&gt;
&lt;li&gt;Polymer components extend a base component&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Encapsulation&lt;/li&gt;
&lt;li&gt;Declarative&lt;/li&gt;
&lt;li&gt;True reusability/portability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Ember vs. Polymer Use Cases:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ember: developer productivity, conventions&lt;/li&gt;
&lt;li&gt;Ember: community&lt;/li&gt;
&lt;li&gt;Ember: World-class routing and state management&lt;/li&gt;
&lt;li&gt;Polymer: constantly pushing the web forward&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Web Animations API&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Has the best of both CSS and javascript animations&lt;/li&gt;
&lt;li&gt;Web animations run outside of the main thread and can be accelerated on the GPU&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="https://github.com/blangslet/treasure-hunt"&gt;Treasure Hunt Demo Application&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&amp;quot;Demonstrates an experimental integration between ember.js routing and Polymer&amp;#39;s core-animated-pages component to create beautiful inter-state animated transitions&amp;quot;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Building Applications for Custom Environments with Ember CLI by Brittany Storoz&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/brittanystoroz"&gt;@brittanystoroz&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Ember CLI&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Everyones favorite command line tool&lt;/li&gt;
&lt;li&gt;Build organized ember apps quickly&lt;/li&gt;
&lt;li&gt;Fills huge void in toolset for JS devs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Ember CLI Addons&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extend ember-cli beyond core fucntionality&lt;/li&gt;
&lt;li&gt;Follow standard npm conventions&lt;/li&gt;
&lt;li&gt;Easy to create &amp;amp; install:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ember addon name-of-your-addon&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ember install:addon name-of-your-addon&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Firefox OS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Requirements that Ember CLI could not provide

&lt;ol&gt;
&lt;li&gt;Generate and validate a manifest file (same concept as package.json)&lt;/li&gt;
&lt;li&gt;UI components that mimic OS interface&lt;/li&gt;
&lt;li&gt;Publish to Firefox marketplace&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Ember CLI Addon was born to fill those requirements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;1st Requirement: Generating The Manifest&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Creating Blueprints

&lt;ul&gt;
&lt;li&gt;rules for generating common code and file structures:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ember generate blueprint name-of-blueprint&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;2nd Requirement: FirefoxOS UI (&lt;a href="https://github.com/gaia-components/gaia-tabs"&gt;Gaia&lt;/a&gt;)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Building components
&lt;code&gt;bower install gaia-components/gaia-stubs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2 responsibilities:

&lt;ul&gt;
&lt;li&gt;including dependencies and creating the addon&lt;/li&gt;
&lt;li&gt;making both available to the consuming application&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Components Review&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Dependencies:

&lt;ul&gt;
&lt;li&gt;bower install within addon&lt;/li&gt;
&lt;li&gt;bower install withing consuming logic&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Component logic

&lt;ul&gt;
&lt;li&gt;create component&lt;/li&gt;
&lt;li&gt;export components to consuming aplication&lt;/li&gt;
&lt;li&gt;define component template&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Validation &amp;amp; Publishing

&lt;ul&gt;
&lt;li&gt;creating commands for control over when these things happen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;includedCommands&lt;/code&gt; hook: returns object of commands which are found inside &lt;code&gt;lb/commands&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ember help&lt;/code&gt; lists out information about available add-on commands. And lots more useful info.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Building Real-time Applications with Ember by Steve Kinney&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/stevekinney"&gt;@stevekinney&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integrating browser functionality and third party code into our applications. In this case, WebSockets.&lt;/li&gt;
&lt;li&gt;What is a WebSocket Used for? 

&lt;ul&gt;
&lt;li&gt;Collaboration, analytics dashboards, prompting user to upgrade application&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Can I actually use WebSockets? 

&lt;ul&gt;
&lt;li&gt;For the most part, yes (some earlier version of IE not supported)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Socket.io -&gt; library for Node&lt;/li&gt;
&lt;li&gt;Faye  -&gt; simple pub/sub messaging&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Approach #1: Use Standalone Controller&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Somewhat limited because it only works between controllers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Approach #2: Dependency Injection with Services&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ember generate service websocket&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Declare where you want to inject it inside the Initializer&lt;/li&gt;
&lt;li&gt;Inside controller: &lt;code&gt;websocket: Ember.inject.service()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Approach #3 Using Socket.io&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Socket.io is both a server and client side library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="bit.ly/js-poll"&gt;What is your favorite thing about JavaScript?&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Minitalks!&lt;/h1&gt;

&lt;h2&gt;1. Measuring Performance with User Timing API by Bill Heaton&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/pixelhandler"&gt;@pixelhandler&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Measuring the differences in template rendering speeds between Ember.js v1.8.1 w/Handlebars v1.3 and Ember.js v1.10.0 w/HTMLBars&lt;/li&gt;
&lt;li&gt;Check out his findings on &lt;a href="http://pixelhandler.com/posts/measuring-performance-with-user-timing-api-in-an-ember-application"&gt;blog!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;2. &lt;code&gt;ember-islands&lt;/code&gt; by Mitch Lloyd&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/mitchlloyd"&gt;@mitchlloyd&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mitchlloyd/ember-islands"&gt;&lt;code&gt;ember-islands&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Render Ember components UJS-style to achieve &amp;quot;Islands of Richness&amp;quot;. You can arbitrarily render Ember components in the body of the page and they will all be connected to the same Ember app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;3. Ember Testing with Chemistry Dog by Liz Bailey&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/lizzerdrix"&gt;@lizzerdrix&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Migration from Rails to Ember&lt;/li&gt;
&lt;li&gt;Ember does not provide as much documentation on testing&lt;/li&gt;
&lt;li&gt;Would love to help make Ember more approachable to beginners&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;4. Running C++ in ember-cli with Emscripten by Michael Nutt&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/mnutt"&gt;@mnutt&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/movableink/ember-cli-emscripten"&gt;&lt;code&gt;ember-cli-emscripten&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Allows you to add C or C++ to your ember app, then require the exposed functions and classes.&lt;/li&gt;
&lt;li&gt;Fibonacci sequence demo!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;5. Ember Observer by Kate Gengler&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/kategengler"&gt;@kategengler&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberobserver/client"&gt;Ember Observer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gives addons a score out of 10&lt;/li&gt;
&lt;li&gt;pulls hourly from npm and Github&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;6. CSS is Hard by Erik Bryn&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ebryn"&gt;@ebryn&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ebryn/ember-component-css"&gt;&lt;code&gt;ember-component-css&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;namespaces our component styles automatically!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Physical Design by Edward Faulkner&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/ef4"&gt;@ef4&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Computers are so abstract. Possibilities are endless, only hindered by your imagination.&lt;/li&gt;
&lt;li&gt;Constrained by physics&lt;/li&gt;
&lt;li&gt;Googles material design spec

&lt;ul&gt;
&lt;li&gt;does not break rules of physics&lt;/li&gt;
&lt;li&gt;animations and motion appeal to us because they fit into our idea of how it should physically work.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ef4/liquid-fire"&gt;Liquid Fire&lt;/a&gt; live demo!

&lt;ul&gt;
&lt;li&gt; &lt;code&gt;npm install —save-dev liquid-fire&lt;/code&gt; for Ember 1.11+&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://miguelcobain.github.io/ember-paper"&gt;Ember Paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Closing Keynote: Chris Eppstein&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/chriseppstein"&gt;@chriseppstein&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Announcing: Eyeglass&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Distribute SASS extensions as NPM modules for &lt;a href="https://github.com/sass/libsass"&gt;LIBSASS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Will be able to integrate with a number of different build systems, including Ember CLI&lt;/li&gt;
&lt;li&gt;Major performance improvements&lt;/li&gt;
&lt;li&gt;The best parts of SASS and Compass, working with the best tools JS has to offer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;A Selection of Chris&amp;#39; Inspirational Messages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&amp;quot;Don&amp;#39;t be a Sasshole&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;People come to a community for the tech, but stay for the love!&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Sass didn&amp;#39;t lose when I started ignoring the haters&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;If you use a framework you love, you&amp;#39;ll never work a day in your life&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Secret to a vibrant community: be excellent to eachother&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>EmberConf 2015 Day 1</title>
    <link rel="alternate" href="/2015/03/03/ember-conf.html"/>
    <id>/2015/03/03/ember-conf.html</id>
    <published>2015-03-03T00:00:00Z</published>
    <updated>2015-03-03T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Opening Keynote: Tom Dale and Yehuda Katz&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;To kick off the conference Tomster joined Tom Dale and Yehuda Katz on stage!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mixonic"&gt;@mixonic&lt;/a&gt; &lt;a href="https://github.com/ef4"&gt;@ef4&lt;/a&gt; &lt;a href="https://github.com/mmunm"&gt;@mmun&lt;/a&gt; were welcomed as new members to the Ember Core Team&lt;/li&gt;
&lt;li&gt;Big thanks to Robert Jackson &lt;a href="https://github.com/rwjblue"&gt;@rwjblue&lt;/a&gt;!!!! &lt;a href="http://getrwjblueabeer.com"&gt;Get rwjblue a beer!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Ember 2014 in Review&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Rapid Release worked great! 6 week release cycle to get new features into everyone&amp;#39;s hands.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;HTMLBars&lt;/h3&gt;
&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;lt;a href={{url}}&amp;gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;instead of&lt;/p&gt;
&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&amp;lt;a {{bindAttr href=&amp;quot;url&amp;quot;}}&amp;gt; 
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Block parameters, faster and lower memory, validation for templates&lt;/li&gt;
&lt;li&gt;Killed metamorphs!&lt;/li&gt;
&lt;li&gt;Improvements to Ember Inspector including Ember Data and promises pane, render performance tab, multiple &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;s, and redesigned UI, to name a few.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Ember CLI&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Single install command for Addons, test support, massive performance improvements, and API stubbing, and server proxy (the list goes on!).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Testing Ecosystem&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;handles asynchrony &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Ember Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Relationship syncing, async relationships - built with async loading in mind.&lt;/li&gt;
&lt;li&gt;Adapter Ecosystem&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;That was last year, what&amp;#39;s next?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://guides.emberjs.com"&gt;Versioned Guides&lt;/a&gt; -- live today!&lt;/li&gt;
&lt;li&gt;Next Version of Ember CLI (as of last night)&lt;/li&gt;
&lt;li&gt;Engines&lt;/li&gt;
&lt;li&gt;List View&lt;/li&gt;
&lt;li&gt;&lt;angle-bracket&gt; Components (already in Canary)&lt;/li&gt;
&lt;li&gt;Liquid Fire&lt;/li&gt;
&lt;li&gt;Async and Routable Components&lt;/li&gt;
&lt;li&gt;Ember Data: JSON API support out of the box&lt;/li&gt;
&lt;li&gt;Pagination and Filtering&lt;/li&gt;
&lt;li&gt;Shipping Ember Data 1.0&lt;/li&gt;
&lt;li&gt;6/12 release date for Ember 2.0, Ember Inspector, Ember CLI, LiquidFire, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Ember.js Performance by Stefan Penner&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/stefanpenner"&gt;@stefanpenner&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Important choices to make, how to make the right choices?&lt;/li&gt;
&lt;li&gt;Time vs. Space&lt;/li&gt;
&lt;li&gt;Things that are costly in space: closures, objects, non-optimized code, compiled code, excess shape allocations&lt;/li&gt;
&lt;li&gt;In Ember.js, need to do less work, align with primitives&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Mis-alignment #1&lt;/h2&gt;

&lt;p&gt;Problem: Ember does too much work.&lt;/p&gt;

&lt;p&gt;Solution: do less&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Actions up, bindings down, no two-way bindings, explicit data flow&lt;/li&gt;
&lt;li&gt;RIP singleton controllers, explicit lifecycle&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Mis-alignment #2&lt;/h2&gt;

&lt;p&gt;Problem: &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;super&lt;/code&gt; are hard to learn and mis-aligned with ES2015&lt;/p&gt;

&lt;p&gt;Solution: Embrace super&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explicit defaults in super&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t set properties until super&lt;/li&gt;
&lt;li&gt;When to call &lt;code&gt;_super()&lt;/code&gt;: When overwriting a framework method before touching &lt;code&gt;this&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Mis-alignment #3&lt;/h2&gt;

&lt;p&gt;Problem: Ember.Object.reopen, buggy, complex internals, massive allocations &amp;amp; shapes&lt;/p&gt;

&lt;p&gt;Solution: Limit reopen to before first instantiation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meta is a good thing. Every class has a meta, every instance has a meta. Metas for instances are what kill us. Meta is &amp;quot;live&amp;quot; inheriting. If can limit reopen, can make all metas one shape.&lt;/li&gt;
&lt;li&gt;meta.listeners is crazier&lt;/li&gt;
&lt;li&gt;Solution: work with V8 to make things better&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Designing for Ember Apps by Steve Trevathan&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://twitter.com/strevat"&gt;@strevat&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mental models: Understand where the user is coming from and what kinds of interactions they deal with

&lt;ul&gt;
&lt;li&gt;&amp;quot;What I think the thing is&amp;quot;&lt;/li&gt;
&lt;li&gt;Influenced by experiences from the past&lt;/li&gt;
&lt;li&gt;Not always solid: can be updated and changed. (improvements)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2 types of mental models

&lt;ul&gt;
&lt;li&gt;Macro: what I think it is from a distance.&lt;/li&gt;
&lt;li&gt;Micro: how I think each individual interaction works; the specific feature.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Build a framework of understanding

&lt;ul&gt;
&lt;li&gt;Some apps are just too complicated&lt;/li&gt;
&lt;li&gt;Use explicitly if they apply&lt;/li&gt;
&lt;li&gt;Break mental models if it improves the experience&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Design Patterns&lt;/h2&gt;

&lt;h3&gt;#1 Gradual Engagement&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Core value given for free. Eventually you may be asked to sign up.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;#2 Skeleton UI&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ex. Google maps: grid becomes fully rendered map.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;#3 Carry Context&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ex. rdio: music played on laptop is reflected on iPad (or other devices). &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;#4 Reuse Core Interactions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ex. Browsing Pinterest: provides click and follow tangent.&lt;/li&gt;
&lt;li&gt;Micro becomes Macro; core interactions become a symbol of your app.&lt;/li&gt;
&lt;li&gt;&amp;quot;When I go home and think of your app, I think of the experience, the micro features more than the macro ones.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;#5 Offline Mode&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ex. Google Docs: “trying connect” message and can’t interact with document. Incredibly Frustrating.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Tools of the Trade&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A free design pattern library for Ember apps. &lt;a href="http://toolsofthetrade.dockyard.com"&gt;Sign up!!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Hijaking Hacker News with Ember.js by Godfrey Chan&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/chancancode"&gt;@chancancode&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Being a canadian is awesome&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a href="https://github.com/chancancode/hn-reader"&gt;Hijacking Hacker News App&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Browser extension that transforms old site design to new, more usable app&lt;/li&gt;
&lt;li&gt;Runs in hacker news domain&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Getting the Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$.get(&amp;quot;/news&amp;#39;).then()&lt;/code&gt;: request html page, extract data, then manipulate&lt;/li&gt;
&lt;li&gt;Hacker News HTML Scrapper: need adapter to help talk to Ember Data store; customize adapter and serializer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Fixing the URLs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Hacker News urls are not ideal for building an Ember app.&lt;/li&gt;
&lt;li&gt;HN urls (serialized App States) to Ember Router (Actual App States)

&lt;ul&gt;
&lt;li&gt;trick Ember into seeing URLs that are different from what is in the address bar&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Router location types: &lt;code&gt;Ember.HistoryLocation&lt;/code&gt; vs. &lt;code&gt;Ember.HashLocation&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Can use same mechanism to make a custom Ember.Location: &lt;code&gt;App.HackerNewsLocation = Ember.Location.extend()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Preferences&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Changing preferences in one place and can see changes reflected in other

&lt;ul&gt;
&lt;li&gt;Use observer pattern&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;The Possibilities&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What if your ideas do not line up with the framework&amp;#39;s choices?&lt;/li&gt;
&lt;li&gt;If the frameworks is doing it&amp;#39;s job, than the possibilities should be endless!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;The Art of Ember App Deployment by Luke Melia&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/lukemelia"&gt;@lukemelia&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Need to adjust deployment techniques from &amp;quot;server app&amp;quot; days&lt;/li&gt;
&lt;li&gt;When traffic starts routing to the new app, finger-printed assets can no longer be accessed

&lt;ul&gt;
&lt;li&gt;Need to keep old and new finger printed assets for a few minutes after a deploy.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Versioning&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Learn from native apps - phones run different versions of an app&lt;/li&gt;
&lt;li&gt;Keep API working for older clients through API versioning&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Deployment &amp;amp; serving strategy&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTML page should be managed and deployed as part of static asset deployment process&lt;/li&gt;
&lt;li&gt;HTML page should be served by the API server&lt;/li&gt;
&lt;li&gt;Preview before activating&lt;/li&gt;
&lt;li&gt;A/B Testing

&lt;ul&gt;
&lt;li&gt;Setting global flags based on A/B buckets&lt;/li&gt;
&lt;li&gt;Serving up wholly different HTML based on A/B bucket&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Notify connected clients&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The New &lt;a href="github.com/ember-cli/ember-cli-deploy"&gt;&lt;code&gt;ember-cli-deploy&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Merged these three projects: &lt;code&gt;ember-deploy&lt;/code&gt;, &lt;code&gt;front-end-builds&lt;/code&gt;, &lt;code&gt;ember-cli-deploy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now, one project with 6 maintainers (and growing!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Roadmap&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Release 0.4.0 by the end of this week!&lt;/li&gt;
&lt;li&gt;Reelease 0.5.0 

&lt;ul&gt;
&lt;li&gt;New pipeline hooks and plugins architecture&lt;/li&gt;
&lt;li&gt;Includes post-deploy hook&lt;/li&gt;
&lt;li&gt;Documentation for plugin developers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ember-cli-front-end-builds&lt;/code&gt; becomes a plugin&lt;/li&gt;
&lt;li&gt;USAGE: &lt;code&gt;ember deploy staging&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Beyond 0.5.0: deployment to named buckets, support A/B tests, beta testing, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Ambitious UX for Ambitious Apps by Lauren Tan&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/poteto"&gt;@poteto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good Design is:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;* how it works
* reactive
* playful
* informative
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Designing the product vs. designing the experience&lt;/li&gt;
&lt;li&gt;You are not the same as your website users&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Good Design is Reactive&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Instant feeback&lt;/li&gt;
&lt;li&gt;Flow of data and maintaining relationships between that data&lt;/li&gt;
&lt;li&gt;Ember allows reactivity through the observer pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;The Observer Pattern&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Computed properties transform properties and keep relationships in sync&lt;/li&gt;
&lt;li&gt;Computed Property Macros to keep things DRY.

&lt;ul&gt;
&lt;li&gt;Ember ships with a bunch of these out of the box (map, mapBy, concat, etc)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Observers synchronously invoked when dependent properties change&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Good design is playful&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Has personality&lt;/li&gt;
&lt;li&gt;Ex. Slack when you open app (fun messages)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Good Design is Informative&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Visibility of System Status

&lt;ul&gt;
&lt;li&gt;Jakob Nielson - 10 heuristics for User Interface Design&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ex. Flash messages

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/poteto/ember-cli-flash"&gt;&lt;code&gt;ember-cli-flash&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Good Design is Intuitive&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Drag and drop (trello, Google Calendar, etc...)&lt;/li&gt;
&lt;li&gt;Ember handles drag and drop events out of the box

&lt;ul&gt;
&lt;li&gt;add &lt;code&gt;draggable=true&lt;/code&gt; to any html element to make it draggable&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Bring Sanity to Frontend Infastructure with Ember by Sam Selikoff&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/samselikoff"&gt;@samselikoff&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;How Ember Can Help Today:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ember and Ember CLI helps infastructure by reducing boilerplate&lt;/li&gt;
&lt;li&gt;Similar directory structure and architecture&lt;/li&gt;
&lt;li&gt;Conventions: eliminate trivial differences that hold us back&lt;/li&gt;
&lt;li&gt;Writing add-ons for shareable code. Allows us to build structure.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;ember deploy&lt;/code&gt; to deploy apps. Auth and backend config work into separate deploy server.&lt;/li&gt;
&lt;li&gt;Testing in Ember using &lt;code&gt;ember test&lt;/code&gt;. QUnit provides helpers.&lt;/li&gt;
&lt;li&gt;Identify redundancies and abstractions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;How Ember Can Help Tomorrow:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Semantic versioning and CLI conventions&lt;/li&gt;
&lt;li&gt;Flexibility&lt;/li&gt;
&lt;li&gt;New standards and best practices

&lt;ul&gt;
&lt;li&gt;generally, shared solutions/frameworks help identify and discover ways of improving applications&lt;/li&gt;
&lt;li&gt;Ember always keeps up to date with these best practices&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;“Ember is not just a framework, it’s a philosophy” of how to create and improve software

&lt;ul&gt;
&lt;li&gt;First, give real developers the tools to tinker&lt;/li&gt;
&lt;li&gt;Then, deliberately fold in shared solutions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In summary, innovate &amp;amp; share!&lt;/p&gt;

&lt;h1&gt;Dynamic Graphic Composition In Ember by Chris Henn&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/chnn"&gt;@chnn&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Spliting a Statistical Graphic into Parts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Splitting a problem allows us to change one feature of the graphic at a time&lt;/li&gt;
&lt;li&gt;Suggests the aspects of a plot that are possible to change&lt;/li&gt;
&lt;li&gt;Encourages custom visualizations for every data situation&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Demo: &lt;a href="https://github.com/chnn/composing-graphics"&gt;Scatterplot example&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Adds multiple regression lines (in example, based on # of cylinders of each car)&lt;/p&gt;
&lt;div class="highlight hbs "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{{#each subset as |subset|}}
  // component
{{/each}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Each point in the graph is an svg circle&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Grammer of Graphics by Hadley Wickham&lt;/h3&gt;

&lt;p&gt;(Book of guidlines to follow)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data to Aesthetic Mappings&lt;/li&gt;
&lt;li&gt;Scales: one per Asthetic mapping

&lt;ul&gt;
&lt;li&gt;Each data to aesthetic mapping has some mapping function&lt;/li&gt;
&lt;li&gt;he has chosen to represent these as points in scatterplot example&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Layers: geom, stat, optional data to aesthetic mapping&lt;/li&gt;
&lt;li&gt;Coordinate System&lt;/li&gt;
&lt;li&gt;Faceting&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;What does this look like using Ember?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Data to Aesthetics = outer layer component which takes in the data as params&lt;/li&gt;
&lt;li&gt;Scales = computed properties (using computer property macros)&lt;/li&gt;
&lt;li&gt;Layers = looks like top level component, but must pass the scales&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Further Considerations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Interactivity&lt;/li&gt;
&lt;li&gt;Animations and transitions

&lt;ul&gt;
&lt;li&gt;performance (updating graphic many times per second)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Test-Driven Development By Example by Toran Billups&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/toranbn"&gt;@toranb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live coding!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Red, green, refactor

&lt;ul&gt;
&lt;li&gt;You get a lot of feedback from red (so it can be red, red, red, green, refactor)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Incorrect selector in template to make sure you’re doing it correctly (aka. test should fail)&lt;/li&gt;
&lt;li&gt;Test should not be very layout dependent

&lt;ul&gt;
&lt;li&gt;Should be more general and not break whenever you make template changes that do not change app functionality.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Test names should be descriptive&lt;/li&gt;
&lt;li&gt;Testing computed properties is recommended because of how caching works with them. Failing test will let you know which properties should be observed in order to break the cache.&lt;/li&gt;
&lt;li&gt;Design proof testing&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Rubyist's Guide to Executing JavaScript</title>
    <link rel="alternate" href="/2015/02/24/rubyists-guide-to-executing-javascript.html"/>
    <id>/2015/02/24/rubyists-guide-to-executing-javascript.html</id>
    <published>2015-02-24T00:00:00Z</published>
    <updated>2015-02-24T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;JavaScript is introduced to developers as a programming language that runs client-side, in the browser. This is convenient as a jumping off point for aspiring programmers, who can simply open up Chrome’s Web Inspector and start alerting “Hello, World!”, but it’s a concept that isn’t easy to unpack. Soon enough, the developer will likely find herself in contact with JavaScript outside of the browser – Node.js being the most prominent example of this. At this point, the notion of JavaScript being a language for the browser is no longer helpful; it obfuscates what is happening when a developer executes a line of code.&lt;/p&gt;

&lt;p&gt;This post is a high level primer on what is happening “under the hood” with our code. It will lend some insight into what terminology like “tokenizing,” “interpreting,” “compiling,” and a host of other terms mean. You&amp;#39;ll gain a better sense of what the concept of a virtual machine encapsulates. And hopefully you&amp;#39;ll leave with a better understanding of what your script is doing before it hits your computer&amp;#39;s processor.&lt;/p&gt;

&lt;p&gt;I feel this article will be well-suited for Rubyists who find themselves increasingly working in the realm of JavaScript, as I’ll be comparing how code executes between the two languages.&lt;/p&gt;

&lt;p&gt;Rather than explaining how a line of Ruby or JavaScript code gets processed and run, I’d like to work our way backwards, beginning with machine code. When you write a line of Ruby, it doesn’t simply go to the processor when you run the script. It goes through a number of translations before being turned into machine code that the processor can execute. We’ll look at how Ruby gets processed and then touch on how JavaScript differs.&lt;/p&gt;

&lt;h1&gt;Ruby&lt;/h1&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/Sa1qURz.png" alt="Ruby execution diagram"&gt;&lt;/p&gt;

&lt;h2&gt;Machine code&lt;/h2&gt;

&lt;p&gt;Machine code is binary that is executed directly by your computer’s CPU. The bit patterns correspond directly to the architecture design of the processor.&lt;/p&gt;

&lt;p&gt;Before a statement in a scripted language becomes machine code, it gets compiled into machine code by a compiler.&lt;/p&gt;

&lt;h2&gt;Virtual Machine&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://www.aosabook.org/en/llvm.html"&gt;LLVM&lt;/a&gt; compiles code on most
Unix-based machines. It generates the machine code for the processor
during compilation, which is just the process of translating one language to another.&lt;/p&gt;

&lt;p&gt;The virtual machine executes your code. It&amp;#39;s written in C and is known as the &lt;a href="http://en.wikipedia.org/wiki/YARV"&gt;YARV&lt;/a&gt; interpreter. It is at the heart of a scripting languages &amp;quot;implementation,&amp;quot; as it executes the source code via whatever language the scripting language is built upon (&lt;a href="http://en.wikipedia.org/wiki/C_(programming_language)"&gt;C&lt;/a&gt; in the case of &lt;a href="http://en.wikipedia.org/wiki/Ruby_MRI"&gt;Ruby MRI&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;YARV doesn’t receive the Ruby statement as you typed it. It goes through an abstraction of your code known as an &lt;a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;Abstract Syntax Tree (AST)&lt;/a&gt;, which get compiled to YARV byte code and run.&lt;/p&gt;

&lt;p&gt;This &amp;quot;tree&amp;quot; is made up of nodes assembled by something called the parser. &lt;/p&gt;

&lt;h2&gt;Parser&lt;/h2&gt;

&lt;p&gt;You can think of a node on the Abstract Syntax Tree as an atomic representation of a Ruby grammar rule. The reason that Ruby knows to print “Hello, World” when it sees &lt;code&gt;print &amp;#39;Hello, World&amp;#39;&lt;/code&gt; is because the parser knows that &lt;code&gt;print&lt;/code&gt; is a method and the string &lt;code&gt;&amp;#39;Hello, World&amp;#39;&lt;/code&gt; is its argument. These syntax rules are located inside of a language’s grammar rule file.&lt;/p&gt;

&lt;p&gt;Again, the parser creates the Abstract Syntax Tree that the virtual machine compiles and interprets.&lt;/p&gt;

&lt;h2&gt;Tokenizer/Lexer&lt;/h2&gt;

&lt;p&gt;If you’re wondering how Ruby knows that &lt;code&gt;print&lt;/code&gt; is a separate element in the language from &lt;code&gt;&amp;#39;Hello, World&amp;#39;&lt;/code&gt;, then you’re understanding the function of the Lexer or Tokenizer. The Tokenizer scans your line of Ruby code, character-by-character and determines where the &amp;quot;words&amp;quot; of the language begin and end. The Tokenizer can tell the difference between a space separating words and a space separating a method name from its arguments.&lt;/p&gt;

&lt;p&gt;And that’s the 10,000 foot lifecycle of a Ruby statement, as it goes from Tokenization to becoming machine code. If you’re looking for the microscopic explanation, I’d recommend &lt;a href="http://www.nostarch.com/rum"&gt;Ruby Under a Microscope&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;JavaScript&lt;/h1&gt;

&lt;h2&gt;Client-side&lt;/h2&gt;

&lt;p&gt;Most browsers implement &lt;a href="http://en.wikipedia.org/wiki/Just-in-time_compilation"&gt;Just-In-Time (JIT) compiling&lt;/a&gt;. This means that the JavaScript code you write is compiled right before it gets executed by the virtual machine; though, in JavaScript, the interpreter is not referred to as a virtual machine, but as a JavaScript engine.&lt;/p&gt;

&lt;p&gt;V8 is the engine that interprets and executes JavaScript in the Chrome browser, Nitro is the engine for Safari, SpiderMonkey for Firefox, and Chakra on Internet Explorer. The efficiency with which a browser interprets JavaScript accounts for a substantial portion of its performance these days, especially as JavaScript-heavy, Single Page Applications become increasingly important.&lt;/p&gt;

&lt;h2&gt;Server-side&lt;/h2&gt;

&lt;p&gt;Node.js is the predominant framework for running JavaScript server-side. It is built on top of Google’s V8 engine, which is a little confusing if you’ve just read that V8 interprets JavaScript in the browser. In general terms, the JavaScript interpreter is extracted from Chrome, compiled on the server, and utilized by Node.js, allowing you to execute JavaScript outside of the browser.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Upon researching how a line of Ruby or JavaScript gets executed, you&amp;#39;ll quickly find that you can go down a rabbit hole. There are so many different implementations of Ruby, so many advancements in how code gets processed, and so much ambiguity in the terminology we use, that it can be quite challenging to form a mental model of what&amp;#39;s going on under the hood. That being said, a little patience goes a long way, and if you&amp;#39;re looking to dive into any one of the topics described above, I think you&amp;#39;ll be surprised at how readable much of the technical documentation is out there.&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgc" target="_blank" href="http://wickedgoodember.com/">Wicked Good Ember Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--swift" target="_blank" href="http://www.meetup.com/Boston-Swift/">Boston Swift</a><a class="footer__event--uxhh" target="_blank" href="http://www.uxhappyhour.com/bos">UX Happy Hour</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2015/03/16/thriving-in-a-new-work-environment.html"><strong>Thriving in a New Work Environment</strong><h6 class='footer-desc'>Learn how to go beyond expectations at your new job</h6></a>
<a class="footer__post" href="/2015/03/11/ask-good-questions.html"><strong>Ask good questions</strong><h6 class='footer-desc'>The only way to get real answers in user interviews for UX design</h6></a>
<a class="footer__post" href="/2015/03/09/dockyard-is-now-accepting-staff-augmentation-ember-js-contracts.html"><strong>DockYard is now accepting staff augmentation Ember.js contracts</strong><h6 class='footer-desc'></h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>