<!DOCTYPE html><html><head><title>DockYard</title><link href="/stylesheets/all-e7e7283c.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-ce68a29a.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta charset='utf-8'><meta content='DockYard.com - ' name='description'><link href='//cloud.typography.com/6496052/702882/css/fonts.css' rel='stylesheet' type='text/css'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/favicon.png' rel='shortcut icon' type='image/x-icon'><link href='/favicon.png' rel='icon' type='image/x-icon'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                             ..
                                           .O.
                                       .:OO.
                                      :OOO.
                                    :OOO:.
                         ...      :OOOO:
                   ..ZOOOOOOOOO..OZ.O.
                   OOOOOOOOOOOOOOOOI
                  OOOOOOOOOOOOOOOOI,
                 OOOOOOOO. .OOOOOOOO:
                 OOOOOOOO   OOOOOOOOO:
                OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO:
               .OOOOOOOOOOOOOOOOOOOOO.
                OOOOOOOOOOOOOOOOOOOOO
                OOOOOO?:   .OOOOOOOOO
               .OOOOO      OOOOOOOOOO
,OO ZO,        OOOOO,     OOOOOOOOOO+
 OOOOO.        OOOOO     OOOOOOOOOOO+
  OOO?        OOOOO     .OOOOOOOOOOO:
   OOO,      OOOOO.    .OOOOOOOOOOOO
    OOOOOOOOOOOOO.    .OOOOOOOOOOOO.
     OOOOOOOOOOOO.  .OOOOOOOOOOOOO.
      8OOOOOOOOOOOOOOOOOOOOOOOODO:
         :OOOOOOOOOOOOOOOOOOOO::

--></head><body class='feed'><header><div class='extended-nav-wrap'><div class='l-wrap--wide'><nav class='extended-nav'><a class="extended-nav--logo" data-icon="⌂" href="http://dockyard.com/"><span class='is-hidden'>Home</span></a>
<a class="extended-nav--close" data-icon="X" href="#"><span class='is-hidden'>Close</span></a><div class='extended-nav__items'><div class='extended-nav__items--mobile'><a class="extended-nav__item--work extended-nav__item" href="#">Work</a><nav class='work-nav--mobile'><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong></a></nav></div><a class="extended-nav__item" href="http://dockyard.com/team">Our Team</a><a class="extended-nav__item" href="http://dockyard.com/process">Process</a><a class="extended-nav__item" href="http://dockyard.com/community">Community</a><a class="extended-nav__item active" href="/">Blog</a><a class="extended-nav__item" href="http://dockyard.com/hire-us">Hire Us</a></div></nav><nav class='work-nav'><h6>Selected Work</h6><a href="http://dockyard.com/work/credit-card-reviews" class="work-nav-item"><strong class='work-nav-item__title'>Credit Card Reviews</strong><p>Credit card advice from real people.</p></a>
<a href="http://dockyard.com/work/coachup" class="work-nav-item"><strong class='work-nav-item__title'>CoachUp</strong><p>You should be training. Right now.</p></a>
<a href="http://dockyard.com/work/askthem" class="work-nav-item"><strong class='work-nav-item__title'>AskThem</strong><p>Ask officials questions on city, state, and federal levels.</p></a>
<a href="http://dockyard.com/work/beacon-hill-blitz" class="work-nav-item"><strong class='work-nav-item__title'>Beacon Hill Blitz</strong><p>How technology helped repeal the #TechTax.</p></a></nav></div></div><nav class='main-nav-wrap'><div class='main-nav l-wrap--wide'><a class="logo" href="http://dockyard.com">DockYard</a><a class="club-sandwich" data-icon="☰" href="#"><span class='is-hidden'>Navigation</span></a></div></nav></header><div class='push--header'></div><div class='l-wrap--blog'><a href="/"><strong class='logo--blog'>ReefPoints</strong><strong class='logo--blog__tagline'>Blog</strong></a><nav class='blog-nav'><a class="blog-nav__item " href="/">Posts</a><a class="blog-nav__item " href="/categories.html">Categories</a><a class="blog-nav__item " href="/authors.html">Authors</a></nav></div><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-12-26T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Pattern Matching in Elixir for Rubyists</title>
    <link rel="alternate" href="/2014/12/26/pattern-matching-in-elixir-for-rubyists.html"/>
    <id>/2014/12/26/pattern-matching-in-elixir-for-rubyists.html</id>
    <published>2014-12-26T00:00:00Z</published>
    <updated>2014-12-26T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This is the first in a series of posts for helping Ruby devs understand
some of the concepts in Elixir.&lt;/p&gt;

&lt;h2&gt;Pattern Matching&lt;/h2&gt;

&lt;p&gt;Pattern Matching is one of my favorite Elixir features. Let&amp;#39;s take a
look. (using an &lt;a href="http://elixir-lang.org/getting_started/7.html#7.2-maps"&gt;Elixir
Map&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;%{foo: bar} = %{foo: &amp;quot;baz&amp;quot;}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above is matching a pattern. Don&amp;#39;t think of &lt;code&gt;=&lt;/code&gt; as assignment, you
should think of &lt;code&gt;=&lt;/code&gt; as &lt;em&gt;equality&lt;/em&gt;. The left-hand side of the &lt;code&gt;=&lt;/code&gt; is
equal to the right-hand side. Through pattern matching the variable
&lt;code&gt;bar&lt;/code&gt; is assigned the value &lt;code&gt;&amp;quot;baz&amp;quot;&lt;/code&gt;. Consider:&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;[foo, bar] = [1, 2]
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;foo&lt;/code&gt; is assigned &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; is assigned &lt;code&gt;2&lt;/code&gt;. Patterns can match to
any depth:&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;[foo, bar, [baz]] = [1, 2, [3]]
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;here &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; have the same value from the previous example but
&lt;code&gt;baz&lt;/code&gt; is now assigned the value of &lt;code&gt;3&lt;/code&gt;. Alternatively if we had written:&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;[foo, bar, baz] = [1, 2, [3]]
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;baz&lt;/code&gt; is now assigned the value of &lt;code&gt;[3]&lt;/code&gt;. This would be an example of a
semi-greedy matcher. You can expand upon this to greedily match the
entire statement:&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;my_list = [1, 2, [3]]
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now &lt;code&gt;my_list&lt;/code&gt; greedily matched to the entire right-hand side of the
&lt;code&gt;=&lt;/code&gt;. So why is this cool? Let&amp;#39;s take a look at a Ruby method that
has some conditions:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;foo&lt;/span&gt;(a, b, c)
  &lt;span class="keyword"&gt;if&lt;/span&gt; a == &lt;span class="symbol"&gt;:something&lt;/span&gt;
    ...
  &lt;span class="keyword"&gt;elsif&lt;/span&gt; b == &lt;span class="symbol"&gt;:other&lt;/span&gt;
    ...
  &lt;span class="keyword"&gt;else&lt;/span&gt;
    ...
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above is likely something familar to many Ruby devs. This presents
some problems. Any methods with several code paths increases the
complexity of the method. Complex methods can be difficult to test in
isolation. Let&amp;#39;s take a look at how this would be implemented in Elixir:&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;def foo(:something, b, c) do
  ...
end

def foo(a, :other, c) do
  ...
end

def foo(a, b, c) do
  ...
end
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The first question Ruby devs have is &lt;em&gt;why are there three functions of the same
name?&lt;/em&gt; In Elixir you can define multiple functions of the same name as
long as the function signatures are unique. Functions are matched
against the values passed in. So &lt;code&gt;foo(:something, 2, 3)&lt;/code&gt; would match the
first &lt;code&gt;foo&lt;/code&gt; defined. &lt;code&gt;foo(1, :other, 3)&lt;/code&gt; matches the second. &lt;code&gt;foo(1, 2,
3)&lt;/code&gt; matches the third. Match priority is the order in which the
functions are defined.&lt;/p&gt;

&lt;p&gt;Now our functions are concise, and focused on the very specific
behavior. The condition is obfuscated through the pattern matching but
this is a common design pattern in Elixir so it should be embrassed.&lt;/p&gt;

&lt;p&gt;The pattern matching can be more complex:&lt;/p&gt;
&lt;div class="highlight elixir "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;def foo(%{foo: bar}, &amp;quot;baz&amp;quot;) do
  ...
end
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above will match: &lt;code&gt;foo(%{foo: &amp;quot;zeb&amp;quot;}, &amp;quot;baz&amp;quot;)&lt;/code&gt; but would not match
&lt;code&gt;foo(%{foo: &amp;quot;zeb&amp;quot;}, &amp;quot;bar&amp;quot;)&lt;/code&gt; because the second argument does not match.&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href="http://elixir-lang.org/getting_started/4.html"&gt;Elixir Pattern Matching
Guide&lt;/a&gt; for more
information.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Importance of Process, and Why It Matters</title>
    <link rel="alternate" href="/2014/12/12/importance-of-process.html"/>
    <id>/2014/12/12/importance-of-process.html</id>
    <published>2014-12-12T00:00:00Z</published>
    <updated>2014-12-12T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I joined DockYard in April of this year, after leaving a small startup. Before that, I was at another
startup and doing lots of freelance/agency work. In all of these places, there was never an existing
process in place, aside from what was in my head. For better or worse, this was fine and allowed me to
get work done. What I have learned since joining DockYard however, is that my old method of working is
dangerous for a bigger company and just does not work.&lt;/p&gt;

&lt;p&gt;Initially, I resisted changing my process, like a fool/jerk. Why should I? My process has worked for
years, it was inherently superior! &lt;em&gt;Obviously&lt;/em&gt;, this was not true. I got too comfortable with how I
had been coding and ignored requests to learn about &lt;a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax"&gt;BEM syntax&lt;/a&gt; and organizing my CSS in a different order. Applying most
of these new techniques to my own personal projects allowed me to see the usefulness to our UX team&amp;#39;s
(evolving) process. It was then that I realized, process is not about you or I, it is about the team.&lt;/p&gt;

&lt;p&gt;If I am working on a project for six months and spin off to another project, another UX developer can
pick up where I left off and understand the code I have written. If everyone wrote code the way they
felt like, there would be so much time lost (and wasted) trying to figure out what the original coder
meant when they wrote something. Money would be lost as well because time would not be spent on doing
actual work.&lt;/p&gt;

&lt;p&gt;Process improves productivity and productivity allows the team to gain a better understanding of what
is possible for the company as a whole. Which, in the long run, creates better opportunities and
projects for all of us.&lt;/p&gt;

&lt;h4&gt;TL;DR&lt;/h4&gt;

&lt;p&gt;Be open to new ideas about process. If it does not make sense to you, apply it to your own work before
completely dismissing it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>HTMLBars: Calling All Testers</title>
    <link rel="alternate" href="/2014/11/30/htmlbars_calling_all_testers.html"/>
    <id>/2014/11/30/htmlbars_calling_all_testers.html</id>
    <published>2014-11-30T00:00:00Z</published>
    <updated>2014-11-30T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;HTMLBars support has landed in Ember&amp;#39;s canary channel thanks to the tireless work
of the HTMLBars team. Make sure to chat them up at &lt;a href="http://emberconf.com/"&gt;EmberConf&lt;/a&gt; (you
are going right?!?!) for some war stories.&lt;/p&gt;

&lt;p&gt;We are nearing the end of the 1.9 &lt;a href="http://emberjs.com/builds/#/beta"&gt;beta cycle&lt;/a&gt; (aiming for 2014-12-06)
which means we will be making the go / no-go decision on all pending features in Canary when we branch
for the next beta cycle. Clearly, we would all love to have 1.10 use HTMLBars.&lt;/p&gt;

&lt;p&gt;In order to enable the HTMLBars feature flag in the 1.10 betas (shipping around 2014-12-09), we need
help confirming that no major issues exist. This is where &lt;em&gt;you&lt;/em&gt; come in!&lt;/p&gt;

&lt;h3&gt;Using Canary Builds with Ember CLI&lt;/h3&gt;

&lt;p&gt;Upgrading to the canary channel with Ember CLI is very straightforward.&lt;/p&gt;

&lt;h4&gt;Update Bower&lt;/h4&gt;

&lt;p&gt;Run the following:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rm -rf bower_components
bower install --save handlebars#~2.0.0
bower install --save ember#canary
bower install
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Bower also prompts you to confirm various &amp;quot;resolutions&amp;quot; that it is unsure of. Make sure you
pick &lt;code&gt;ember#canary&lt;/code&gt; and Handlebars 2.0 if prompted.&lt;/p&gt;

&lt;h4&gt;Update NPM Dependencies&lt;/h4&gt;

&lt;p&gt;Run the following:&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;npm uninstall --save-dev broccoli-ember-hbs-template-compiler
npm install --save-dev ember-cli-htmlbars
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h4&gt;Summary&lt;/h4&gt;

&lt;p&gt;Now we have successfully updated to the latest canary builds of Ember. Next up: HTMLBars.&lt;/p&gt;

&lt;h3&gt;Using HTMLBars with Ember CLI&lt;/h3&gt;

&lt;p&gt;Enabling HTMLBars is as simple as adding the following to your &lt;code&gt;config/environment.js&lt;/code&gt; (under
&lt;code&gt;EmberENV.FEATURES&lt;/code&gt; section):&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;EmberENV: {
  FEATURES: {
    'ember-htmlbars': true
  }
},
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now restart any running &lt;code&gt;ember serve&lt;/code&gt; commands you have and you should be running with HTMLBars.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;This part is critical: Please report any issues &lt;a href="https://github.com/emberjs/ember.js/issues"&gt;at GitHub&lt;/a&gt;,
especially regressions from 1.8 or 1.9-beta. If your business has certain browser requirements (IE8 for example)
testing on those edge-case platforms today will help us resolve issues in time for 1.10.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Wish List</title>
    <link rel="alternate" href="/2014/11/28/ember-wish-list.html"/>
    <id>/2014/11/28/ember-wish-list.html</id>
    <published>2014-11-28T00:00:00Z</published>
    <updated>2014-11-28T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It&amp;#39;s getting close to Christmas and I&amp;#39;ve got a few things on my list for
Tomster Claus this year. All of my wishes are about making my
applications smaller. One of the constant complaints I see about Ember
is that it is &amp;quot;too fat&amp;quot;. You may not know this but this problem is
solveable and can actually grow alongside Ember to ensure your assets
are a slim as they can be. On to the wish list!&lt;/p&gt;

&lt;h3&gt;Tree Shaking&lt;/h3&gt;

&lt;p&gt;Are you familiar with Tree Shaking? The concept is simple, a dependency
graph of your application is built. Let&amp;#39;s say one of your files requires
&lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt;. And &lt;code&gt;A&lt;/code&gt; requires &lt;code&gt;D&lt;/code&gt;, and &lt;code&gt;F&lt;/code&gt;. And &lt;code&gt;C&lt;/code&gt; required &lt;code&gt;F&lt;/code&gt;.
Currently with Ember CLI all files for all of your dependencies will get
included in the final build. So if there is an &lt;code&gt;E&lt;/code&gt; file it will be in
the final build even if you are not using it in any way, this is wasteful.
With ES6 the dependency graph can be built between your files, any files
that are not in the graph are not included in the final built. They are
&amp;quot;shaken&amp;quot; out of the build process. This means a smaller footprint for your assets.&lt;/p&gt;

&lt;p&gt;There are two major hurdles to implementing this in Ember CLI right now.
The first is that doing a static analysis on the dependency graph may
result in false positives of what files to ignore for the build. While
there are many files that you are depending upon via the &lt;code&gt;import&lt;/code&gt;
statement:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; { foo, bar } from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;baz&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is very easy to parse. But your application can also import
resources via the Ember Resolver:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;container.lookup(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;model:foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A few levels down a &lt;code&gt;resolveOther&lt;/code&gt; function is called and &lt;code&gt;lookup&lt;/code&gt; is
turned into a &lt;code&gt;require&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;my-app/models/foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;parsing this out is not as simple. We could just assume everything in
the app&amp;#39;s namespace should be part of the final build, but when other
libraries are doing more complex tricks with importing this presents a
problem. For example, in the latest version of Ember Validations the
validators themselves live in the &lt;code&gt;ember-validations&lt;/code&gt; namespace. You can
override validators by placing them in your namespace. The lookup is
something like this:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;function&lt;/span&gt; &lt;span class="function"&gt;lookupValidator&lt;/span&gt;(name) {
  &lt;span class="keyword"&gt;return&lt;/span&gt; container.lookup(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;validator:&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;+name) ||
    container.lookup(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember-validations@validator:&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;+name);
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;How do we properly parse this out to include the correct validators in
the dependency graph? One solution might be for library authors to
declare which files should always be included in the final build, but
this defeats the purpose of only including what is being used. If the
application is using the Presence Validator but not the Inclusion
Validator why would I want those extra LOCs?&lt;/p&gt;

&lt;p&gt;The other major hurdle is Ember itself. While Ember&amp;#39;s source is in ES6
form the final build that you get is in AMD. Which means it is one file.
Ember will have to be distributed in the original ES6 form. I am also
not a fan of the current package names. If this ever happens I would
much prefer:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Component from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ember/component&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;rather than&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; Component from &lt;span class="error"&gt;`&lt;/span&gt;ember-views/views/component&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Separate builds&lt;/h3&gt;

&lt;p&gt;Ember CLI is all or nothing right now. Which means that you have a
single build pipeline for your application assets (&lt;code&gt;app-name.js&lt;/code&gt;) and a single build
pipeline for 3rd party assets (&lt;code&gt;vendor.js&lt;/code&gt;). It would be nice to define
additional assets that can be built into final files. For example, &lt;a href="https://github.com/dockyard/ember-admin/issues/32"&gt;this
request for Ember
Admin&lt;/a&gt;. Technically
this could be done right now but it would require some heavy hacking of
the vendor asset pipeline in Ember CLI. Personally I would like to see
an API for this specifically. Perhaps it could be in the form of isolating a namespace to
be ignored in the &lt;code&gt;vendor.js&lt;/code&gt; final concat but still output in the
&lt;code&gt;dist/&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3&gt;Async code loading&lt;/h3&gt;

&lt;p&gt;This wish dove-tails off the previous one. Now that we have our separate
assets how do we safely load them into our Ember apps? If we are
isolating the assets I would think this implies they aren&amp;#39;t meant for
consumption at application launch. Going back to the Ember Admin
example, not all users need those LOCs. Only when an authorized user
hits the admin functionality should it pull down the Ember Admin assets
and plug into the app. This would be ideal. The major hurdle here is
with how the container currently works. Perhaps something like this
could put it on the right track:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="function"&gt;resolveOther&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(name) {
  &lt;span class="keyword"&gt;if&lt;/span&gt; (needAsyncLoad(name)) {
    asyncLoad(name).then(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
      &lt;span class="comment"&gt;// after this load completes the name&lt;/span&gt;
      &lt;span class="comment"&gt;// would be removed from the list of&lt;/span&gt;
      &lt;span class="comment"&gt;// resources requiring async loading&lt;/span&gt;
      resolveOther(name);
    }
  } &lt;span class="keyword"&gt;else&lt;/span&gt; {
    &lt;span class="keyword"&gt;return&lt;/span&gt; require(name);
  }
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This would allow even further shrinking of the initial applicaiton
footprint. Only include what is necessary, async load other assets. This
creates the illusion of speed which is just as good as actual speed. You
will have the trade-off of periodic sections of your app with a longer
than normal loading state, but that should only happen once per
application instance.&lt;/p&gt;

&lt;h3&gt;Wishes to reality&lt;/h3&gt;

&lt;p&gt;Fulfilling these wishes should go a long way to negating the &amp;quot;too fat&amp;quot; argument for
Ember. Here&amp;#39;s to hoping that 2015 will see a more lean Tomster.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>UX East Camp 2014</title>
    <link rel="alternate" href="/2014/11/18/we-did-it.html"/>
    <id>/2014/11/18/we-did-it.html</id>
    <published>2014-11-18T00:00:00Z</published>
    <updated>2014-11-18T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://uxeast.org/" title="UX East Camp"&gt;We did it.&lt;/a&gt; This weekend went far better than we ever could have imagined. We’re grateful and maybe a tad bit emotional, so bear with us.&lt;/p&gt;

&lt;p&gt;The camp was initially intended as somewhat of a proof of concept, but became something much more real than that. Beyond proving that we are all willing to spend 3 days living with complete strangers, we experienced the unique value of the connections, friendships, and mentoring that this style of event facilitated. It turns out that the people who pay good money for and spend a whole weekend on such a unique social and learning environment are exactly the type of people who make it worthwhile. The need to learn, share, and be challenged by their peers is in their blood. This is who they are, and they’re the people we want to bring together.&lt;/p&gt;

&lt;p&gt;It goes without saying: &lt;a href="https://twitter.com/michelleyaiser" title="Michelle Yaiser"&gt;Michelle&lt;/a&gt;, &lt;a href="https://twitter.com/StayingInDroves" title="Ed King"&gt;Ed&lt;/a&gt;, &lt;a href="https://twitter.com/CalamityJD" title="JD Jordan"&gt;JD&lt;/a&gt;, and &lt;a href="https://twitter.com/benjordan" title="Ben Jordan"&gt;Ben&lt;/a&gt; did much more than they were asked to and were the core of what made the camp so great. They shared their wisdom, challenged us to solve hilariously weird and unique problems, guided us, and befriended us. They poured their hearts into this and we are proud and humbled to have had them for our first UX East Camp.&lt;/p&gt;

&lt;p&gt;The event was a risk, but the speakers and attendees overwhelming proved to us that it can and should be done. So we’re going to do it again.&lt;/p&gt;

&lt;p&gt;See you next year at UX East Camp, Spring 2015.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rubygems.org Redesign</title>
    <link rel="alternate" href="/2014/11/18/rubygems-redesign.html"/>
    <id>/2014/11/18/rubygems-redesign.html</id>
    <published>2014-11-18T00:00:00Z</published>
    <updated>2014-11-18T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/rubygems-redesign.png" alt="rubygems-redesign.png"&gt;&lt;/p&gt;

&lt;p&gt;Today I am very proud to announce that the DockYard-led redesign of
&lt;a href="http://rubygems.org"&gt;rubygems.org&lt;/a&gt; has been launched.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rubycentral.org"&gt;Ruby Central&lt;/a&gt; just announced and put into production a redesign of Ruby&amp;#39;s
most popular community website during the Lightning Talk session at
&lt;a href="http://rubyconf.org"&gt;RubyConf 2014&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The redesign effort was led by &lt;a href="https://twitter.com/LoganFaerber"&gt;Logan
Faerber&lt;/a&gt; and built out by &lt;a href="https://twitter.com/acacheung"&gt;Amanda
Cheung&lt;/a&gt;. You can see how happy it has
made them.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/hooray-rubygems.jpg" alt="hooray-rubygems"&gt;&lt;/p&gt;

&lt;p&gt;We would have been lost without the guidance from Ruby Central folks &lt;a href="https://twitter.com/evanphx"&gt;Evan
Phoenix&lt;/a&gt;,
&lt;a href="https://twitter.com/dwradcliffe"&gt;David Radcliffe&lt;/a&gt;, &lt;a href="https://twitter.com/indirect"&gt;André Arko&lt;/a&gt;. As well as some insight from &lt;a href="http://twitter.com/qrush"&gt;Nick Quaranto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We were very fortunate to have been selected. We hope that everyone
enjoys the new look!&lt;/p&gt;
</content>
  </entry>
</feed>
<div class='push--footer'></div><footer><div class='l-wrap'><div class='l-footer-group'><h3 class='footer-group__title'>EVENTS</h3><a class="footer__event--wgc" target="_blank" href="http://wickedgoodember.com/">Wicked Good Ember Conf</a><a class="footer__event--ember" target="_blank" href="http://www.meetup.com/Boston-Ember-js/">Boston Ember.js Meetup</a><a class="footer__event--openhack" target="_blank" href="http://openhack.github.io/boston/">OpenHack Boston</a><a class="footer__event--ux" target="_blank" href="http://www.meetup.com/uxboston/">UX Boston Meetup</a><a class="footer__event--swift" target="_blank" href="http://www.meetup.com/Boston-Swift/">Boston Swift</a><a class="footer__event--uxhh" target="_blank" href="http://www.uxhappyhour.com/bos">UX Happy Hour</a></div><div class='l-footer-group'><a href="/"><h3 class='footer-group__title'>BLOG</h3></a>
<a class="footer__post" href="/2014/12/26/pattern-matching-in-elixir-for-rubyists.html"><strong>Pattern Matching in Elixir for Rubyists</strong><h6 class='footer-desc'></h6></a>
<a class="footer__post" href="/2014/12/12/importance-of-process.html"><strong>The Importance of Process, and Why It Matters</strong><h6 class='footer-desc'></h6></a>
<a class="footer__post" href="/2014/11/30/htmlbars_calling_all_testers.html"><strong>HTMLBars: Calling All Testers</strong><h6 class='footer-desc'></h6></a></div><div class='l-footer-group'><a href="http://dockyard.com/hire-us"><h3 class='footer-group__title'>CONTACT</h3></a><h6 class='footer-desc'>DockYard HQ is located in Boston. Stop in sometime and meet our team!</h6><a class="footer__address" target="_blank" href="http://goo.gl/maps/zBGfn"><h6>DockYard Inc.<br>101 Tremont Street<br>Suite 200<br>Boston, MA 02108</h6></a>
<a class="text-link" href="http://dockyard.com/hire-us">Get in touch.</a><div class='social-links--footer'><a target="_blank" data-icon="#" class="social-link" href="https://twitter.com/dockyard"><span class='is-hidden'>Twitter</span></a>
<a target="_blank" data-icon="★" class="social-link" href="https://github.com/dockyard"><span class='is-hidden'>GitHub</span></a>
<a target="_blank" data-icon="✒" class="social-link" href="http://reefpoints.dockyard.com/atom.xml"><span class='is-hidden'>RSS</span></a></div></div></div></footer><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>